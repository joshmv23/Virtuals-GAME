"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleConfigureDelegateeSignerMenu = exports.DelegateeSignerType = exports.AdminSignerType = exports.DelegateeConfigureSignerMenuChoice = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../../core");
var DelegateeConfigureSignerMenuChoice;
(function (DelegateeConfigureSignerMenuChoice) {
    DelegateeConfigureSignerMenuChoice["UseEoa"] = "useEoa";
    DelegateeConfigureSignerMenuChoice["UseMultiSig"] = "useMultiSig";
    DelegateeConfigureSignerMenuChoice["UsePkp"] = "usePkp";
    DelegateeConfigureSignerMenuChoice["Back"] = "back";
})(DelegateeConfigureSignerMenuChoice || (exports.DelegateeConfigureSignerMenuChoice = DelegateeConfigureSignerMenuChoice = {}));
var AdminSignerType;
(function (AdminSignerType) {
    AdminSignerType["Eoa"] = "eoa";
    AdminSignerType["MultiSig"] = "multiSig";
    AdminSignerType["Pkp"] = "pkp";
})(AdminSignerType || (exports.AdminSignerType = AdminSignerType = {}));
var DelegateeSignerType;
(function (DelegateeSignerType) {
    DelegateeSignerType["Eoa"] = "eoa";
    DelegateeSignerType["Pkp"] = "pkp";
})(DelegateeSignerType || (exports.DelegateeSignerType = DelegateeSignerType = {}));
const promptConfigureSignerMenu = async () => {
    const { action } = await (0, prompts_1.default)({
        type: 'select',
        name: 'action',
        message: 'What would you like to do?',
        choices: [
            {
                title: 'Use EOA',
                value: DelegateeConfigureSignerMenuChoice.UseEoa,
            },
            {
                title: 'Use Pkp',
                value: DelegateeConfigureSignerMenuChoice.UsePkp,
                disabled: true,
            },
            { title: 'Back', value: DelegateeConfigureSignerMenuChoice.Back },
        ],
    });
    if (!action) {
        throw new core_1.LawCliError(core_1.GeneralErrors.NO_ACTION_SELECTED, 'No admin menu action selected. Please select an action to continue.');
    }
    return action;
};
const handleConfigureDelegateeSignerMenu = async () => {
    try {
        return promptConfigureSignerMenu();
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.GeneralErrors.NO_ACTION_SELECTED) {
                core_1.logger.error(error.message);
                return await (0, exports.handleConfigureDelegateeSignerMenu)();
            }
        }
        throw error;
    }
};
exports.handleConfigureDelegateeSignerMenu = handleConfigureDelegateeSignerMenu;
