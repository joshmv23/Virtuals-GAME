"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGetRegisteredTools = void 0;
const core_1 = require("../../core");
const handleGetRegisteredTools = async (delegatee, pkp) => {
    try {
        const registeredTools = await delegatee.awDelegatee.getPermittedToolsForPkp(pkp.tokenId);
        // Process tools with policies
        if (Object.keys(registeredTools.toolsWithPolicies).length > 0) {
            core_1.logger.info('Tools with Policies:');
            Object.values(registeredTools.toolsWithPolicies).forEach((tool) => {
                core_1.logger.log(`  - ${tool.name} (${tool.ipfsCid})`);
                core_1.logger.log(`      - Tool Enabled: ${tool.toolEnabled ? '✅' : '❌'}`);
                core_1.logger.log(`      - Description: ${tool.description}`);
                core_1.logger.log(`      - Policy IPFS CID: ${tool.policyIpfsCid}`);
                core_1.logger.log(`      - Policy Enabled: ${tool.policyEnabled ? '✅' : '❌'}`);
            });
        }
        // Process tools without policies
        if (Object.keys(registeredTools.toolsWithoutPolicies).length > 0) {
            core_1.logger.info('Tools without Policies:');
            Object.values(registeredTools.toolsWithoutPolicies).forEach((tool) => {
                core_1.logger.log(`  - ${tool.name} (${tool.ipfsCid})`);
                core_1.logger.log(`      - Tool Enabled: ${tool.toolEnabled ? '✅' : '❌'}`);
                core_1.logger.log(`      - Description: ${tool.description}`);
            });
        }
        // Process unknown tools with policies
        if (Object.keys(registeredTools.toolsUnknownWithPolicies).length > 0) {
            core_1.logger.info('Unknown Tools with Policies:');
            Object.entries(registeredTools.toolsUnknownWithPolicies).forEach(([ipfsCid, tool]) => {
                core_1.logger.log(`  - Unknown tool: ${ipfsCid}`);
                core_1.logger.log(`      - Tool Enabled: ${tool.toolEnabled ? '✅' : '❌'}`);
                core_1.logger.log(`      - Policy IPFS CID: ${tool.policyIpfsCid}`);
                core_1.logger.log(`      - Policy Enabled: ${tool.policyEnabled ? '✅' : '❌'}`);
            });
        }
        // Process unknown tools without policies
        if (registeredTools.toolsUnknownWithoutPolicies.length > 0) {
            core_1.logger.info('Unknown Tools without Policies:');
            registeredTools.toolsUnknownWithoutPolicies.forEach((ipfsCid) => {
                core_1.logger.log(`  - Unknown tool: ${ipfsCid}`);
            });
        }
        // If no tools found at all
        if (Object.keys(registeredTools.toolsWithPolicies).length === 0 &&
            Object.keys(registeredTools.toolsWithoutPolicies).length === 0 &&
            Object.keys(registeredTools.toolsUnknownWithPolicies).length === 0 &&
            registeredTools.toolsUnknownWithoutPolicies.length === 0) {
            core_1.logger.info('No tools are registered for this PKP.');
        }
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.DelegateeErrors.NO_DELEGATED_PKPS) {
                core_1.logger.error('No PKPs are currently delegated to you.');
                return;
            }
        }
        throw error;
    }
};
exports.handleGetRegisteredTools = handleGetRegisteredTools;
