"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleManagePoliciesMenu = exports.ManagePoliciesMenuChoice = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
var ManagePoliciesMenuChoice;
(function (ManagePoliciesMenuChoice) {
    ManagePoliciesMenuChoice["GetAllPolicies"] = "getAllPolicies";
    ManagePoliciesMenuChoice["GetToolPolicy"] = "getToolPolicy";
    ManagePoliciesMenuChoice["SetPolicy"] = "setPolicy";
    ManagePoliciesMenuChoice["RemovePolicy"] = "removePolicy";
    ManagePoliciesMenuChoice["EnablePolicy"] = "enablePolicy";
    ManagePoliciesMenuChoice["DisablePolicy"] = "disablePolicy";
    ManagePoliciesMenuChoice["GetPolicyParameter"] = "getPolicyParameter";
    ManagePoliciesMenuChoice["SetPolicyParameter"] = "setPolicyParameter";
    ManagePoliciesMenuChoice["RemovePolicyParameter"] = "removePolicyParameter";
    ManagePoliciesMenuChoice["Back"] = "back";
})(ManagePoliciesMenuChoice || (exports.ManagePoliciesMenuChoice = ManagePoliciesMenuChoice = {}));
const choices = [
    {
        title: 'Get All Tools and Policies for the Agent Wallet',
        value: ManagePoliciesMenuChoice.GetAllPolicies,
    },
    {
        title: 'Get Tool Policy for a Delegatee',
        value: ManagePoliciesMenuChoice.GetToolPolicy,
    },
    {
        title: 'Set Policy for a Delegatee',
        value: ManagePoliciesMenuChoice.SetPolicy,
    },
    {
        title: 'Remove Policy for a Delegatee',
        value: ManagePoliciesMenuChoice.RemovePolicy,
    },
    {
        title: 'Enable Policy for a Delegatee',
        value: ManagePoliciesMenuChoice.EnablePolicy,
    },
    {
        title: 'Disable Policy for a Delegatee',
        value: ManagePoliciesMenuChoice.DisablePolicy,
    },
    {
        title: 'Get Policy Parameters for a Delegatee',
        value: ManagePoliciesMenuChoice.GetPolicyParameter,
    },
    {
        title: 'Set Policy Parameters for a Delegatee',
        value: ManagePoliciesMenuChoice.SetPolicyParameter,
    },
    {
        title: 'Remove Policy Parameters for a Delegatee',
        value: ManagePoliciesMenuChoice.RemovePolicyParameter,
    },
    {
        title: 'Back',
        value: ManagePoliciesMenuChoice.Back,
    },
];
const handleManagePoliciesMenu = async () => {
    const { option } = await (0, prompts_1.default)({
        type: 'select',
        name: 'option',
        message: 'What would you like to do?',
        choices,
    });
    if (!option) {
        throw new core_1.LawCliError(core_1.GeneralErrors.NO_ACTION_SELECTED, 'No action selected.');
    }
    return option;
};
exports.handleManagePoliciesMenu = handleManagePoliciesMenu;
