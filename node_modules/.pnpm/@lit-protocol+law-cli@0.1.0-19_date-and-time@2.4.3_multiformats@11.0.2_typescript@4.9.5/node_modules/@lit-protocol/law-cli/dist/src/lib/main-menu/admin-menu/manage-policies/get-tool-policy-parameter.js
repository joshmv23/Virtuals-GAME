"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGetToolPolicyParameter = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
const promptSelectToolForPolicyParameter = async (registeredTools) => {
    const choices = Object.values(registeredTools.toolsWithPolicies).map((tool) => ({
        title: tool.name,
        description: `${Object.keys(tool.delegateePolicies).length} policies`,
        value: tool,
    }));
    const { tool } = await (0, prompts_1.default)({
        type: 'select',
        name: 'tool',
        message: 'Select a tool to view policy parameters for:',
        choices,
    });
    if (!tool) {
        throw new core_1.LawCliError(core_1.GetToolPolicyParameterErrors.GET_CANCELLED, 'Tool policy parameter viewing cancelled.');
    }
    return tool;
};
const promptSelectDelegateeForPolicyParameter = async (delegatees) => {
    if (delegatees.length === 0) {
        throw new core_1.LawCliError(core_1.GetToolPolicyParameterErrors.NO_DELEGATEES, 'No delegatees found.');
    }
    const { delegatee } = await (0, prompts_1.default)({
        type: 'select',
        name: 'delegatee',
        message: 'Select a delegatee to view policy parameters for:',
        choices: delegatees.map((delegatee) => ({
            title: delegatee,
            value: delegatee,
        })),
    });
    if (!delegatee) {
        throw new core_1.LawCliError(core_1.GetToolPolicyParameterErrors.GET_CANCELLED, 'Tool policy parameter viewing cancelled.');
    }
    return delegatee;
};
const displayToolPolicyParameters = async (admin, pkp, tool, delegatee) => {
    const parameters = await admin.awAdmin.getAllToolPolicyParametersForDelegatee(pkp.info.tokenId, tool.ipfsCid, delegatee);
    if (!parameters || parameters.length === 0) {
        throw new core_1.LawCliError(core_1.GetToolPolicyParameterErrors.NO_PARAMETERS, 'No policy parameters found.');
    }
    core_1.logger.info(`Policy parameters for tool ${tool.name}:`);
    core_1.logger.log(`  Tool IPFS CID: ${tool.ipfsCid}`);
    core_1.logger.log(`  Delegatee: ${delegatee}`);
    core_1.logger.log('  Parameters:');
    for (const param of parameters) {
        try {
            const value = Buffer.from(param.value).toString('utf8');
            let displayValue;
            if (value.startsWith('[') || value.startsWith('{')) {
                try {
                    const parsed = JSON.parse(value);
                    displayValue = JSON.stringify(parsed, null, 2);
                }
                catch {
                    displayValue = value;
                }
            }
            else {
                displayValue = value;
            }
            core_1.logger.log(`    ${param.name}: ${displayValue}`);
        }
        catch {
            core_1.logger.log(`    ${param.name}: ${param.value}`);
        }
    }
};
const handleGetToolPolicyParameter = async (admin, pkp) => {
    try {
        const registeredTools = await admin.awAdmin.getRegisteredToolsAndDelegateesForPkp(pkp.info.tokenId);
        if (registeredTools === null ||
            Object.keys(registeredTools.toolsWithPolicies).length === 0) {
            throw new core_1.LawCliError(core_1.GetToolPolicyParameterErrors.NO_TOOLS_WITH_POLICIES, 'No tools with policies found.');
        }
        const selectedTool = await promptSelectToolForPolicyParameter(registeredTools);
        const selectedDelegatee = await promptSelectDelegateeForPolicyParameter(selectedTool.delegatees);
        await displayToolPolicyParameters(admin, pkp, selectedTool, selectedDelegatee);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.GetToolPolicyParameterErrors.NO_TOOLS_WITH_POLICIES ||
                error.type === core_1.GetToolPolicyParameterErrors.NO_DELEGATEES ||
                error.type === core_1.GetToolPolicyParameterErrors.NO_PARAMETERS ||
                error.type === core_1.GetToolPolicyParameterErrors.GET_CANCELLED) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleGetToolPolicyParameter = handleGetToolPolicyParameter;
