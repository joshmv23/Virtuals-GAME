"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGetPolicies = void 0;
const core_1 = require("../../../core");
const handleGetPolicies = async (admin, pkp) => {
    const registeredTools = await admin.awAdmin.getRegisteredToolsAndDelegateesForPkp(pkp.info.tokenId);
    // Display tools with policies
    if (Object.keys(registeredTools.toolsWithPolicies).length > 0) {
        core_1.logger.info('Tools with policies:');
        Object.entries(registeredTools.toolsWithPolicies).forEach(([ipfsCid, tool]) => {
            core_1.logger.log(tool.name);
            core_1.logger.log(`  IPFS CID: ${ipfsCid}`);
            if (tool.delegateePolicies &&
                Object.keys(tool.delegateePolicies).length > 0) {
                core_1.logger.log('  Policies:');
                Object.entries(tool.delegateePolicies).forEach(([delegatee, policy]) => {
                    core_1.logger.log(`    Delegatee: ${delegatee}`);
                    core_1.logger.log(`    Policy IPFS CID: ${policy.policyIpfsCid}`);
                    core_1.logger.log(`    Status: ${policy.policyEnabled ? 'Enabled' : 'Disabled'}`);
                });
            }
            else {
                core_1.logger.warn('  No policies configured');
            }
        });
    }
    // Display tools without policies
    if (Object.keys(registeredTools.toolsWithoutPolicies).length > 0) {
        core_1.logger.info('Tools without policies:');
        Object.entries(registeredTools.toolsWithoutPolicies).forEach(([ipfsCid, tool]) => {
            core_1.logger.log(`${tool.name}:`);
            core_1.logger.log(`  IPFS CID: ${ipfsCid}`);
        });
    }
    // If no tools found at all
    if (Object.keys(registeredTools.toolsWithPolicies).length === 0 &&
        Object.keys(registeredTools.toolsWithoutPolicies).length === 0) {
        core_1.logger.info('No tools or policies found for this PKP.');
    }
};
exports.handleGetPolicies = handleGetPolicies;
