"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRemoveTool = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
/**
 * Prompts the user to select a tool to remove from the list of registered tools.
 * This function filters and presents only the tools that are currently registered.
 *
 * @param registeredTools - Object containing information about registered tools
 * @returns The IPFS CID and name of the selected tool
 * @throws LawCliError - If no registered tools are found or the user cancels the selection
 */
const promptSelectToolToRemove = async (registeredTools) => {
    // Combine tools with and without policies
    const allTools = {
        ...registeredTools.toolsWithPolicies,
        ...registeredTools.toolsWithoutPolicies,
    };
    if (Object.keys(allTools).length === 0) {
        throw new core_1.LawCliError(core_1.RemoveToolErrors.NO_PERMITTED_TOOLS, 'No registered tools found to remove.');
    }
    const { tool } = await (0, prompts_1.default)({
        type: 'select',
        name: 'tool',
        message: 'Select a tool to remove:',
        choices: Object.entries(allTools).map(([ipfsCid, tool]) => ({
            title: tool.name,
            description: tool.description,
            value: { ipfsCid, name: tool.name },
        })),
    });
    if (!tool) {
        throw new core_1.LawCliError(core_1.RemoveToolErrors.REMOVE_TOOL_CANCELLED, 'Tool removal cancelled.');
    }
    return tool;
};
const promptConfirmRemoval = async (toolName) => {
    const { confirmed } = await (0, prompts_1.default)({
        type: 'confirm',
        name: 'confirmed',
        message: `Are you sure you want to remove tool "${toolName}"?`,
        initial: false,
    });
    if (!confirmed) {
        throw new core_1.LawCliError(core_1.RemoveToolErrors.REMOVE_TOOL_CANCELLED, 'Tool removal cancelled.');
    }
    return confirmed;
};
const handleRemoveTool = async (admin, pkp) => {
    try {
        const registeredTools = await admin.awAdmin.getRegisteredToolsAndDelegateesForPkp(pkp.info.tokenId);
        const selectedTool = await promptSelectToolToRemove(registeredTools);
        await promptConfirmRemoval(selectedTool.name);
        await admin.awAdmin.removeTool(pkp.info.tokenId, selectedTool.ipfsCid);
        core_1.logger.success(`Tool ${selectedTool.name} removed successfully.`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.RemoveToolErrors.REMOVE_TOOL_CANCELLED ||
                error.type === core_1.RemoveToolErrors.NO_PERMITTED_TOOLS) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleRemoveTool = handleRemoveTool;
