"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLitNetwork = exports.promptSelectLitNetwork = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const _1 = require(".");
/**
 * Prompts the user to select a Lit network from a predefined list of options.
 * The user is presented with a menu of Lit networks, including development, test, and production environments.
 * If no network is selected, the function logs an error message and exits the process.
 *
 * @returns A promise that resolves to the selected `LitNetwork` value.
 * @throws If no network is selected, the function logs an error and exits the process with a status code of 1.
 */
const promptSelectLitNetwork = async () => {
    // Prompt the user to select a Lit network.
    const { network } = await (0, prompts_1.default)({
        type: 'select', // Use a select input type for the menu.
        name: 'network', // The name of the selected network.
        message: 'Select a Lit network:', // The message displayed to the user.
        choices: [
            {
                title: 'Datil Dev',
                description: 'Development network',
                value: 'datil-dev',
            },
            {
                title: 'Datil Test',
                description: 'Pre-production test network',
                value: 'datil-test',
            },
            {
                title: 'Datil',
                description: 'Production network',
                value: 'datil',
            },
        ],
    });
    // If no network is selected, log an error and exit the process.
    if (!network) {
        throw new _1.LawCliError(_1.GetLitNetworkErrors.NO_LIT_NETWORK_SELECTED, 'No Lit network selected. Please select a network to continue.');
    }
    // Return the selected network.
    return network;
};
exports.promptSelectLitNetwork = promptSelectLitNetwork;
const getLitNetwork = async (localStorage) => {
    try {
        const litNetwork = localStorage.getItem(_1.StorageKeys.LIT_NETWORK);
        if (litNetwork) {
            return litNetwork;
        }
        const selectedLitNetwork = await (0, exports.promptSelectLitNetwork)();
        localStorage.setItem(_1.StorageKeys.LIT_NETWORK, selectedLitNetwork);
        return selectedLitNetwork;
    }
    catch (error) {
        if (error instanceof _1.LawCliError) {
            if (error.type === _1.GetLitNetworkErrors.NO_LIT_NETWORK_SELECTED) {
                _1.logger.error(error.message);
                return await (0, exports.getLitNetwork)(localStorage);
            }
        }
        throw error;
    }
};
exports.getLitNetwork = getLitNetwork;
