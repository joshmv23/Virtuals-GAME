"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGetIntentMatcher = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const agent_wallet_1 = require("@lit-protocol/agent-wallet");
const core_1 = require("../../core");
const promptGetOpenAiApiKey = async () => {
    const { apiKey } = await (0, prompts_1.default)({
        type: 'password',
        name: 'apiKey',
        message: 'Enter your OpenAI API key:',
    });
    if (!apiKey) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.GET_INTENT_MATCHER_CANCELLED, 'OpenAI API key input cancelled');
    }
    return apiKey;
};
const handleGetIntentMatcher = async (delegatee) => {
    const { foundCredentials, missingCredentials } = await delegatee.awDelegatee.getCredentials(agent_wallet_1.OpenAiIntentMatcher.requiredCredentialNames);
    // TODO This shouldn't assume that the OpenAI API key is the only credential
    if (missingCredentials.length > 0) {
        const apiKey = await promptGetOpenAiApiKey();
        await delegatee.awDelegatee.setCredentials({
            openAiApiKey: apiKey,
        });
        return new agent_wallet_1.OpenAiIntentMatcher(apiKey);
    }
    return new agent_wallet_1.OpenAiIntentMatcher(foundCredentials.openAiApiKey);
};
exports.handleGetIntentMatcher = handleGetIntentMatcher;
