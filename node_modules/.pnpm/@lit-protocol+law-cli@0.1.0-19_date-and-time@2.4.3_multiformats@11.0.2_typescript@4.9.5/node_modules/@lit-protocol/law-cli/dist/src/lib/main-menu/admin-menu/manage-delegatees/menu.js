"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleManageDelegateesMenu = exports.ManageDelegateesMenuChoice = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
var ManageDelegateesMenuChoice;
(function (ManageDelegateesMenuChoice) {
    ManageDelegateesMenuChoice["GetDelegatees"] = "getDelegatees";
    ManageDelegateesMenuChoice["IsDelegatee"] = "isDelegatee";
    ManageDelegateesMenuChoice["AddDelegatee"] = "addDelegatee";
    ManageDelegateesMenuChoice["RemoveDelegatee"] = "removeDelegatee";
    ManageDelegateesMenuChoice["PermitTool"] = "permitTool";
    ManageDelegateesMenuChoice["UnpermitTool"] = "unpermitTool";
    ManageDelegateesMenuChoice["Back"] = "back";
})(ManageDelegateesMenuChoice || (exports.ManageDelegateesMenuChoice = ManageDelegateesMenuChoice = {}));
const promptManageDelegateesMenu = async () => {
    const { action } = await (0, prompts_1.default)({
        type: 'select',
        name: 'action',
        message: 'Select a delegatee management action:',
        choices: [
            {
                title: 'Get Delegatees',
                value: ManageDelegateesMenuChoice.GetDelegatees,
            },
            {
                title: 'Check if Address is Delegatee',
                value: ManageDelegateesMenuChoice.IsDelegatee,
            },
            {
                title: 'Add Delegatee',
                value: ManageDelegateesMenuChoice.AddDelegatee,
            },
            {
                title: 'Remove Delegatee',
                value: ManageDelegateesMenuChoice.RemoveDelegatee,
            },
            {
                title: 'Permit Tool for Delegatee',
                value: ManageDelegateesMenuChoice.PermitTool,
            },
            {
                title: 'Unpermit Tool for Delegatee',
                value: ManageDelegateesMenuChoice.UnpermitTool,
            },
            {
                title: 'Back',
                value: ManageDelegateesMenuChoice.Back,
            },
        ],
    });
    if (!action) {
        throw new core_1.LawCliError(core_1.ManageDelegateesMenuErrors.NO_MANAGE_DELEGATEES_ACTION_SELECTED, 'No delegatee management action selected.');
    }
    return action;
};
const handleManageDelegateesMenu = async (admin) => {
    try {
        return promptManageDelegateesMenu();
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.GeneralErrors.NO_ACTION_SELECTED) {
                core_1.logger.error(error.message);
                return await (0, exports.handleManageDelegateesMenu)(admin);
            }
        }
        throw error;
    }
};
exports.handleManageDelegateesMenu = handleManageDelegateesMenu;
