"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGetTools = void 0;
const core_1 = require("../../../core");
const handleGetTools = async (admin, pkp) => {
    const registeredTools = await admin.awAdmin.getRegisteredToolsAndDelegateesForPkp(pkp.info.tokenId);
    // Display tools with policies
    if (Object.keys(registeredTools.toolsWithPolicies).length > 0) {
        core_1.logger.info('Tools with policies:');
        Object.entries(registeredTools.toolsWithPolicies).forEach(([ipfsCid, tool]) => {
            core_1.logger.log(tool.name);
            core_1.logger.log(`  IPFS CID: ${ipfsCid}`);
            core_1.logger.log(`  Description: ${tool.description}`);
            core_1.logger.log(`  Status: ${tool.toolEnabled ? 'Enabled' : 'Disabled'}`);
            core_1.logger.log(`  Network: ${tool.network}`);
            if (tool.delegatees.length > 0) {
                core_1.logger.log('  Delegatees:');
                tool.delegatees.forEach((delegatee) => {
                    core_1.logger.log(`    - ${delegatee}`);
                });
            }
        });
    }
    // Display tools without policies
    if (Object.keys(registeredTools.toolsWithoutPolicies).length > 0) {
        core_1.logger.info('Tools without policies:');
        Object.entries(registeredTools.toolsWithoutPolicies).forEach(([ipfsCid, tool]) => {
            core_1.logger.log(tool.name);
            core_1.logger.log(`  IPFS CID: ${ipfsCid}`);
            core_1.logger.log(`  Description: ${tool.description}`);
            core_1.logger.log(`  Status: ${tool.toolEnabled ? 'Enabled' : 'Disabled'}`);
            core_1.logger.log(`  Network: ${tool.network}`);
            if (tool.delegatees.length > 0) {
                core_1.logger.info('  Delegatees:');
                tool.delegatees.forEach((delegatee) => {
                    core_1.logger.info(`    - ${delegatee}`);
                });
            }
        });
    }
    // Display unknown tools with policies
    if (Object.keys(registeredTools.toolsUnknownWithPolicies).length > 0) {
        core_1.logger.info('Unknown tools with policies:');
        Object.entries(registeredTools.toolsUnknownWithPolicies).forEach(([ipfsCid, tool]) => {
            core_1.logger.log(`IPFS CID: ${ipfsCid}`);
            if (tool.delegatees.length > 0) {
                core_1.logger.log('  Delegatees:');
                tool.delegatees.forEach((delegatee) => {
                    core_1.logger.info(`    - ${delegatee}`);
                });
            }
        });
    }
    // Display unknown tools without policies
    if (registeredTools.toolsUnknownWithoutPolicies.length > 0) {
        core_1.logger.info('Unknown tools without policies:');
        registeredTools.toolsUnknownWithoutPolicies.forEach((ipfsCid) => {
            core_1.logger.log(`  - ${ipfsCid}`);
        });
    }
    // If no tools found at all
    if (Object.keys(registeredTools.toolsWithPolicies).length === 0 &&
        Object.keys(registeredTools.toolsWithoutPolicies).length === 0 &&
        Object.keys(registeredTools.toolsUnknownWithPolicies).length === 0 &&
        registeredTools.toolsUnknownWithoutPolicies.length === 0) {
        core_1.logger.info('No tools found for this PKP.');
    }
};
exports.handleGetTools = handleGetTools;
