"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleUnpermitToolForDelegatee = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
const promptSelectDelegateeToUnpermitToolFor = async (delegatees) => {
    if (delegatees.length === 0) {
        throw new core_1.LawCliError(core_1.UnpermitToolForDelegateeErrors.NO_PERMITTED_TOOLS, 'No delegatees found for PKP.');
    }
    const { delegatee } = await (0, prompts_1.default)({
        type: 'select',
        name: 'delegatee',
        message: 'Select a delegatee to unpermit tool for:',
        choices: delegatees.map((delegatee) => ({
            title: delegatee,
            value: delegatee,
        })),
    });
    if (!delegatee) {
        throw new core_1.LawCliError(core_1.UnpermitToolForDelegateeErrors.UNPERMIT_TOOL_FOR_DELEGATEE_CANCELLED, 'Unpermit tool for delegatee cancelled.');
    }
    return delegatee;
};
const promptSelectToolToUnpermit = async (registeredTools, permittedTools) => {
    // Filter to only include tools that are permitted for the delegatee
    const permittedToolIpfsCids = new Set(permittedTools.map((tool) => tool.toolIpfsCid));
    const filteredToolsWithPolicies = Object.fromEntries(Object.entries(registeredTools.toolsWithPolicies).filter(([toolIpfsCid]) => permittedToolIpfsCids.has(toolIpfsCid)));
    const filteredToolsWithoutPolicies = Object.fromEntries(Object.entries(registeredTools.toolsWithoutPolicies).filter(([toolIpfsCid]) => permittedToolIpfsCids.has(toolIpfsCid)));
    const filteredToolsUnknownWithPolicies = Object.fromEntries(Object.entries(registeredTools.toolsUnknownWithPolicies).filter(([toolIpfsCid]) => permittedToolIpfsCids.has(toolIpfsCid)));
    // Update registeredTools with the filtered results
    registeredTools.toolsWithPolicies = filteredToolsWithPolicies;
    registeredTools.toolsWithoutPolicies = filteredToolsWithoutPolicies;
    registeredTools.toolsUnknownWithPolicies = filteredToolsUnknownWithPolicies;
    if (registeredTools === null ||
        (Object.keys(registeredTools.toolsWithPolicies).length === 0 &&
            Object.keys(registeredTools.toolsWithoutPolicies).length === 0 &&
            Object.keys(registeredTools.toolsUnknownWithPolicies).length === 0)) {
        throw new core_1.LawCliError(core_1.UnpermitToolForDelegateeErrors.NO_PERMITTED_TOOLS, 'No permitted tools found for this delegatee.');
    }
    const choices = [
        ...Object.values(registeredTools.toolsWithPolicies).map((tool) => ({
            title: tool.name,
            description: tool.description,
            value: tool,
        })),
        ...Object.values(registeredTools.toolsWithoutPolicies).map((tool) => ({
            title: tool.name,
            description: tool.description,
            value: tool,
        })),
    ];
    const { tool } = await (0, prompts_1.default)({
        type: 'select',
        name: 'tool',
        message: 'Select a tool to unpermit for delegatee:',
        choices,
    });
    if (!tool) {
        throw new core_1.LawCliError(core_1.UnpermitToolForDelegateeErrors.UNPERMIT_TOOL_FOR_DELEGATEE_CANCELLED, 'Unpermit tool for delegatee cancelled.');
    }
    return tool;
};
const handleUnpermitToolForDelegatee = async (admin, pkp) => {
    try {
        const registeredTools = await admin.awAdmin.getRegisteredToolsAndDelegateesForPkp(pkp.info.tokenId);
        if (registeredTools === null ||
            (Object.keys(registeredTools.toolsWithPolicies).length === 0 &&
                Object.keys(registeredTools.toolsWithoutPolicies).length === 0 &&
                Object.keys(registeredTools.toolsUnknownWithPolicies).length === 0)) {
            throw new core_1.LawCliError(core_1.UnpermitToolForDelegateeErrors.NO_PERMITTED_TOOLS, 'No tools found.');
        }
        const delegatee = await promptSelectDelegateeToUnpermitToolFor(await admin.awAdmin.getDelegatees(pkp.info.tokenId));
        const selectedTool = await promptSelectToolToUnpermit(registeredTools, await admin.awAdmin.getPermittedToolsForDelegatee(pkp.info.tokenId, delegatee));
        await admin.awAdmin.unpermitToolForDelegatee(pkp.info.tokenId, selectedTool.ipfsCid, delegatee);
        core_1.logger.success(`${selectedTool.name} successfully unpermitted for delegatee ${delegatee}.`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.UnpermitToolForDelegateeErrors.NO_PERMITTED_TOOLS ||
                error.type ===
                    core_1.UnpermitToolForDelegateeErrors.UNPERMIT_TOOL_FOR_DELEGATEE_CANCELLED) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleUnpermitToolForDelegatee = handleUnpermitToolForDelegatee;
