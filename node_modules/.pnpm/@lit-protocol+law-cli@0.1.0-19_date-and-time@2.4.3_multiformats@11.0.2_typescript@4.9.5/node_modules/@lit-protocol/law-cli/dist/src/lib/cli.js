"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LawCli = void 0;
const constants_1 = require("@lit-protocol/constants");
const core_1 = require("./core");
const main_menu_1 = require("./main-menu");
class LawCli {
    static DEFAULT_STORAGE_PATH = './.law-cli-storage';
    localStorage;
    litNetwork;
    admin;
    delegatee;
    constructor(localStorage, litNetwork) {
        this.localStorage = localStorage;
        this.litNetwork = litNetwork;
        core_1.logger.info(`CLI storage loading from: ${LawCli.DEFAULT_STORAGE_PATH}`);
        core_1.logger.info(`Using Lit network: ${this.litNetwork}`);
        LawCli.populateDefaultRpcs(localStorage);
    }
    static initStorage() {
        return new core_1.LocalStorage(LawCli.DEFAULT_STORAGE_PATH);
    }
    static populateDefaultRpcs(localStorage) {
        // Check if RPCs already exist
        const existingRpcsString = localStorage.getItem(core_1.StorageKeys.RPCS);
        if (existingRpcsString) {
            return; // RPCs already exist, don't overwrite them
        }
        // Only populate default RPCs if none exist
        const sortedChains = Object.fromEntries(Object.entries(constants_1.LIT_CHAINS).sort(([, a], [, b]) => a.name.localeCompare(b.name)));
        localStorage.setItem(core_1.StorageKeys.RPCS, JSON.stringify(sortedChains));
    }
    static async showMainMenu(lawCli) {
        const option = await (0, main_menu_1.handleMainMenu)();
        switch (option) {
            case main_menu_1.MainMenuChoice.AdminMenu:
                await LawCli.handleAdminMenu(lawCli);
                break;
            case main_menu_1.MainMenuChoice.DelegateeMenu:
                await LawCli.handleDelegateeMenu(lawCli);
                break;
            case main_menu_1.MainMenuChoice.CliSettings:
                await LawCli.handleCliSettingsMenu(lawCli);
                break;
        }
        // If we reach this point, that means the user has exited the CLI,
        // or one of the CLI options didn't loop back to a menu.
        if (lawCli.admin !== undefined) {
            lawCli.admin.awAdmin.disconnect();
        }
        if (lawCli.delegatee !== undefined) {
            lawCli.delegatee.awDelegatee.disconnect();
        }
        process.exit(0);
    }
    static async handleSelectPkp(lawCli) {
        try {
            const pkpOrNull = await (0, main_menu_1.handleSelectPkpForAdmin)(lawCli.admin);
            if (pkpOrNull === null) {
                await LawCli.handleAdminMenu(lawCli);
            }
            return pkpOrNull;
        }
        catch (error) {
            if (error instanceof core_1.LawCliError) {
                if (error.type === core_1.AdminErrors.NO_PKPS_FOUND ||
                    error.type === core_1.AdminErrors.PKP_SELECTION_CANCELLED) {
                    await LawCli.handleAdminMenu(lawCli);
                }
            }
            throw error;
        }
    }
    static async handleSelectDelegatedPkp(lawCli) {
        try {
            const pkpOrNull = await (0, main_menu_1.handleSelectPkpForDelegatee)(lawCli.delegatee);
            if (pkpOrNull === null) {
                await LawCli.handleDelegateeMenu(lawCli);
            }
            return pkpOrNull;
        }
        catch (error) {
            if (error instanceof core_1.LawCliError) {
                if (error.type === core_1.DelegateeErrors.DELEGATEE_SELECTION_CANCELLED ||
                    error.type === core_1.DelegateeErrors.NO_DELEGATED_PKPS) {
                    await LawCli.handleDelegateeMenu(lawCli);
                }
            }
            throw error;
        }
    }
    static async handleCliSettingsMenu(lawCli) {
        const cliSettingsOption = await (0, main_menu_1.handleCliSettingsMenu)();
        switch (cliSettingsOption) {
            case main_menu_1.CliSettingsMenuChoice.ChangeLitNetwork:
                await (0, main_menu_1.handleChangeLitNetwork)(lawCli.localStorage);
                // Return to the CLI settings menu after changing the Lit network
                await LawCli.handleCliSettingsMenu(lawCli);
                break;
            case main_menu_1.CliSettingsMenuChoice.ManageRpcs:
                await LawCli.handleManageRpcsMenu(lawCli);
                break;
            case main_menu_1.CliSettingsMenuChoice.Back:
                await LawCli.showMainMenu(lawCli);
                break;
        }
    }
    static async handleManageRpcsMenu(lawCli) {
        const manageRpcsOption = await (0, main_menu_1.handleManageRpcsMenu)();
        switch (manageRpcsOption) {
            case main_menu_1.ManageRpcsMenuChoice.AddRpc:
                await (0, main_menu_1.handleAddRpc)(lawCli.localStorage);
                // Return to the manage RPCs menu after
                await LawCli.handleManageRpcsMenu(lawCli);
                break;
            case main_menu_1.ManageRpcsMenuChoice.EditRpc:
                await (0, main_menu_1.handleEditRpc)(lawCli.localStorage);
                // Return to the manage RPCs menu after
                await LawCli.handleManageRpcsMenu(lawCli);
                break;
            case main_menu_1.ManageRpcsMenuChoice.RemoveRpc:
                await (0, main_menu_1.handleRemoveRpc)(lawCli.localStorage);
                // Return to the manage RPCs menu after
                await LawCli.handleManageRpcsMenu(lawCli);
                break;
            case main_menu_1.ManageRpcsMenuChoice.Back:
                await LawCli.handleCliSettingsMenu(lawCli);
                break;
        }
    }
    static async handleAdminMenu(lawCli, pkp) {
        // TODO I don't think this is needed since options other than AdminSettings
        // are not available if an Admin is not configured.
        // If an instance of Admin is not provided, prompt the user to configure an Admin signer
        // if (admin === undefined) {
        //   const adminPrivateKey = lawCli.localStorage.getItem(
        //     StorageKeys.ADMIN_PRIVATE_KEY
        //   );
        //   if (adminPrivateKey) {
        //     admin = await Admin.create(lawCli.litNetwork, adminPrivateKey);
        //   }
        // }
        const option = await (0, main_menu_1.handleAdminMenu)(lawCli.admin, pkp);
        switch (option) {
            case main_menu_1.AdminMenuChoice.AdminSettings:
                await LawCli.handleAdminSettingsMenu(lawCli);
                break;
            case main_menu_1.AdminMenuChoice.SelectPkp: {
                const selectedPkp = await LawCli.handleSelectPkp(lawCli);
                await LawCli.handleAdminMenu(lawCli, selectedPkp);
                break;
            }
            case main_menu_1.AdminMenuChoice.ManageTools:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectPkp(lawCli);
                }
                await LawCli.handleManageToolsMenu(lawCli, pkp);
                break;
            case main_menu_1.AdminMenuChoice.ManagePolicies:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectPkp(lawCli);
                }
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.AdminMenuChoice.ManageDelegatees:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectPkp(lawCli);
                }
                await LawCli.handleManageDelegateesMenu(lawCli, pkp);
                break;
            case main_menu_1.AdminMenuChoice.Back:
                await LawCli.showMainMenu(lawCli);
                break;
        }
    }
    static async handleAdminSettingsMenu(lawCli) {
        const option = await (0, main_menu_1.handleAdminSettingsMenu)();
        switch (option) {
            case main_menu_1.AdminSettingsMenuChoice.ConfigureSigner: {
                await LawCli.handleAdminConfigureSignerMenu(lawCli);
                break;
            }
            case main_menu_1.AdminSettingsMenuChoice.Back:
                await LawCli.handleAdminMenu(lawCli);
                break;
        }
    }
    static async handleAdminConfigureSignerMenu(lawCli) {
        const signerOption = await (0, main_menu_1.handleConfigureAdminSignerMenu)();
        switch (signerOption) {
            case main_menu_1.AdminConfigureSignerMenuChoice.UseEoa: {
                lawCli.admin = await (0, main_menu_1.handleUseEoaForAdmin)(lawCli.localStorage);
                await LawCli.handleAdminMenu(lawCli);
                break;
            }
            case main_menu_1.AdminConfigureSignerMenuChoice.UseMultiSig:
                break;
            case main_menu_1.AdminConfigureSignerMenuChoice.UsePkp:
                break;
            case main_menu_1.AdminConfigureSignerMenuChoice.Back:
                await LawCli.handleAdminSettingsMenu(lawCli);
                break;
        }
    }
    static async handleManageToolsMenu(lawCli, pkp) {
        const option = await (0, main_menu_1.handleManageToolsMenu)();
        switch (option) {
            case main_menu_1.ManageToolsMenuChoice.GetRegisteredTools:
                await (0, main_menu_1.handleGetTools)(lawCli.admin, pkp);
                await LawCli.handleManageToolsMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageToolsMenuChoice.PermitTool:
                await (0, main_menu_1.handlePermitTool)(lawCli.admin, pkp);
                await LawCli.handleManageToolsMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageToolsMenuChoice.RemoveTool:
                await (0, main_menu_1.handleRemoveTool)(lawCli.admin, pkp);
                await LawCli.handleManageToolsMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageToolsMenuChoice.EnableTool:
                await (0, main_menu_1.handleEnableTool)(lawCli.admin, pkp);
                await LawCli.handleManageToolsMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageToolsMenuChoice.DisableTool:
                await (0, main_menu_1.handleDisableTool)(lawCli.admin, pkp);
                await LawCli.handleManageToolsMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageToolsMenuChoice.Back:
                await LawCli.handleAdminMenu(lawCli);
                break;
        }
    }
    static async handleManagePoliciesMenu(lawCli, pkp) {
        const option = await (0, main_menu_1.handleManagePoliciesMenu)();
        switch (option) {
            case main_menu_1.ManagePoliciesMenuChoice.GetAllPolicies:
                await (0, main_menu_1.handleGetPolicies)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.GetToolPolicy:
                await (0, main_menu_1.handleGetToolPolicy)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.SetPolicy:
                await (0, main_menu_1.handleSetPolicy)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.RemovePolicy:
                await (0, main_menu_1.handleRemovePolicy)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.EnablePolicy:
                await (0, main_menu_1.handleEnablePolicy)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.DisablePolicy:
                await (0, main_menu_1.handleDisablePolicy)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.GetPolicyParameter:
                await (0, main_menu_1.handleGetToolPolicyParameter)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.SetPolicyParameter:
                await (0, main_menu_1.handleSetToolPolicyParameter)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.RemovePolicyParameter:
                await (0, main_menu_1.handleRemoveToolPolicyParameter)(lawCli.admin, pkp);
                await LawCli.handleManagePoliciesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManagePoliciesMenuChoice.Back:
                await LawCli.handleAdminMenu(lawCli);
                break;
        }
    }
    static async handleManageDelegateesMenu(lawCli, pkp) {
        const option = await (0, main_menu_1.handleManageDelegateesMenu)();
        switch (option) {
            case main_menu_1.ManageDelegateesMenuChoice.GetDelegatees:
                await (0, main_menu_1.handleGetDelegatees)(lawCli.admin, pkp);
                await LawCli.handleManageDelegateesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageDelegateesMenuChoice.IsDelegatee:
                await (0, main_menu_1.handleIsDelegatee)(lawCli.admin, pkp);
                await LawCli.handleManageDelegateesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageDelegateesMenuChoice.AddDelegatee:
                await (0, main_menu_1.handleAddDelegatee)(lawCli.admin, pkp);
                await LawCli.handleManageDelegateesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageDelegateesMenuChoice.RemoveDelegatee:
                await (0, main_menu_1.handleRemoveDelegatee)(lawCli.admin, pkp);
                await LawCli.handleManageDelegateesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageDelegateesMenuChoice.PermitTool:
                await (0, main_menu_1.handlePermitToolForDelegatee)(lawCli.admin, pkp);
                await LawCli.handleManageDelegateesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageDelegateesMenuChoice.UnpermitTool:
                await (0, main_menu_1.handleUnpermitToolForDelegatee)(lawCli.admin, pkp);
                await LawCli.handleManageDelegateesMenu(lawCli, pkp);
                break;
            case main_menu_1.ManageDelegateesMenuChoice.Back:
                await LawCli.handleAdminMenu(lawCli);
                break;
        }
    }
    static async handleDelegateeMenu(lawCli, pkp) {
        const option = await (0, main_menu_1.handleDelegateeMenu)(lawCli.delegatee, pkp);
        switch (option) {
            case main_menu_1.DelegateeMenuChoice.DelegateeSettings:
                await LawCli.handleDelegateeSettingsMenu(lawCli);
                break;
            case main_menu_1.DelegateeMenuChoice.SelectPkp: {
                const selectedPkp = await LawCli.handleSelectDelegatedPkp(lawCli);
                await LawCli.handleDelegateeMenu(lawCli, selectedPkp);
                break;
            }
            case main_menu_1.DelegateeMenuChoice.GetDelegatedPkps:
                await (0, main_menu_1.handleGetDelegatedPkps)(lawCli.delegatee);
                await LawCli.handleDelegateeMenu(lawCli, pkp);
                break;
            case main_menu_1.DelegateeMenuChoice.GetRegisteredTools:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectDelegatedPkp(lawCli);
                }
                await (0, main_menu_1.handleGetRegisteredTools)(lawCli.delegatee, pkp);
                await LawCli.handleDelegateeMenu(lawCli, pkp);
                break;
            case main_menu_1.DelegateeMenuChoice.GetToolPolicy:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectDelegatedPkp(lawCli);
                }
                await (0, main_menu_1.handleGetToolPolicyForDelegatee)(lawCli.delegatee, pkp);
                await LawCli.handleDelegateeMenu(lawCli, pkp);
                break;
            case main_menu_1.DelegateeMenuChoice.GetToolViaIntent:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectDelegatedPkp(lawCli);
                }
                if (lawCli.delegatee.intentMatcher === null) {
                    const intentMatcher = await (0, main_menu_1.handleGetIntentMatcher)(lawCli.delegatee);
                    lawCli.delegatee.setIntentMatcher(intentMatcher);
                }
                await (0, main_menu_1.handleGetToolViaIntent)(lawCli.delegatee, pkp);
                await LawCli.handleDelegateeMenu(lawCli, pkp);
                break;
            case main_menu_1.DelegateeMenuChoice.ExecuteToolViaIntent:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectDelegatedPkp(lawCli);
                }
                if (lawCli.delegatee.intentMatcher === null) {
                    const intentMatcher = await (0, main_menu_1.handleGetIntentMatcher)(lawCli.delegatee);
                    lawCli.delegatee.setIntentMatcher(intentMatcher);
                }
                await (0, main_menu_1.handleExecuteToolViaIntent)(lawCli.localStorage, lawCli.delegatee, pkp);
                await LawCli.handleDelegateeMenu(lawCli, pkp);
                break;
            case main_menu_1.DelegateeMenuChoice.ExecuteTool:
                if (pkp === undefined) {
                    pkp = await LawCli.handleSelectDelegatedPkp(lawCli);
                }
                await (0, main_menu_1.handleExecuteTool)(lawCli.localStorage, lawCli.delegatee, pkp);
                await LawCli.handleDelegateeMenu(lawCli, pkp);
                break;
            case main_menu_1.DelegateeMenuChoice.Back:
                await LawCli.showMainMenu(lawCli);
                break;
        }
    }
    static async handleDelegateeSettingsMenu(lawCli) {
        const option = await (0, main_menu_1.handleDelegateeSettingsMenu)();
        switch (option) {
            case main_menu_1.DelegateeSettingsMenuChoice.ConfigureSigner:
                await LawCli.handleConfigureDelegateeSignerMenu(lawCli);
                break;
            case main_menu_1.DelegateeSettingsMenuChoice.Back:
                await LawCli.handleDelegateeMenu(lawCli);
                break;
        }
    }
    static async handleConfigureDelegateeSignerMenu(lawCli) {
        const signerOption = await (0, main_menu_1.handleConfigureDelegateeSignerMenu)();
        switch (signerOption) {
            case main_menu_1.DelegateeConfigureSignerMenuChoice.UseEoa:
                lawCli.delegatee = await (0, main_menu_1.handleUseEoaForDelegatee)(lawCli.localStorage);
                await LawCli.handleDelegateeMenu(lawCli);
                break;
            case main_menu_1.DelegateeConfigureSignerMenuChoice.UsePkp:
                break;
            case main_menu_1.DelegateeConfigureSignerMenuChoice.Back:
                await LawCli.handleDelegateeSettingsMenu(lawCli);
                break;
        }
    }
    static async start() {
        const localStorage = LawCli.initStorage();
        const litNetwork = await (0, core_1.getLitNetwork)(localStorage);
        const lawCli = new LawCli(localStorage, litNetwork);
        await LawCli.showMainMenu(lawCli);
    }
}
exports.LawCli = LawCli;
