"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRemoveRpc = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
const promptSelectChain = async (existingRpcs) => {
    const { chainKey } = await (0, prompts_1.default)({
        type: 'autocomplete',
        name: 'chainKey',
        message: 'Select a chain to remove (start typing to filter):',
        choices: Object.entries(existingRpcs)
            .map(([key, chain]) => ({
            title: (chain.name || '')
                .trim()
                .replace(/\s+/g, ' '),
            value: key,
        }))
            .sort((a, b) => a.title.localeCompare(b.title)),
        suggest: async (input, choices) => {
            const inputLower = input.toLowerCase();
            return choices.filter((choice) => choice.title.toLowerCase().includes(inputLower));
        },
    });
    if (!chainKey) {
        throw new core_1.LawCliError(core_1.RemoveRpcErrors.REMOVE_RPC_CANCELLED, 'No chain selected. Operation cancelled.');
    }
    return chainKey;
};
const promptConfirmRemoval = async (chainName) => {
    const { confirmed } = await (0, prompts_1.default)({
        type: 'confirm',
        name: 'confirmed',
        message: `Are you sure you want to remove chain "${chainName}"?`,
        initial: false,
    });
    if (!confirmed) {
        throw new core_1.LawCliError(core_1.RemoveRpcErrors.REMOVE_RPC_CANCELLED, 'Chain removal cancelled.');
    }
    return confirmed;
};
const handleRemoveRpc = async (localStorage) => {
    try {
        const existingRpcsString = localStorage.getItem(core_1.StorageKeys.RPCS);
        const existingRpcs = existingRpcsString
            ? JSON.parse(existingRpcsString)
            : {};
        if (Object.keys(existingRpcs).length === 0) {
            throw new core_1.LawCliError(core_1.RemoveRpcErrors.NO_RPCS_FOUND, 'No RPCs found to remove.');
        }
        // Select chain to remove
        const chainKey = await promptSelectChain(existingRpcs);
        const selectedChain = existingRpcs[chainKey];
        const chainName = selectedChain.name;
        // Confirm removal
        await promptConfirmRemoval(chainName);
        // Remove the chain
        delete existingRpcs[chainKey];
        // Save updated chains
        localStorage.setItem(core_1.StorageKeys.RPCS, JSON.stringify(existingRpcs));
        core_1.logger.success(`Removed chain: ${chainName}`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.RemoveRpcErrors.REMOVE_RPC_CANCELLED) {
                core_1.logger.error(error.message);
                return;
            }
            if (error.type === core_1.RemoveRpcErrors.NO_RPCS_FOUND) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleRemoveRpc = handleRemoveRpc;
