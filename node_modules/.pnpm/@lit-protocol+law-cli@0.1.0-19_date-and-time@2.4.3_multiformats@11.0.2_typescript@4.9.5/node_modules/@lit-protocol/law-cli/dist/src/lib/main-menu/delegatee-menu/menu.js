"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleDelegateeMenu = exports.DelegateeMenuChoice = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
var DelegateeMenuChoice;
(function (DelegateeMenuChoice) {
    DelegateeMenuChoice["DelegateeSettings"] = "delegateeSettings";
    DelegateeMenuChoice["SelectPkp"] = "selectPkp";
    DelegateeMenuChoice["GetDelegatedPkps"] = "getDelegatedPkps";
    DelegateeMenuChoice["GetRegisteredTools"] = "getRegisteredTools";
    DelegateeMenuChoice["GetToolPolicy"] = "getToolPolicy";
    DelegateeMenuChoice["GetToolViaIntent"] = "getToolViaIntent";
    DelegateeMenuChoice["ExecuteToolViaIntent"] = "executeToolViaIntent";
    DelegateeMenuChoice["ExecuteTool"] = "executeTool";
    DelegateeMenuChoice["Back"] = "back";
})(DelegateeMenuChoice || (exports.DelegateeMenuChoice = DelegateeMenuChoice = {}));
const promptDelegateeMenu = async (delegatee, delegatedPkp) => {
    const disableManageOptions = !delegatee;
    if (disableManageOptions) {
        core_1.logger.warn('Delegatee role not initialized. Please configure the delegatee role before executing tools.');
    }
    const { action } = await (0, prompts_1.default)({
        type: 'select',
        name: 'action',
        message: 'What would you like to do?',
        choices: [
            {
                title: 'Delegatee Settings',
                value: DelegateeMenuChoice.DelegateeSettings,
            },
            {
                title: 'Select Agent Wallet to Use',
                description: delegatedPkp
                    ? `Currently using: ${delegatedPkp.ethAddress}`
                    : 'No Agent Wallet selected',
                value: DelegateeMenuChoice.SelectPkp,
                disabled: disableManageOptions,
            },
            {
                title: 'Get Delegated Agent Wallets',
                value: DelegateeMenuChoice.GetDelegatedPkps,
                disabled: disableManageOptions,
            },
            {
                title: 'Get Registered Tools for Agent Wallet',
                value: DelegateeMenuChoice.GetRegisteredTools,
                disabled: disableManageOptions,
            },
            {
                title: 'Get Tool Policy for Agent Wallet',
                value: DelegateeMenuChoice.GetToolPolicy,
                disabled: disableManageOptions,
            },
            {
                title: 'Get Tool via Intent for Agent Wallet',
                value: DelegateeMenuChoice.GetToolViaIntent,
                disabled: disableManageOptions,
            },
            {
                title: 'Execute Tool via Intent Using Agent Wallet',
                value: DelegateeMenuChoice.ExecuteToolViaIntent,
                disabled: disableManageOptions,
            },
            {
                title: 'Execute Tool Using Agent Wallet',
                value: DelegateeMenuChoice.ExecuteTool,
                disabled: disableManageOptions,
            },
            { title: 'Back', value: DelegateeMenuChoice.Back },
        ],
    });
    if (!action) {
        throw new core_1.LawCliError(core_1.GeneralErrors.NO_ACTION_SELECTED, 'No admin menu action selected. Please select an action to continue.');
    }
    return action;
};
const handleDelegateeMenu = async (delegatee, delegatedPkp) => {
    try {
        return promptDelegateeMenu(delegatee, delegatedPkp);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.GeneralErrors.NO_ACTION_SELECTED) {
                core_1.logger.error(error.message);
                return await (0, exports.handleDelegateeMenu)(delegatee);
            }
        }
        throw error;
    }
};
exports.handleDelegateeMenu = handleDelegateeMenu;
