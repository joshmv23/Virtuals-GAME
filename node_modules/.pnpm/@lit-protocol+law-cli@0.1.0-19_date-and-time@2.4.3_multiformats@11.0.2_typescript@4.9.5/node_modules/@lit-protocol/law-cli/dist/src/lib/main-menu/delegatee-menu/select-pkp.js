"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleSelectPkpForDelegatee = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
const promptSelectDelegatedPkp = async (delegatee) => {
    const pkps = await delegatee.awDelegatee.getDelegatedPkps();
    if (pkps.length === 0) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.NO_DELEGATED_PKPS, 'No delegated Agent Wallets found.');
    }
    const choices = [
        ...pkps.map((pkp, i) => ({
            title: pkp.ethAddress,
            description: `Token ID: ${pkp.tokenId}`,
            value: pkp,
        })),
        {
            title: 'Back',
            value: null,
        },
    ];
    const { selection } = await (0, prompts_1.default)({
        type: 'select',
        name: 'selection',
        message: 'Select a delegated Agent Wallet to use:',
        choices,
    });
    if (!selection) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.DELEGATEE_SELECTION_CANCELLED, 'Agent Wallet selection cancelled.');
    }
    return selection;
};
const handleSelectPkpForDelegatee = async (delegatee) => {
    try {
        const selection = await promptSelectDelegatedPkp(delegatee);
        return selection;
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.DelegateeErrors.DELEGATEE_SELECTION_CANCELLED ||
                error.type === core_1.DelegateeErrors.NO_DELEGATED_PKPS) {
                core_1.logger.error(error.message);
                return null;
            }
        }
        throw error;
    }
};
exports.handleSelectPkpForDelegatee = handleSelectPkpForDelegatee;
