#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.originalConsole = void 0;
// Suppress deprecation warnings
process.env.NO_DEPRECATION = '*';
// Apply console patches before any other imports
// Save original references
const originalLog = console.log;
const originalWarn = console.warn;
const originalError = console.error;
// A helper that decides whether to suppress a particular message
function shouldSuppress(...args) {
    const message = args.join(' ');
    // Add patterns to silence
    const suppressPatterns = [
        // Lit SDK deprecation warnings
        'lit-js-sdk:constants:errors',
        'lit-js-sdk:constants:constants',
        // Node.js deprecation warnings
        'punycode',
        '[DEP0040]',
        // Initialization messages
        'using deprecated parameters for `initSync()`',
        'Not a problem. Continue...',
    ];
    return suppressPatterns.some((pattern) => message.includes(pattern));
}
// Overwrite console methods to filter out undesired logs
console.log = (...args) => {
    if (!shouldSuppress(...args)) {
        originalLog(...args);
    }
};
console.warn = (...args) => {
    if (!shouldSuppress(...args)) {
        originalWarn(...args);
    }
};
console.error = (...args) => {
    if (!shouldSuppress(...args)) {
        originalError(...args);
    }
};
// Export original methods in case we need them
exports.originalConsole = {
    log: originalLog,
    warn: originalWarn,
    error: originalError,
};
const cli_1 = require("./lib/cli");
cli_1.LawCli.start().catch((error) => {
    console.error('There was an unhandled error with the CLI:', error);
    process.exit(1);
});
