"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Delegatee = void 0;
const agent_wallet_1 = require("@lit-protocol/agent-wallet");
const core_1 = require("../../core");
const insuffcient_balance_1 = require("./insuffcient-balance");
class Delegatee {
    awDelegatee;
    intentMatcher = null;
    /**
     * Private constructor for the Delegatee class.
     * @param awDelegatee - An instance of the `AwDelegatee` class.
     */
    constructor(awDelegatee) {
        this.awDelegatee = awDelegatee;
    }
    /**
     * Creates an instance of the `AwDelegatee` class.
     * Handles errors related to missing private keys or insufficient balances by prompting the user for input.
     *
     * @param litNetwork - The Lit network to use for the Delegatee role.
     * @param privateKey - Optional. The private key for the Delegatee role.
     * @returns A promise that resolves to an instance of the `AwDelegatee` class.
     * @throws If initialization fails, the function logs an error and exits the process.
     */
    static async createAwDelegatee(litNetwork, privateKey) {
        let awDelegatee;
        try {
            // Attempt to create the AwDelegatee instance.
            awDelegatee = await agent_wallet_1.Delegatee.create(privateKey, { litNetwork });
        }
        catch (error) {
            // Handle specific errors related to missing private keys or insufficient balances.
            if (error instanceof agent_wallet_1.AwSignerError) {
                // TODO: This shouldn't happen as handleUseEoa should ensure a private key is provided
                // if (error.type === AwSignerErrorType.DELEGATEE_MISSING_PRIVATE_KEY) {
                // Prompt the user for a private key if it is missing.
                //   const privateKey = await promptDelegateeInit();
                //   return Delegatee.createAwDelegatee(litNetwork, privateKey);
                // }
                if (error.type ===
                    agent_wallet_1.AwSignerErrorType.INSUFFICIENT_BALANCE_CAPACITY_CREDIT_MINT) {
                    // Prompt the user to fund the account if the balance is insufficient.
                    const hasFunded = await (0, insuffcient_balance_1.promptDelegateeInsufficientBalance)();
                    if (hasFunded) {
                        return Delegatee.createAwDelegatee(litNetwork, privateKey);
                    }
                }
            }
            // Log any other errors and exit the process.
            core_1.logger.error('Failed to initialize Delegatee role', error);
            throw error;
        }
        return awDelegatee;
    }
    static async create(litNetwork, privateKey, intentMatcher) {
        const awDelegatee = await Delegatee.createAwDelegatee(litNetwork, privateKey);
        const delegatee = new Delegatee(awDelegatee);
        delegatee.intentMatcher = intentMatcher ?? null;
        return delegatee;
    }
    setIntentMatcher(intentMatcher) {
        this.intentMatcher = intentMatcher;
    }
    disconnect() {
        this.awDelegatee.disconnect();
    }
}
exports.Delegatee = Delegatee;
