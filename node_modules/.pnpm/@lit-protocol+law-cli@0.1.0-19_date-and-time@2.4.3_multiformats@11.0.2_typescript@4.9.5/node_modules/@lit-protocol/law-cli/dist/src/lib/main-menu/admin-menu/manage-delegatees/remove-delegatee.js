"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRemoveDelegatee = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
const promptSelectDelegateeToRemove = async (delegatees) => {
    if (delegatees.length === 0) {
        throw new core_1.LawCliError(core_1.RemoveDelegateeErrors.NO_DELEGATEES_FOUND, 'No delegatees found to remove.');
    }
    const { delegatee } = await (0, prompts_1.default)({
        type: 'select',
        name: 'delegatee',
        message: 'Select a delegatee to remove:',
        choices: delegatees.map((address) => ({
            title: address,
            value: address,
        })),
    });
    if (!delegatee) {
        throw new core_1.LawCliError(core_1.RemoveDelegateeErrors.REMOVE_DELEGATEE_CANCELLED, 'Delegatee removal cancelled.');
    }
    return delegatee;
};
const handleRemoveDelegatee = async (admin, pkp) => {
    try {
        const delegatees = await admin.awAdmin.getDelegatees(pkp.info.tokenId);
        const selectedDelegatee = await promptSelectDelegateeToRemove(delegatees);
        await admin.awAdmin.removeDelegatee(pkp.info.tokenId, selectedDelegatee);
        core_1.logger.success(`Successfully removed delegatee: ${selectedDelegatee}`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.RemoveDelegateeErrors.REMOVE_DELEGATEE_CANCELLED ||
                error.type === core_1.RemoveDelegateeErrors.NO_DELEGATEES_FOUND) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleRemoveDelegatee = handleRemoveDelegatee;
