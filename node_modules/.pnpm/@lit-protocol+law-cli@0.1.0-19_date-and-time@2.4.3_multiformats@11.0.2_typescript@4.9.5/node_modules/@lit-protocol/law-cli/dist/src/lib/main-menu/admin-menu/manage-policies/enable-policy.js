"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleEnablePolicy = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
const promptSelectToolWithDisabledPolicy = async (registeredTools) => {
    // Get only tools with policies
    const toolsWithPolicies = registeredTools.toolsWithPolicies;
    // Filter for tools with disabled policies
    const toolsWithDisabledPolicies = Object.entries(toolsWithPolicies).filter(([_, tool]) => Object.values(tool.delegateePolicies).some((policy) => !policy.policyEnabled));
    if (toolsWithDisabledPolicies.length === 0) {
        throw new core_1.LawCliError(core_1.EnablePolicyErrors.NO_DISABLED_POLICIES, 'No disabled policies found.');
    }
    const { tool } = await (0, prompts_1.default)({
        type: 'select',
        name: 'tool',
        message: 'Select a tool to enable policy for:',
        choices: toolsWithDisabledPolicies.map(([ipfsCid, tool]) => ({
            title: tool.name,
            description: `${Object.values(tool.delegateePolicies).filter((policy) => !policy.policyEnabled).length} disabled policies`,
            value: {
                ipfsCid,
                name: tool.name,
                delegateePolicies: tool.delegateePolicies,
            },
        })),
    });
    if (!tool) {
        throw new core_1.LawCliError(core_1.EnablePolicyErrors.ENABLE_POLICY_CANCELLED, 'Tool selection cancelled.');
    }
    return tool;
};
const promptSelectDelegatee = async (delegateePolicies) => {
    // Filter for delegatees with disabled policies
    const disabledPolicies = Object.entries(delegateePolicies).filter(([_, policy]) => !policy.policyEnabled);
    const { delegatee } = await (0, prompts_1.default)({
        type: 'select',
        name: 'delegatee',
        message: 'Select a delegatee to enable policy for:',
        choices: disabledPolicies.map(([address, policy]) => ({
            title: address,
            description: `Policy: ${policy.policyIpfsCid}`,
            value: address,
        })),
    });
    if (!delegatee) {
        throw new core_1.LawCliError(core_1.EnablePolicyErrors.ENABLE_POLICY_CANCELLED, 'Delegatee selection cancelled.');
    }
    return delegatee;
};
const handleEnablePolicy = async (admin, pkp) => {
    try {
        const registeredTools = await admin.awAdmin.getRegisteredToolsAndDelegateesForPkp(pkp.info.tokenId);
        const selectedTool = await promptSelectToolWithDisabledPolicy(registeredTools);
        const selectedDelegatee = await promptSelectDelegatee(selectedTool.delegateePolicies);
        await admin.awAdmin.enableToolPolicyForDelegatee(pkp.info.tokenId, selectedTool.ipfsCid, selectedDelegatee);
        core_1.logger.success(`Policy enabled successfully for tool ${selectedTool.name} and delegatee ${selectedDelegatee}.`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.EnablePolicyErrors.ENABLE_POLICY_CANCELLED ||
                error.type === core_1.EnablePolicyErrors.NO_DISABLED_POLICIES) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleEnablePolicy = handleEnablePolicy;
