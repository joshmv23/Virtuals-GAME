"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGetToolViaIntent = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
/**
 * Prompts the user to enter their intent for finding a matching tool.
 */
const promptToolMatchingIntent = async () => {
    const { intent } = await (0, prompts_1.default)({
        type: 'text',
        name: 'intent',
        message: 'Enter your intent:',
    });
    if (!intent) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.GET_TOOL_VIA_INTENT_CANCELLED, 'Intent input was cancelled');
    }
    return intent;
};
/**
 * Handles the process of finding and displaying a tool that matches a user's intent.
 * This function prompts the user to enter their intent, finds a matching tool using
 * the intent matcher, and displays the results.
 */
const handleGetToolViaIntent = async (delegatee, pkp) => {
    try {
        // Prompt for the user's intent
        const intent = await promptToolMatchingIntent();
        // Find a tool matching the intent
        core_1.logger.info('Finding tool for intent...');
        const intentMatcherResponse = await delegatee.awDelegatee.getToolViaIntent(pkp.tokenId, intent, delegatee.intentMatcher);
        // Handle case where no matching tool is found
        if (intentMatcherResponse.matchedTool === null) {
            core_1.logger.error('No matching tool found.');
            core_1.logger.log(`Reasoning: ${intentMatcherResponse.analysis.reasoning}`);
            return;
        }
        // Display the matching tool information
        core_1.logger.info('Found matching tool:');
        core_1.logger.log(`  - ${intentMatcherResponse.matchedTool.name} (${intentMatcherResponse.matchedTool.ipfsCid})`);
        core_1.logger.log(`      - ${intentMatcherResponse.matchedTool.description}`);
        core_1.logger.log(`      - Reasoning: ${intentMatcherResponse.analysis.reasoning}`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.DelegateeErrors.GET_TOOL_VIA_INTENT_CANCELLED) {
                core_1.logger.error('Intent input was cancelled');
                return;
            }
            if (error.type === core_1.DelegateeErrors.NO_DELEGATED_PKPS) {
                core_1.logger.error('No PKPs are currently delegated to you.');
                return;
            }
        }
        throw error;
    }
};
exports.handleGetToolViaIntent = handleGetToolViaIntent;
