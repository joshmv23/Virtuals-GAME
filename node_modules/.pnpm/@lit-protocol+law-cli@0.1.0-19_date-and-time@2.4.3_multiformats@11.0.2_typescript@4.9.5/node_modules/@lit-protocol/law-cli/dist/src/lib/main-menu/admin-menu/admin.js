"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Admin = void 0;
const agent_wallet_1 = require("@lit-protocol/agent-wallet");
const core_1 = require("../../core");
class Admin {
    awAdmin;
    /**
     * Private constructor for the Admin class.
     * @param awAdmin - An instance of the `AwAdmin` class.
     */
    constructor(awAdmin) {
        this.awAdmin = awAdmin;
    }
    /**
     * Creates an instance of the `AwAdmin` class.
     * Handles errors related to missing private keys or insufficient balances by prompting the user for input.
     *
     * @param litNetwork - The Lit network to use for the Admin role.
     * @param privateKey - Optional. The private key for the Admin role.
     * @returns A promise that resolves to an instance of the `AwAdmin` class.
     * @throws If initialization fails, the function logs an error and exits the process.
     */
    static async createAwAdmin(litNetwork, privateKey) {
        let awAdmin;
        try {
            // Attempt to create the AwAdmin instance.
            awAdmin = await agent_wallet_1.Admin.create({
                type: 'eoa',
                privateKey,
            }, {
                litNetwork,
            });
        }
        catch (error) {
            // TODO: This shouldn't happen as handleUseEoa should ensure a private key is provided
            // // Handle specific errors related to missing private keys or insufficient balances.
            // if (error instanceof AwSignerError) {
            //   if (error.type === AwSignerErrorType.ADMIN_MISSING_PRIVATE_KEY) {
            //     // Prompt the user for a private key if it is missing.
            //     const privateKey = await promptAdminInit();
            //     return Admin.createAwAdmin(litNetwork, privateKey);
            //   }
            // }
            if (error instanceof Error && error.message) {
                throw new core_1.LawCliError(core_1.AdminErrors.FAILED_TO_INITIALIZE_ADMIN, `Failed to initialize Admin role: ${error.message}`);
            }
            // TODO Maybe this isn't the best way to handle this
            core_1.logger.error('An unknown error occurred while initializing Admin role.');
            throw error;
        }
        return awAdmin;
    }
    /**
     * Creates an instance of the `Admin` class.
     * @param litNetwork - The Lit network to use for the Admin role.
     * @returns A promise that resolves to an instance of the `Admin` class.
     */
    static async create(litNetwork, adminPrivateKey) {
        const awAdmin = await Admin.createAwAdmin(litNetwork, adminPrivateKey);
        return new Admin(awAdmin);
    }
}
exports.Admin = Admin;
