"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleGetToolPolicyForDelegatee = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
/**
 * Prompts the user to select a tool from a list of tools with policies.
 * Each tool is displayed with its name and IPFS CID.
 */
const promptSelectTool = async (toolsWithPolicies) => {
    const choices = toolsWithPolicies.map((tool) => ({
        title: tool.name,
        description: `IPFS CID: ${tool.ipfsCid}`,
        value: tool,
    }));
    if (choices.length === 0) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.NO_TOOLS_WITH_POLICIES, 'No tools with policies available to select');
    }
    const { tool } = await (0, prompts_1.default)({
        type: 'select',
        name: 'tool',
        message: 'Select a tool:',
        choices,
    });
    if (!tool) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.TOOL_SELECTION_CANCELLED, 'Tool selection was cancelled');
    }
    return tool;
};
/**
 * Handles the process of retrieving and displaying the policy for a selected tool registered under a specific PKP.
 * This function prompts the user to select a tool from the available tools with policies,
 * retrieves the tool's policy, and logs the result.
 */
const handleGetToolPolicyForDelegatee = async (delegatee, pkp) => {
    try {
        // Retrieve the list of registered tools for the PKP
        const registeredTools = await delegatee.awDelegatee.getPermittedToolsForPkp(pkp.tokenId);
        // Check if there are any tools with policies
        if (Object.keys(registeredTools.toolsWithPolicies).length === 0) {
            core_1.logger.error('No registered tools with a policy found for this PKP.');
            return;
        }
        // Prompt user to select a tool
        const selectedTool = await promptSelectTool(Object.values(registeredTools.toolsWithPolicies));
        // Get the policy for the selected tool
        const policy = await delegatee.awDelegatee.getToolPolicy(pkp.tokenId, selectedTool.ipfsCid);
        // Log the tool policy details
        core_1.logger.info(`Tool Policy for PKP ${pkp.ethAddress} and Tool ${selectedTool.ipfsCid}:`);
        core_1.logger.log(`  Policy IPFS CID: ${policy.policyIpfsCid}`);
        core_1.logger.log(`  Policy Enabled: ${policy.enabled ? '✅' : '❌'}`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.DelegateeErrors.NO_TOOLS_WITH_POLICIES) {
                core_1.logger.error('No tools with policies available for the selected PKP');
                return;
            }
            if (error.type === core_1.DelegateeErrors.TOOL_SELECTION_CANCELLED) {
                core_1.logger.error('No tool selected');
                return;
            }
        }
        throw error;
    }
};
exports.handleGetToolPolicyForDelegatee = handleGetToolPolicyForDelegatee;
