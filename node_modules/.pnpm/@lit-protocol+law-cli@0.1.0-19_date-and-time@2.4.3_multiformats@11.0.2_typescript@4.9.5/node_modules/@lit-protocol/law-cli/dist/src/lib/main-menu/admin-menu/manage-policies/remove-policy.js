"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRemovePolicy = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
const promptSelectToolWithPolicy = async (registeredTools) => {
    // Get only tools with policies
    const toolsWithPolicies = registeredTools.toolsWithPolicies;
    if (Object.keys(toolsWithPolicies).length === 0) {
        throw new core_1.LawCliError(core_1.RemovePolicyErrors.NO_POLICIES_FOUND, 'No tools with policies found.');
    }
    const { tool } = await (0, prompts_1.default)({
        type: 'select',
        name: 'tool',
        message: 'Select a tool to remove policy from:',
        choices: Object.entries(toolsWithPolicies).map(([ipfsCid, tool]) => ({
            title: tool.name,
            description: `${Object.keys(tool.delegateePolicies).length} policies`,
            value: tool,
        })),
    });
    if (!tool) {
        throw new core_1.LawCliError(core_1.RemovePolicyErrors.REMOVE_POLICY_CANCELLED, 'Tool selection cancelled.');
    }
    return tool;
};
const promptSelectDelegatee = async (delegateePolicies) => {
    const { delegatee } = await (0, prompts_1.default)({
        type: 'select',
        name: 'delegatee',
        message: 'Select a delegatee to remove policy for:',
        choices: Object.entries(delegateePolicies).map(([address, policy]) => ({
            title: address,
            description: `Policy: ${policy.policyIpfsCid}`,
            value: address,
        })),
    });
    if (!delegatee) {
        throw new core_1.LawCliError(core_1.RemovePolicyErrors.REMOVE_POLICY_CANCELLED, 'Delegatee selection cancelled.');
    }
    return delegatee;
};
const promptConfirmRemoval = async (toolName, delegatee) => {
    const { confirmed } = await (0, prompts_1.default)({
        type: 'confirm',
        name: 'confirmed',
        message: `Are you sure you want to remove the policy for tool ${toolName} and delegatee ${delegatee}?`,
        initial: false,
    });
    if (!confirmed) {
        throw new core_1.LawCliError(core_1.RemovePolicyErrors.REMOVE_POLICY_CANCELLED, 'Policy removal cancelled.');
    }
    return confirmed;
};
const handleRemovePolicy = async (admin, pkp) => {
    try {
        const registeredTools = await admin.awAdmin.getRegisteredToolsAndDelegateesForPkp(pkp.info.tokenId);
        const selectedTool = await promptSelectToolWithPolicy(registeredTools);
        const selectedDelegatee = await promptSelectDelegatee(selectedTool.delegateePolicies);
        await promptConfirmRemoval(selectedTool.name, selectedDelegatee);
        await admin.awAdmin.removeToolPolicyForDelegatee(pkp.info.tokenId, selectedTool.ipfsCid, selectedDelegatee);
        core_1.logger.success(`Policy removed successfully for tool ${selectedTool.name} and delegatee ${selectedDelegatee}.`);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.RemovePolicyErrors.REMOVE_POLICY_CANCELLED ||
                error.type === core_1.RemovePolicyErrors.NO_POLICIES_FOUND) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleRemovePolicy = handleRemovePolicy;
