"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptDelegateeInsufficientBalance = void 0;
const tslib_1 = require("tslib");
// Import the prompts library for user interaction.
const prompts_1 = tslib_1.__importDefault(require("prompts"));
// Import the logger utility for logging messages.
const core_1 = require("../../core");
/**
 * Handles the case where the delegatee wallet has an insufficient balance of Lit test tokens.
 * This function informs the user about the issue, provides instructions for funding the wallet,
 * and prompts the user to confirm whether they have funded their wallet.
 *
 * @returns A boolean indicating whether the user has confirmed funding their wallet.
 *   - `true` if the user confirms they have funded their wallet.
 *   - `false` if the user does not confirm or cancels the operation.
 */
const promptDelegateeInsufficientBalance = async () => {
    // Log an error message indicating insufficient Lit test token balance.
    core_1.logger.error('Insufficient Lit test token balance to mint Lit Capacity Credit.');
    // Provide instructions for funding the wallet with Lit test tokens.
    core_1.logger.info('Please fund your wallet with Lit test tokens from: https://chronicle-yellowstone-faucet.getlit.dev/');
    // Prompt the user to confirm whether they have funded their wallet.
    const fundingResponse = await (0, prompts_1.default)({
        type: 'confirm',
        name: 'hasFunded',
        message: 'Have you funded your Delegatee wallet with Lit test tokens?',
        initial: false,
    });
    // If the user confirms they have funded their wallet, return `true`.
    if (fundingResponse.hasFunded) {
        return true;
    }
    // If the user does not confirm, log an error message and return `false`.
    core_1.logger.error('Lit test tokens are required for minting PKPs and registering policies. Please fund your wallet and try again.');
    return false;
};
exports.promptDelegateeInsufficientBalance = promptDelegateeInsufficientBalance;
