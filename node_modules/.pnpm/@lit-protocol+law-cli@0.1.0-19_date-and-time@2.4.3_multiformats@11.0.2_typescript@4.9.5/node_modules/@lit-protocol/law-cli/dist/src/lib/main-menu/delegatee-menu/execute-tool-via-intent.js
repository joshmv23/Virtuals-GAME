"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleExecuteToolViaIntent = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
const get_tool_params_1 = require("./get-tool-params");
/**
 * Prompts the user to enter their intent for finding a matching tool.
 */
const promptToolMatchingIntent = async () => {
    const { intent } = await (0, prompts_1.default)({
        type: 'text',
        name: 'intent',
        message: 'Enter your intent:',
    });
    if (!intent) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.GET_TOOL_VIA_INTENT_CANCELLED, 'Intent input was cancelled');
    }
    return intent;
};
/**
 * Handles the process of executing a tool via intent.
 * This function first finds a matching tool based on the user's intent,
 * then prompts for any missing parameters, and executes the tool.
 */
const handleExecuteToolViaIntent = async (localStorage, delegatee, pkp) => {
    try {
        // Check if intent matcher is configured
        if (!delegatee.intentMatcher) {
            core_1.logger.error('Intent matcher is not configured.');
            return;
        }
        // Get tool via intent
        core_1.logger.loading('Finding tool for intent...');
        const intent = await promptToolMatchingIntent();
        const intentMatcherResponse = await delegatee.awDelegatee.getToolViaIntent(pkp.tokenId, intent, delegatee.intentMatcher);
        // Handle case where no matching tool is found
        if (intentMatcherResponse.matchedTool === null) {
            core_1.logger.error('No matching tool found.');
            core_1.logger.log(`Reasoning: ${intentMatcherResponse.analysis.reasoning}`);
            return;
        }
        // Display the matching tool information
        core_1.logger.info('Found matching tool:');
        core_1.logger.log(`  - ${intentMatcherResponse.matchedTool.name} (${intentMatcherResponse.matchedTool.ipfsCid})`);
        core_1.logger.log(`      - ${intentMatcherResponse.matchedTool.description}`);
        core_1.logger.log(`      - Reasoning: ${intentMatcherResponse.analysis.reasoning}`);
        // Prompt for any missing parameters
        const params = await (0, get_tool_params_1.getToolParams)(localStorage, intentMatcherResponse.matchedTool, pkp.ethAddress, {
            missingParams: intentMatcherResponse.params.missingParams,
            foundParams: intentMatcherResponse.params.foundParams,
        });
        // Execute the tool
        core_1.logger.loading('Executing tool...');
        const response = await delegatee.awDelegatee.executeTool({
            ipfsId: intentMatcherResponse.matchedTool.ipfsCid,
            jsParams: {
                params,
            },
        });
        core_1.logger.info('Tool executed');
        core_1.logger.log(JSON.stringify(response, null, 2));
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.DelegateeErrors.GET_TOOL_VIA_INTENT_CANCELLED) {
                core_1.logger.error('Intent input was cancelled');
                return;
            }
            if (error.type === core_1.DelegateeErrors.TOOL_PARAMS_CANCELLED) {
                core_1.logger.error('Tool parameter input cancelled');
                return;
            }
            if (error.type === core_1.DelegateeErrors.TOOL_PARAMS_INVALID) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleExecuteToolViaIntent = handleExecuteToolViaIntent;
