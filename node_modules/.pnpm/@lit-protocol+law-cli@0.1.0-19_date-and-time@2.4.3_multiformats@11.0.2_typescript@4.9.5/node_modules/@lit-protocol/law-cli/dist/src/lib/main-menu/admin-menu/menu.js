"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAdminMenu = exports.AdminMenuChoice = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
var AdminMenuChoice;
(function (AdminMenuChoice) {
    AdminMenuChoice["AdminSettings"] = "adminSettings";
    AdminMenuChoice["SelectPkp"] = "selectPkp";
    AdminMenuChoice["ManageTools"] = "manageTools";
    AdminMenuChoice["ManagePolicies"] = "managePolicies";
    AdminMenuChoice["ManageDelegatees"] = "manageDelegatees";
    AdminMenuChoice["Back"] = "back";
})(AdminMenuChoice || (exports.AdminMenuChoice = AdminMenuChoice = {}));
const promptAdminMenu = async (admin, pkp) => {
    const disableManageOptions = !admin;
    if (disableManageOptions) {
        core_1.logger.warn('Admin role not initialized. Please configure the admin role before managing tools, policies, or delegatees.');
    }
    const { action } = await (0, prompts_1.default)({
        type: 'select',
        name: 'action',
        message: 'What would you like to do?',
        choices: [
            {
                title: 'Admin Settings',
                value: AdminMenuChoice.AdminSettings,
            },
            {
                title: 'Select Agent Wallet to Manage',
                description: pkp
                    ? `Currently managing: ${pkp.info.ethAddress}`
                    : 'No Agent Wallet selected',
                value: AdminMenuChoice.SelectPkp,
                disabled: disableManageOptions,
            },
            {
                title: 'Manage Tools',
                value: AdminMenuChoice.ManageTools,
                disabled: disableManageOptions,
            },
            {
                title: 'Manage Policies',
                value: AdminMenuChoice.ManagePolicies,
                disabled: disableManageOptions,
            },
            {
                title: 'Manage Delegatees',
                value: AdminMenuChoice.ManageDelegatees,
                disabled: disableManageOptions,
            },
            { title: 'Back', value: AdminMenuChoice.Back },
        ],
    });
    if (!action) {
        throw new core_1.LawCliError(core_1.GeneralErrors.NO_ACTION_SELECTED, 'No admin menu action selected. Please select an action to continue.');
    }
    return action;
};
const handleAdminMenu = async (admin, pkp) => {
    try {
        return promptAdminMenu(admin, pkp);
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.GeneralErrors.NO_ACTION_SELECTED) {
                core_1.logger.error(error.message);
                return await (0, exports.handleAdminMenu)(admin);
            }
        }
        throw error;
    }
};
exports.handleAdminMenu = handleAdminMenu;
