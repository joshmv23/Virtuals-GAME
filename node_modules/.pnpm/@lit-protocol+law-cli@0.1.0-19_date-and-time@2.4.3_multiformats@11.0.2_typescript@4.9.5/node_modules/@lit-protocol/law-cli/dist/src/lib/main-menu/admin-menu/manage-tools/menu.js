"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleManageToolsMenu = exports.ManageToolsMenuChoice = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../../core");
var ManageToolsMenuChoice;
(function (ManageToolsMenuChoice) {
    ManageToolsMenuChoice["PermitTool"] = "permitTool";
    ManageToolsMenuChoice["RemoveTool"] = "removeTool";
    ManageToolsMenuChoice["EnableTool"] = "enableTool";
    ManageToolsMenuChoice["DisableTool"] = "disableTool";
    ManageToolsMenuChoice["GetRegisteredTools"] = "getRegisteredTools";
    ManageToolsMenuChoice["Back"] = "back";
})(ManageToolsMenuChoice || (exports.ManageToolsMenuChoice = ManageToolsMenuChoice = {}));
const promptManageToolsMenu = async () => {
    const { action } = await (0, prompts_1.default)({
        type: 'select',
        name: 'action',
        message: 'What would you like to do?',
        choices: [
            {
                title: 'Get Registered Tools',
                value: ManageToolsMenuChoice.GetRegisteredTools,
            },
            {
                title: 'Permit Tool',
                value: ManageToolsMenuChoice.PermitTool,
            },
            {
                title: 'Remove Tool',
                value: ManageToolsMenuChoice.RemoveTool,
            },
            {
                title: 'Enable Tool',
                value: ManageToolsMenuChoice.EnableTool,
            },
            {
                title: 'Disable Tool',
                value: ManageToolsMenuChoice.DisableTool,
            },
            { title: 'Back', value: ManageToolsMenuChoice.Back },
        ],
    });
    if (!action) {
        throw new core_1.LawCliError(core_1.GeneralErrors.NO_ACTION_SELECTED, 'No action selected. Please select an action to continue.');
    }
    return action;
};
const handleManageToolsMenu = async () => {
    try {
        return promptManageToolsMenu();
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.GeneralErrors.NO_ACTION_SELECTED) {
                core_1.logger.error(error.message);
                return await (0, exports.handleManageToolsMenu)();
            }
        }
        throw error;
    }
};
exports.handleManageToolsMenu = handleManageToolsMenu;
