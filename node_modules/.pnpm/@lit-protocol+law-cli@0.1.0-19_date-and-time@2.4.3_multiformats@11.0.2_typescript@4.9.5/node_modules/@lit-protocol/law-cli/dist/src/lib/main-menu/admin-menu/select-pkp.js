"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleSelectPkpForAdmin = exports.SelectPkpMenuChoice = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
var SelectPkpMenuChoice;
(function (SelectPkpMenuChoice) {
    SelectPkpMenuChoice["MintNew"] = "mintNew";
    SelectPkpMenuChoice["Back"] = "back";
})(SelectPkpMenuChoice || (exports.SelectPkpMenuChoice = SelectPkpMenuChoice = {}));
const promptSelectOrMintPkp = async (admin) => {
    const pkps = await admin.awAdmin.getPkps();
    const choices = [
        {
            title: 'Mint New Agent Wallet',
            value: SelectPkpMenuChoice.MintNew,
        },
        ...pkps.map((pkp, i) => ({
            title: pkp.info.ethAddress,
            description: `Token ID: ${pkp.info.tokenId}`,
            value: pkp,
        })),
        {
            title: 'Back',
            value: SelectPkpMenuChoice.Back,
        },
    ];
    const { selection } = await (0, prompts_1.default)({
        type: 'select',
        name: 'selection',
        message: 'Select an Agent Wallet to manage or mint a new one:',
        choices,
    });
    if (!selection) {
        throw new core_1.LawCliError(core_1.AdminErrors.PKP_SELECTION_CANCELLED, 'Agent Wallet selection cancelled.');
    }
    return selection;
};
const handleSelectPkpForAdmin = async (admin) => {
    try {
        const selection = await promptSelectOrMintPkp(admin);
        if (selection === SelectPkpMenuChoice.MintNew) {
            const pkp = await admin.awAdmin.mintPkp();
            core_1.logger.info(`Minted new Agent Wallet: ${pkp.info.ethAddress}`);
            return pkp;
        }
        if (selection === SelectPkpMenuChoice.Back) {
            return null;
        }
        return selection;
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.AdminErrors.PKP_SELECTION_CANCELLED) {
                core_1.logger.error(error.message);
                return null;
            }
        }
        throw error;
    }
};
exports.handleSelectPkpForAdmin = handleSelectPkpForAdmin;
