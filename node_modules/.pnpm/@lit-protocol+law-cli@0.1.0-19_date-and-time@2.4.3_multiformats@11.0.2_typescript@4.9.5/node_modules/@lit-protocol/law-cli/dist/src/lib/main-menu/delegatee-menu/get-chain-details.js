"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptSelectChain = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
/**
 * Gets the list of configured chains from local storage.
 */
const getConfiguredChains = (localStorage) => {
    const chainsData = localStorage.getItem(core_1.StorageKeys.RPCS);
    if (!chainsData) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.NO_CHAINS_CONFIGURED, 'No chains are configured in local storage');
    }
    return JSON.parse(chainsData);
};
/**
 * Prompts for manual chain details.
 */
const promptManualChainDetails = async (needsChainId, needsRpcUrl) => {
    const params = {};
    if (needsChainId) {
        const { chainId } = await (0, prompts_1.default)({
            type: 'text',
            name: 'chainId',
            message: 'Enter the chain ID:',
            validate: (value) => !isNaN(Number(value)) || 'Chain ID must be a number',
        });
        if (!chainId) {
            throw new core_1.LawCliError(core_1.DelegateeErrors.CHAIN_SELECTION_CANCELLED, 'Chain ID input was cancelled');
        }
        params.chainId = chainId;
    }
    if (needsRpcUrl) {
        const { rpcUrl } = await (0, prompts_1.default)({
            type: 'text',
            name: 'rpcUrl',
            message: 'Enter the RPC URL:',
            validate: (value) => value.startsWith('http') || 'RPC URL must start with http',
        });
        if (!rpcUrl) {
            throw new core_1.LawCliError(core_1.DelegateeErrors.CHAIN_SELECTION_CANCELLED, 'RPC URL input was cancelled');
        }
        params.rpcUrl = rpcUrl;
    }
    return params;
};
/**
 * Prompts the user to select a chain from the configured chains or enter custom values.
 */
const promptSelectChain = async (localStorage, params) => {
    const chainChoices = Object.entries(getConfiguredChains(localStorage))
        .map(([chainKey, chain]) => ({
        title: (chain.name || '').trim().replace(/\s+/g, ' '),
        description: `Chain ID: ${chain.chainId}, RPC URL: ${chain.rpcUrls[0]}`,
        value: {
            chainId: chain.chainId.toString(),
            rpcUrl: chain.rpcUrls[0],
        },
    }))
        .sort((a, b) => a.title.localeCompare(b.title));
    const { selection } = await (0, prompts_1.default)({
        type: 'autocomplete',
        name: 'selection',
        message: 'Select a chain or enter details manually (start typing to filter):',
        choices: [
            {
                title: 'Manually enter chain details',
                value: 'manual',
            },
            ...chainChoices,
        ],
        suggest: async (input, choices) => {
            const inputLower = input.toLowerCase();
            return choices.filter((choice) => choice.title.toLowerCase().includes(inputLower));
        },
    });
    if (!selection) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.CHAIN_SELECTION_CANCELLED, 'Chain selection was cancelled');
    }
    if (selection === 'manual') {
        return promptManualChainDetails(!!params.needsChainId, !!params.needsRpcUrl);
    }
    // If only one parameter is needed, only return that one
    const result = {};
    if (params.needsChainId)
        result.chainId = selection.chainId;
    if (params.needsRpcUrl)
        result.rpcUrl = selection.rpcUrl;
    return result;
};
exports.promptSelectChain = promptSelectChain;
