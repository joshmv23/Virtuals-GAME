"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleExecuteTool = void 0;
const tslib_1 = require("tslib");
const prompts_1 = tslib_1.__importDefault(require("prompts"));
const core_1 = require("../../core");
const get_tool_params_1 = require("./get-tool-params");
/**
 * Prompts the user to select a tool from a list of available tools.
 */
const promptSelectTool = async (toolsWithPolicies, toolsWithoutPolicies) => {
    const choices = [
        ...toolsWithPolicies.map((tool) => ({
            title: `${tool.name} (with policy)`,
            description: `IPFS CID: ${tool.ipfsCid}`,
            value: tool,
        })),
        ...toolsWithoutPolicies.map((tool) => ({
            title: tool.name,
            description: `IPFS CID: ${tool.ipfsCid}`,
            value: tool,
        })),
    ];
    if (choices.length === 0) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.NO_TOOLS_AVAILABLE, 'No tools available to select');
    }
    const { tool } = await (0, prompts_1.default)({
        type: 'select',
        name: 'tool',
        message: 'Select a tool to execute:',
        choices,
    });
    if (!tool) {
        throw new core_1.LawCliError(core_1.DelegateeErrors.TOOL_SELECTION_CANCELLED, 'Tool selection was cancelled');
    }
    return tool;
};
/**
 * Handles the process of executing a tool.
 * This function displays available tools, prompts for tool selection and parameters,
 * and executes the selected tool with the provided parameters.
 */
const handleExecuteTool = async (localStorage, delegatee, pkp) => {
    try {
        // Get registered tools for the PKP
        const registeredTools = await delegatee.awDelegatee.getPermittedToolsForPkp(pkp.tokenId);
        // Check if there are any tools available
        if (Object.keys(registeredTools.toolsWithPolicies).length === 0 &&
            Object.keys(registeredTools.toolsWithoutPolicies).length === 0) {
            core_1.logger.error('No registered tools found for this PKP.');
            return;
        }
        // Display available tools
        if (Object.keys(registeredTools.toolsWithPolicies).length > 0) {
            core_1.logger.info(`Tools with Policies for PKP ${pkp.ethAddress}:`);
            Object.values(registeredTools.toolsWithPolicies).forEach((tool) => {
                core_1.logger.log(`  - ${tool.name} (${tool.ipfsCid})`);
            });
        }
        if (Object.keys(registeredTools.toolsWithoutPolicies).length > 0) {
            core_1.logger.info(`Tools without Policies for PKP ${pkp.ethAddress}:`);
            Object.values(registeredTools.toolsWithoutPolicies).forEach((tool) => {
                core_1.logger.log(`  - ${tool.name} (${tool.ipfsCid})`);
            });
        }
        // Prompt user to select a tool
        const selectedTool = await promptSelectTool(Object.values(registeredTools.toolsWithPolicies), Object.values(registeredTools.toolsWithoutPolicies));
        // If the tool has a policy, display it
        const toolWithPolicy = Object.values(registeredTools.toolsWithPolicies).find((tool) => tool.ipfsCid === selectedTool.ipfsCid);
        if (toolWithPolicy) {
            const policy = await delegatee.awDelegatee.getToolPolicy(pkp.tokenId, selectedTool.ipfsCid);
            core_1.logger.info('Tool Policy:');
            core_1.logger.log(`  Policy IPFS CID: ${policy.policyIpfsCid}`);
            core_1.logger.log(`  Policy Enabled: ${policy.enabled ? '✅' : '❌'}`);
        }
        // Prompt for tool parameters
        core_1.logger.info('Enter Tool Parameters:');
        const params = await (0, get_tool_params_1.getToolParams)(localStorage, selectedTool, pkp.ethAddress);
        // Execute the tool
        core_1.logger.info('Executing tool...');
        const response = await delegatee.awDelegatee.executeTool({
            ipfsId: selectedTool.ipfsCid,
            jsParams: {
                params,
            },
        });
        core_1.logger.info('Tool executed');
        core_1.logger.log(JSON.stringify(response, null, 2));
    }
    catch (error) {
        if (error instanceof core_1.LawCliError) {
            if (error.type === core_1.DelegateeErrors.NO_TOOLS_AVAILABLE) {
                core_1.logger.error('No tools available for the selected PKP');
                return;
            }
            if (error.type === core_1.DelegateeErrors.TOOL_SELECTION_CANCELLED) {
                core_1.logger.error('No tool selected');
                return;
            }
            if (error.type === core_1.DelegateeErrors.TOOL_PARAMS_CANCELLED) {
                core_1.logger.error('Tool parameter input cancelled');
                return;
            }
            if (error.type === core_1.DelegateeErrors.TOOL_PARAMS_INVALID) {
                core_1.logger.error(error.message);
                return;
            }
        }
        throw error;
    }
};
exports.handleExecuteTool = handleExecuteTool;
