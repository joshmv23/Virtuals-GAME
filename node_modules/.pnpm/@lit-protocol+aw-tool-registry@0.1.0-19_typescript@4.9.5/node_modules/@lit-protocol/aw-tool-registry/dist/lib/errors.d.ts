/**
 * Enum representing the types of errors that can occur in the AwToolRegistry.
 * Each error type corresponds to a specific failure scenario.
 */
export declare enum AwToolRegistryErrorType {
    /** Indicates that the requested tool was not found in the registry. */
    TOOL_NOT_FOUND = "TOOL_NOT_FOUND",
    /** Indicates that the IPFS CID (Content Identifier) for the tool was not found. */
    IPFS_CID_NOT_FOUND = "IPFS_CID_NOT_FOUND"
}
/**
 * Type representing additional details about an error.
 * This can include nested errors, custom properties, or other metadata.
 */
export type ErrorDetails = {
    /** The name of the error. */
    name?: string;
    /** The error message. */
    message?: string;
    /** The stack trace of the error. */
    stack?: string;
    /** The type of the error, if it is an `AwToolRegistryError`. */
    type?: AwToolRegistryErrorType;
    /** Additional details about the error. */
    details?: unknown;
    /** Allows for additional custom properties. */
    [key: string]: unknown;
};
/**
 * Custom error class for the AwToolRegistry.
 * Extends the built-in `Error` class to include additional metadata such as error type and serialized details.
 */
export declare class AwToolRegistryError extends Error {
    readonly type: AwToolRegistryErrorType;
    readonly details?: Record<string, ErrorDetails | unknown> | undefined;
    /**
     * A serialized string representation of the error details.
     * This is useful for logging and debugging.
     */
    readonly serializedDetails: string;
    /**
     * Creates an instance of `AwToolRegistryError`.
     *
     * @param type - The type of the error, as defined in `AwToolRegistryErrorType`.
     * @param message - A human-readable error message.
     * @param details - Optional additional details about the error, such as nested errors or custom properties.
     */
    constructor(type: AwToolRegistryErrorType, message: string, details?: Record<string, ErrorDetails | unknown> | undefined);
    /**
     * Converts the error to a JSON-compatible object.
     * This is useful for serialization and logging.
     *
     * @returns An object containing the error's name, message, type, details, and stack trace.
     */
    toJSON(): {
        name: string;
        message: string;
        type: AwToolRegistryErrorType;
        details: any;
        stack: string | undefined;
    };
}
//# sourceMappingURL=errors.d.ts.map