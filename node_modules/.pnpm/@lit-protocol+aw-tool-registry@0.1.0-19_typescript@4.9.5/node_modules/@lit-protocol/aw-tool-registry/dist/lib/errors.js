"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwToolRegistryError = exports.AwToolRegistryErrorType = void 0;
/**
 * Enum representing the types of errors that can occur in the AwToolRegistry.
 * Each error type corresponds to a specific failure scenario.
 */
var AwToolRegistryErrorType;
(function (AwToolRegistryErrorType) {
    /** Indicates that the requested tool was not found in the registry. */
    AwToolRegistryErrorType["TOOL_NOT_FOUND"] = "TOOL_NOT_FOUND";
    /** Indicates that the IPFS CID (Content Identifier) for the tool was not found. */
    AwToolRegistryErrorType["IPFS_CID_NOT_FOUND"] = "IPFS_CID_NOT_FOUND";
})(AwToolRegistryErrorType || (exports.AwToolRegistryErrorType = AwToolRegistryErrorType = {}));
/**
 * Custom error class for the AwToolRegistry.
 * Extends the built-in `Error` class to include additional metadata such as error type and serialized details.
 */
class AwToolRegistryError extends Error {
    type;
    details;
    /**
     * A serialized string representation of the error details.
     * This is useful for logging and debugging.
     */
    serializedDetails;
    /**
     * Creates an instance of `AwToolRegistryError`.
     *
     * @param type - The type of the error, as defined in `AwToolRegistryErrorType`.
     * @param message - A human-readable error message.
     * @param details - Optional additional details about the error, such as nested errors or custom properties.
     */
    constructor(type, message, details) {
        super(message);
        this.type = type;
        this.details = details;
        this.name = 'RegistryError';
        // Serialize the details for better error logging
        this.serializedDetails = details
            ? JSON.stringify(details, (key, value) => {
                if (value instanceof Error) {
                    // Handle nested errors
                    return {
                        name: value.name,
                        message: value.message,
                        stack: value.stack,
                        ...(value instanceof AwToolRegistryError
                            ? {
                                type: value.type,
                                details: value.serializedDetails
                                    ? JSON.parse(value.serializedDetails)
                                    : undefined,
                            }
                            : {}),
                    };
                }
                return value;
            }, 2)
            : '';
    }
    /**
     * Converts the error to a JSON-compatible object.
     * This is useful for serialization and logging.
     *
     * @returns An object containing the error's name, message, type, details, and stack trace.
     */
    toJSON() {
        return {
            name: this.name,
            message: this.message,
            type: this.type,
            details: this.serializedDetails
                ? JSON.parse(this.serializedDetails)
                : undefined,
            stack: this.stack,
        };
    }
}
exports.AwToolRegistryError = AwToolRegistryError;
