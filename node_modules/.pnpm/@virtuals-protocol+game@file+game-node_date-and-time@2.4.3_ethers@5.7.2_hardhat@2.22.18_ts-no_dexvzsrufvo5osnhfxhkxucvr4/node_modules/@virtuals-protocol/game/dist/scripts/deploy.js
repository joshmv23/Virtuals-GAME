"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const { ethers } = require("hardhat");
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const [deployer] = yield ethers.getSigners();
        console.log("Deploying contracts with account:", yield deployer.getAddress());
        // Deploy VirtualsToken
        console.log("\nDeploying VirtualsToken...");
        const VirtualsTokenFactory = yield ethers.getContractFactory("VirtualsToken");
        const token = yield VirtualsTokenFactory.deploy(deployer.address);
        yield token.deployed();
        console.log("VirtualsToken deployed to:", token.address);
        // Deploy VirtualsPolicy
        console.log("\nDeploying VirtualsPolicy...");
        const VirtualsPolicyFactory = yield ethers.getContractFactory("VirtualsPolicy");
        const policy = yield VirtualsPolicyFactory.deploy(token.address, deployer.address);
        yield policy.deployed();
        console.log("VirtualsPolicy deployed to:", policy.address);
        // Deploy LitAgentWallet
        console.log("\nDeploying LitAgentWallet...");
        const LitAgentWalletFactory = yield ethers.getContractFactory("LitAgentWallet");
        const wallet = yield LitAgentWalletFactory.deploy(policy.address);
        yield wallet.deployed();
        console.log("LitAgentWallet deployed to:", wallet.address);
        // Setup initial configuration
        console.log("\nSetting up initial configuration...");
        // Add additional admins (if specified in env)
        if (process.env.ADMIN_ADDRESSES) {
            const adminAddresses = process.env.ADMIN_ADDRESSES.split(',');
            for (const adminAddress of adminAddresses) {
                console.log(`Proposing to add admin: ${adminAddress}`);
                const tx = yield policy.proposeAddAdmin(adminAddress);
                yield tx.wait();
                console.log("Admin addition proposed");
            }
        }
        // Set up initial allowed functions
        const functionSignatures = [
            "transfer(address,uint256)",
            "approve(address,uint256)",
            "swap(address,address,uint256,uint256)",
        ];
        for (const signature of functionSignatures) {
            const functionSig = ethers.utils.id(signature).slice(0, 10);
            console.log(`Proposing to allow function: ${signature}`);
            const tx = yield policy.proposeAllowedFunction(functionSig, true);
            yield tx.wait();
            console.log("Function allowance proposed");
        }
        // Set initial transaction limits
        console.log("\nProposing transaction limits...");
        const maxTxAmount = ethers.utils.parseEther("10"); // 10 ETH max per transaction
        const tx = yield policy.proposeMaxTransactionAmount(maxTxAmount);
        yield tx.wait();
        console.log("Transaction limit proposed");
        console.log("\nDeployment complete! Contract addresses:");
        console.log("VirtualsToken:", token.address);
        console.log("VirtualsPolicy:", policy.address);
        console.log("LitAgentWallet:", wallet.address);
        console.log("\nNext steps:");
        console.log("1. Additional admins need to approve the pending proposals");
        console.log("2. Set up the LLM wallet address as a delegatee");
        console.log("3. Configure specific tool policies for the LLM");
    });
}
main()
    .then(() => process.exit(0))
    .catch((error) => {
    console.error(error);
    process.exit(1);
});
