"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseEthereumAddressSchema = exports.NETWORK_CONFIGS = void 0;
const zod_1 = require("zod");
/**
 * Network-specific configurations for the Tool.
 * @type {Record<string, NetworkConfig>}
 * @description A mapping of network names to their respective configurations.
 */
exports.NETWORK_CONFIGS = {
    'datil-dev': {
        litNetwork: 'datil-dev', // Lit network identifier for the development environment
        ipfsCid: '', // IPFS CID for the development environment (to be populated if needed)
        defaultPolicyIpfsCid: '', // IPFS CID for the development environment's default policy (to be populated if needed)
    },
    'datil-test': {
        litNetwork: 'datil-test', // Lit network identifier for the testing environment
        ipfsCid: '', // IPFS CID for the testing environment (to be populated if needed)
        defaultPolicyIpfsCid: '', // IPFS CID for the testing environment's default policy (to be populated if needed)
    },
    datil: {
        litNetwork: 'datil', // Lit network identifier for the production environment
        ipfsCid: '', // IPFS CID for the production environment (to be populated if needed)
        defaultPolicyIpfsCid: '', // IPFS CID for the production environment's default policy (to be populated if needed)
    },
};
/**
 * Zod schema for validating Ethereum addresses.
 * @type {z.ZodString}
 * @description Ensures the address is a valid Ethereum address (0x followed by 40 hexadecimal characters).
 */
exports.BaseEthereumAddressSchema = zod_1.z
    .string()
    .regex(/^0x[a-fA-F0-9]{40}$/, 'Invalid Ethereum address format');
