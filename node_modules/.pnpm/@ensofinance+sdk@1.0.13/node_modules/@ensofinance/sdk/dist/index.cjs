"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  EnsoClient: () => EnsoClient
});
module.exports = __toCommonJS(index_exports);
var import_axios = __toESM(require("axios"), 1);
var DEFAULT_BASE_URL = "https://api.enso.finance/api/v1";
var EnsoClient = class {
  constructor({
    baseURL = DEFAULT_BASE_URL,
    apiKey
  }) {
    this.client = import_axios.default.create({
      baseURL,
      headers: {
        Authorization: `Bearer ${apiKey}`
      }
    });
  }
  async request(config) {
    try {
      const response = await this.client.request(config);
      return response.data;
    } catch (error) {
      throw new Error(`API Request failed: ${error.message}`);
    }
  }
  // Method to get approval data to spend a token
  async getApprovalData(params) {
    const url = "/wallet/approve";
    if (!params.routingStrategy) {
      params.routingStrategy = "router";
    }
    return this.request({
      url,
      method: "GET",
      params
    });
  }
  // Method to get execution data for best route from a token to another
  async getRouterData(params) {
    const url = "/shortcuts/route";
    if (!params.routingStrategy) {
      params.routingStrategy = "router";
    }
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to quote swap from a token to another even if the user doesn't have the token or approve
  async getQuoteData(params) {
    const url = "/shortcuts/quote";
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to get wallet balances per chain
  async getBalances(params) {
    const url = "/wallet/balances";
    if (typeof params.useEoa === "undefined") {
      params.useEoa = true;
    }
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to get token data by address
  async getTokenData(params) {
    const url = `/tokens`;
    params.page = 1;
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to get token price data
  async getPriceData(params) {
    const url = `/prices/${params.chainId}/${params.address}`;
    return this.request({
      method: "GET",
      url
    });
  }
  // Method to get protocol data
  async getProtocolData(params) {
    const url = `/protocols`;
    return this.request({
      method: "GET",
      url,
      params
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EnsoClient
});
//# sourceMappingURL=index.cjs.map