{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig } from \"axios\";\nimport {\n  ApproveParams,\n  ApproveData,\n  RouteParams,\n  RouteData,\n  QuoteData,\n  QuoteParams,\n  BalanceParams,\n  BalanceData,\n  TokenParams,\n  TokenData,\n  PriceData,\n  PriceParams,\n  ProtocolParams,\n  ProtocolData,\n} from \"./types\";\n\nconst DEFAULT_BASE_URL = \"https://api.enso.finance/api/v1\";\n\nexport class EnsoClient {\n  private client: AxiosInstance;\n\n  constructor({\n    baseURL = DEFAULT_BASE_URL,\n    apiKey,\n  }: {\n    baseURL?: string;\n    apiKey: string;\n  }) {\n    this.client = axios.create({\n      baseURL,\n      headers: {\n        Authorization: `Bearer ${apiKey}`,\n      },\n    });\n  }\n\n  private async request<T>(config: AxiosRequestConfig): Promise<T> {\n    try {\n      const response = await this.client.request<T>(config);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(`API Request failed: ${error.message}`);\n    }\n  }\n\n  // Method to get approval data to spend a token\n  public async getApprovalData(params: ApproveParams) {\n    const url = \"/wallet/approve\";\n\n    if (!params.routingStrategy) {\n      params.routingStrategy = \"router\";\n    }\n\n    return this.request<ApproveData>({\n      url,\n      method: \"GET\",\n      params,\n    });\n  }\n\n  // Method to get execution data for best route from a token to another\n  public async getRouterData(params: RouteParams) {\n    const url = \"/shortcuts/route\";\n\n    if (!params.routingStrategy) {\n      params.routingStrategy = \"router\";\n    }\n\n    return this.request<RouteData>({\n      method: \"GET\",\n      url,\n      params,\n    });\n  }\n\n  // Method to quote swap from a token to another even if the user doesn't have the token or approve\n  public async getQuoteData(params: QuoteParams) {\n    const url = \"/shortcuts/quote\";\n\n    return this.request<QuoteData>({\n      method: \"GET\",\n      url,\n      params,\n    });\n  }\n\n  // Method to get wallet balances per chain\n  public async getBalances(params: BalanceParams) {\n    const url = \"/wallet/balances\";\n\n    if (typeof params.useEoa === \"undefined\") {\n      params.useEoa = true;\n    }\n\n    return this.request<BalanceData[]>({\n      method: \"GET\",\n      url,\n      params,\n    });\n  }\n\n  // Method to get token data by address\n  public async getTokenData(params: TokenParams) {\n    const url = `/tokens`;\n    // @ts-ignore\n    params.page = 1;\n\n    return this.request<{ data: TokenData[] }>({\n      method: \"GET\",\n      url,\n      params,\n    });\n  }\n\n  // Method to get token price data\n  public async getPriceData(params: PriceParams) {\n    const url = `/prices/${params.chainId}/${params.address}`;\n\n    return this.request<PriceData>({\n      method: \"GET\",\n      url,\n    });\n  }\n\n  // Method to get protocol data\n  public async getProtocolData(params?: ProtocolParams) {\n    const url = `/protocols`;\n\n    return this.request<ProtocolData[]>({\n      method: \"GET\",\n      url,\n      params,\n    });\n  }\n}\n\nexport {\n  ApproveParams,\n  ApproveData,\n  RouteParams,\n  RouteData,\n  QuoteData,\n  QuoteParams,\n  BalanceData,\n  BalanceParams,\n  TokenData,\n  TokenParams,\n  PriceData,\n  PriceParams,\n  ProtocolData,\n  ProtocolParams,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAyD;AAkBzD,IAAM,mBAAmB;AAElB,IAAM,aAAN,MAAiB;AAAA,EAGtB,YAAY;AAAA,IACV,UAAU;AAAA,IACV;AAAA,EACF,GAGG;AACD,SAAK,SAAS,aAAAA,QAAM,OAAO;AAAA,MACzB;AAAA,MACA,SAAS;AAAA,QACP,eAAe,UAAU,MAAM;AAAA,MACjC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,QAAW,QAAwC;AAC/D,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,OAAO,QAAW,MAAM;AACpD,aAAO,SAAS;AAAA,IAClB,SAAS,OAAY;AACnB,YAAM,IAAI,MAAM,uBAAuB,MAAM,OAAO,EAAE;AAAA,IACxD;AAAA,EACF;AAAA;AAAA,EAGA,MAAa,gBAAgB,QAAuB;AAClD,UAAM,MAAM;AAEZ,QAAI,CAAC,OAAO,iBAAiB;AAC3B,aAAO,kBAAkB;AAAA,IAC3B;AAEA,WAAO,KAAK,QAAqB;AAAA,MAC/B;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,MAAa,cAAc,QAAqB;AAC9C,UAAM,MAAM;AAEZ,QAAI,CAAC,OAAO,iBAAiB;AAC3B,aAAO,kBAAkB;AAAA,IAC3B;AAEA,WAAO,KAAK,QAAmB;AAAA,MAC7B,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,MAAa,aAAa,QAAqB;AAC7C,UAAM,MAAM;AAEZ,WAAO,KAAK,QAAmB;AAAA,MAC7B,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,MAAa,YAAY,QAAuB;AAC9C,UAAM,MAAM;AAEZ,QAAI,OAAO,OAAO,WAAW,aAAa;AACxC,aAAO,SAAS;AAAA,IAClB;AAEA,WAAO,KAAK,QAAuB;AAAA,MACjC,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,MAAa,aAAa,QAAqB;AAC7C,UAAM,MAAM;AAEZ,WAAO,OAAO;AAEd,WAAO,KAAK,QAA+B;AAAA,MACzC,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,MAAa,aAAa,QAAqB;AAC7C,UAAM,MAAM,WAAW,OAAO,OAAO,IAAI,OAAO,OAAO;AAEvD,WAAO,KAAK,QAAmB;AAAA,MAC7B,QAAQ;AAAA,MACR;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,MAAa,gBAAgB,QAAyB;AACpD,UAAM,MAAM;AAEZ,WAAO,KAAK,QAAwB;AAAA,MAClC,QAAQ;AAAA,MACR;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AACF;","names":["axios"]}