"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = __importStar(require("./api"));
class GameAgent {
    log(msg) {
        console.log(`[${this.name}] ${msg}`);
    }
    constructor(apiKey, options) {
        this.agentId = null;
        this.mapId = null;
        this.gameActionResult = null;
        this.gameClient = new api_1.default(apiKey);
        this.workerId = options.workers[0].id;
        this.name = options.name;
        this.goal = options.goal;
        this.description = options.description;
        this.workers = options.workers;
        this.getAgentState = options.getAgentState;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const map = yield this.gameClient.createMap(this.workers);
            const agent = yield this.gameClient.createAgent(this.name, this.goal, this.description);
            this.workers.forEach((worker) => {
                worker.setAgentId(agent.id);
                worker.setLogger(this.log.bind(this));
                worker.setGameClient(this.gameClient);
            });
            this.mapId = map.id;
            this.agentId = agent.id;
        });
    }
    setLogger(logger) {
        this.log = (msg) => logger(this, msg);
    }
    getWorkerById(workerId) {
        const worker = this.workers.find((worker) => worker.id === workerId);
        if (!worker) {
            throw new Error("Worker not found");
        }
        return worker;
    }
    step(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.agentId || !this.mapId) {
                throw new Error("Agent not initialized");
            }
            const { verbose } = options || {};
            const worker = this.workers.find((worker) => worker.id === this.workerId);
            if (!worker) {
                throw new Error("Worker not found");
            }
            const environment = worker.getEnvironment
                ? yield worker.getEnvironment()
                : {};
            const agentState = this.getAgentState ? yield this.getAgentState() : {};
            if (verbose) {
                this.log(`Environment State: ${JSON.stringify(environment)}`);
                this.log(`Agent State: ${JSON.stringify(agentState)}`);
            }
            const action = yield this.gameClient.getAction(this.agentId, this.mapId, worker, this.gameActionResult, environment, agentState);
            (options === null || options === void 0 ? void 0 : options.verbose) &&
                this.log(`Action State: ${JSON.stringify(action.agent_state || {})}.`);
            this.gameActionResult = null;
            switch (action.action_type) {
                case api_1.ActionType.CallFunction:
                case api_1.ActionType.ContinueFunction:
                    verbose &&
                        this.log(`Performing function ${action.action_args.fn_name} with args ${JSON.stringify(action.action_args.args)}.`);
                    const fn = worker.functions.find((fn) => fn.name === action.action_args.fn_name);
                    if (!fn) {
                        throw new Error("Function not found");
                    }
                    const result = yield fn.execute(action.action_args.args, (msg) => this.log(msg));
                    verbose &&
                        this.log(`Function status [${result.status}]: ${result.feedback}.`);
                    this.gameActionResult = result.toJSON(action.action_args.fn_id);
                    break;
                case api_1.ActionType.GoTo:
                    this.workerId = action.action_args.location_id;
                    verbose && this.log(`Going to ${action.action_args.location_id}.`);
                    break;
                case api_1.ActionType.Wait:
                    verbose && this.log(`No actions to perform.`);
                    return action.action_type;
                default:
                    return api_1.ActionType.Unknown;
            }
            return action.action_type;
        });
    }
    run(heartbeatSeconds, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.agentId || !this.mapId) {
                throw new Error("Agent not initialized");
            }
            while (true) {
                const action = yield this.step({
                    verbose: (options === null || options === void 0 ? void 0 : options.verbose) || false,
                });
                if (action === api_1.ActionType.Wait || action === api_1.ActionType.Unknown) {
                    break;
                }
                yield new Promise((resolve) => setTimeout(resolve, heartbeatSeconds * 1000));
            }
        });
    }
}
exports.default = GameAgent;
