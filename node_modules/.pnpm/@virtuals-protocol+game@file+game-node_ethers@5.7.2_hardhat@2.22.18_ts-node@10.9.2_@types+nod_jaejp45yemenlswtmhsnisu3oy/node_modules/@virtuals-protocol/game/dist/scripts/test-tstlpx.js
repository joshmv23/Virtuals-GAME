"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("@nomiclabs/hardhat-ethers");
const hardhat_1 = require("hardhat");
// TSTLPX Token Interface
const ERC20_ABI = [
    "function balanceOf(address owner) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",
    "function transfer(address to, uint amount) returns (bool)",
    "function allowance(address owner, address spender) view returns (uint256)",
    "function approve(address spender, uint amount) returns (bool)"
];
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const [signer] = yield hardhat_1.ethers.getSigners();
        console.log("Testing with account:", yield signer.getAddress());
        // Get account balance
        const balance = yield signer.getBalance();
        console.log("Account balance:", hardhat_1.ethers.utils.formatEther(balance), "XFUEL");
        // Connect to TSTLPX token
        const TSTLPX_ADDRESS = "0x81d8f0e945E3Bdc735dA3E19C4Df77a8B91046Cd"; // LITToken address
        console.log("\nVerifying contract at address:", TSTLPX_ADDRESS);
        try {
            // First verify if contract exists
            const code = yield hardhat_1.ethers.provider.getCode(TSTLPX_ADDRESS);
            if (code === "0x") {
                throw new Error("No contract found at specified address");
            }
            console.log("Contract exists at address");
            const tstlpx = new hardhat_1.ethers.Contract(TSTLPX_ADDRESS, ERC20_ABI, signer);
            // Try to get basic token info one by one
            try {
                const balance = yield tstlpx.balanceOf(signer.address);
                console.log("Balance call successful:", balance.toString());
            }
            catch (error) {
                console.log("balanceOf() failed:", error.message);
            }
            try {
                const symbol = yield tstlpx.symbol();
                console.log("Symbol call successful:", symbol);
            }
            catch (error) {
                console.log("symbol() failed:", error.message);
            }
            try {
                const decimals = yield tstlpx.decimals();
                console.log("Decimals call successful:", decimals);
            }
            catch (error) {
                console.log("decimals() failed:", error.message);
            }
        }
        catch (error) {
            console.error("Error details:", {
                message: error.message,
                code: error.code,
                reason: error.reason
            });
        }
    });
}
main()
    .then(() => process.exit(0))
    .catch((error) => {
    console.error(error);
    process.exit(1);
});
