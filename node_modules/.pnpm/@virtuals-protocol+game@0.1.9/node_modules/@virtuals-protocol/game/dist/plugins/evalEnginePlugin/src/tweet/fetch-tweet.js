"use strict";
// Modified code of https://github.com/vercel/react-tweet
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwitterApiError = void 0;
exports.fetchTweet = fetchTweet;
const axios_1 = __importDefault(require("axios"));
const SYNDICATION_URL = "https://cdn.syndication.twimg.com";
class TwitterApiError extends Error {
    constructor({ message, status, data, }) {
        super(message);
        this.name = "TwitterApiError";
        this.status = status;
        this.data = data;
    }
}
exports.TwitterApiError = TwitterApiError;
const TWEET_ID = /^[0-9]+$/;
function getToken(id) {
    return ((Number(id) / 1e15) * Math.PI)
        .toString(6 ** 2)
        .replace(/(0+|\.)/g, "");
}
/**
 * Fetches a tweet from the Twitter syndication API.
 */
function fetchTweet(id, fetchOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c, _d, _e, _f, _g;
        if (id.length > 40 || !TWEET_ID.test(id)) {
            throw new Error(`Invalid tweet id: ${id}`);
        }
        const url = new URL(`${SYNDICATION_URL}/tweet-result`);
        url.searchParams.set("id", id);
        url.searchParams.set("lang", "en");
        url.searchParams.set("features", [
            "tfw_timeline_list:",
            "tfw_follower_count_sunset:true",
            "tfw_tweet_edit_backend:on",
            "tfw_refsrc_session:on",
            "tfw_fosnr_soft_interventions_enabled:on",
            "tfw_show_birdwatch_pivots_enabled:on",
            "tfw_show_business_verified_badge:on",
            "tfw_duplicate_scribes_to_settings:on",
            "tfw_use_profile_image_shape_enabled:on",
            "tfw_show_blue_verified_badge:on",
            "tfw_legacy_timeline_sunset:true",
            "tfw_show_gov_verified_badge:on",
            "tfw_show_business_affiliate_badge:on",
            "tfw_tweet_edit_frontend:on",
        ].join(";"));
        url.searchParams.set("token", getToken(id));
        try {
            const res = yield axios_1.default.get(url.toString(), fetchOptions);
            if (((_a = res.data) === null || _a === void 0 ? void 0 : _a.__typename) === "TweetTombstone") {
                return { tombstone: true };
            }
            return { data: res.data };
        }
        catch (error) {
            if (axios_1.default.isAxiosError(error)) {
                if (((_b = error.response) === null || _b === void 0 ? void 0 : _b.status) === 404) {
                    return { notFound: true };
                }
                throw new TwitterApiError({
                    message: ((_d = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.error) || `Failed to fetch tweet at "${url}" with "${(_e = error.response) === null || _e === void 0 ? void 0 : _e.status}".`,
                    status: ((_f = error.response) === null || _f === void 0 ? void 0 : _f.status) || 500,
                    data: (_g = error.response) === null || _g === void 0 ? void 0 : _g.data,
                });
            }
            throw error;
        }
    });
}
