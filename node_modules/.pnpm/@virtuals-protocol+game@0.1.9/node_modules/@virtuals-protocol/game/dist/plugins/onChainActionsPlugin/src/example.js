"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const _1 = require(".");
const chains_1 = require("viem/chains");
const viem_1 = require("viem");
const plugin_erc20_1 = require("@goat-sdk/plugin-erc20");
const wallet_evm_1 = require("@goat-sdk/wallet-evm");
const wallet_viem_1 = require("@goat-sdk/wallet-viem");
const plugin_uniswap_1 = require("@goat-sdk/plugin-uniswap");
const accounts_1 = require("viem/accounts");
const account = (0, accounts_1.privateKeyToAccount)(process.env.WALLET_PRIVATE_KEY);
const walletClient = (0, viem_1.createWalletClient)({
    account: account,
    transport: (0, viem_1.http)(process.env.RPC_PROVIDER_URL),
    chain: chains_1.base,
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const onChainActionsWorker = yield (0, _1.getOnChainActionsWorker)({
        wallet: (0, wallet_viem_1.viem)(walletClient),
        plugins: [
            (0, wallet_evm_1.sendETH)(),
            (0, plugin_erc20_1.erc20)({ tokens: [plugin_erc20_1.USDC, plugin_erc20_1.PEPE] }),
            (0, plugin_uniswap_1.uniswap)({
                baseUrl: process.env.UNISWAP_BASE_URL,
                apiKey: process.env.UNISWAP_API_KEY,
            }),
        ],
    });
    // Create an agent with the worker
    const agent = new game_1.GameAgent((_a = process.env.GAME_API_KEY) !== null && _a !== void 0 ? _a : "", {
        name: "On chain actions agent",
        goal: "Swap 0.01 USDC to PEPE",
        description: "An agent that executes onchain actions",
        workers: [onChainActionsWorker],
    });
    agent.setLogger((agent, message) => {
        console.log(`-----[${agent.name}]-----`);
        console.log(message);
        console.log("\n");
    });
    yield agent.init();
    while (true) {
        yield agent.step({
            verbose: true,
        });
    }
}))();
