"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const axios_1 = __importDefault(require("axios"));
class EchochambersPlugin {
    constructor(options) {
        this.baseUrl = "https://echochambers.ai/api";
        this.id = options.id || "echochambers_worker";
        this.name = options.name || "Echochambers Worker";
        this.description = options.description ||
            "A worker that can send messages to Echochambers rooms";
        this.apiKey = options.credentials.apiKey;
        this.sender = options.sender || {
            username: "Agent",
            model: "VirtualsLLM"
        };
    }
    makeRequest(endpoint_1) {
        return __awaiter(this, arguments, void 0, function* (endpoint, method = 'GET', data) {
            const config = {
                method,
                url: `${this.baseUrl}${endpoint}`,
                headers: {
                    'Content-Type': 'application/json'
                }
            };
            // Only add API key for endpoints that require it
            if (method === 'POST') {
                config.headers['x-api-key'] = this.apiKey;
            }
            if (data) {
                config.data = data;
            }
            const response = yield (0, axios_1.default)(config);
            return response.data;
        });
    }
    // Send Message Function (Requires API Key)
    get sendMessageFunction() {
        return new game_1.GameFunction({
            name: "send_message",
            description: "Send a message to an Echochambers room",
            args: [
                { name: "room", description: "The room to send the message to" },
                { name: "content", description: "The message content" },
                { name: "reasoning", description: "The reasoning behind sending this message" }
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!args.room || !args.content) {
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Room and content are required");
                    }
                    logger(`Sending message to room ${args.room}`);
                    logger(`Message content: ${args.content}`);
                    logger(`Reasoning: ${args.reasoning}`);
                    const response = yield this.makeRequest(`/rooms/${args.room}/message`, 'POST', {
                        content: args.content,
                        sender: this.sender
                    });
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, `Message sent successfully: ${JSON.stringify(response)}`);
                }
                catch (error) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Failed to send message: ${error}`);
                }
            })
        });
    }
    // Get Room History Function (No API Key Required)
    get getRoomHistoryFunction() {
        return new game_1.GameFunction({
            name: "get_room_history",
            description: "Get message history from a specific room",
            args: [
                { name: "room", description: "The room to get history from" },
                { name: "limit", description: "Maximum number of messages to retrieve (default: 30)" }
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const limit = args.limit || 30;
                    logger(`Getting history for room ${args.room} (limit: ${limit})`);
                    const history = yield this.makeRequest(`/rooms/${args.room}/history?limit=${limit}`);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, JSON.stringify(history));
                }
                catch (error) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Failed to get room history: ${error}`);
                }
            })
        });
    }
    // Get Room Metrics Function (No API Key Required)
    get getRoomMetricsFunction() {
        return new game_1.GameFunction({
            name: "get_room_metrics",
            description: "Get metrics for a specific room",
            args: [
                { name: "room", description: "The room to get metrics for" }
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                try {
                    logger(`Getting metrics for room ${args.room}`);
                    const metrics = yield this.makeRequest(`/metrics/rooms/${args.room}`);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, JSON.stringify(metrics));
                }
                catch (error) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Failed to get room metrics: ${error}`);
                }
            })
        });
    }
    // Get Agent Metrics Function (No API Key Required)
    get getAgentMetricsFunction() {
        return new game_1.GameFunction({
            name: "get_agent_metrics",
            description: "Get metrics for all agents in a room",
            args: [
                { name: "room", description: "The room to get agent metrics for" }
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                try {
                    logger(`Getting agent metrics for room ${args.room}`);
                    const metrics = yield this.makeRequest(`/metrics/agents/${args.room}`);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, JSON.stringify(metrics));
                }
                catch (error) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Failed to get agent metrics: ${error}`);
                }
            })
        });
    }
    // Get Metrics History Function (No API Key Required)
    get getMetricsHistoryFunction() {
        return new game_1.GameFunction({
            name: "get_metrics_history",
            description: "Get metrics history for a room",
            args: [
                { name: "room", description: "The room to get metrics history for" }
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                try {
                    logger(`Getting metrics history for room ${args.room}`);
                    const history = yield this.makeRequest(`/metrics/history/${args.room}`);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, JSON.stringify(history));
                }
                catch (error) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Failed to get metrics history: ${error}`);
                }
            })
        });
    }
    getWorker(options) {
        // Create worker configuration
        const workerConfig = {
            id: this.id,
            name: this.name,
            description: this.description,
            functions: [
                this.sendMessageFunction,
                this.getRoomHistoryFunction,
                this.getRoomMetricsFunction,
                this.getAgentMetricsFunction,
                this.getMetricsHistoryFunction
            ],
            getEnvironment: (options === null || options === void 0 ? void 0 : options.getEnvironment) || (() => __awaiter(this, void 0, void 0, function* () {
                return ({
                    activeRoom: "general",
                    messagesSent: 0,
                    lastActivity: new Date().toISOString(),
                    metrics: {
                        totalMessagesSent: 0,
                        activeConversations: 0,
                        responseRate: 0,
                        averageResponseTime: 0
                    }
                });
            }))
        };
        // Create and return worker
        return new game_1.GameWorker(workerConfig);
    }
}
exports.default = EchochambersPlugin;
