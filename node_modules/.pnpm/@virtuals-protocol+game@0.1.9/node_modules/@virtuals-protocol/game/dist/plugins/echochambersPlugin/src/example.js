"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const echochambersPlugin_1 = __importDefault(require("./echochambersPlugin"));
// Create plugin instance with credentials
const echochambersPlugin = new echochambersPlugin_1.default({
    credentials: {
        apiKey: "your-api-key-here", // Replace with your API key
    },
    sender: {
        username: "Virtuals_Agent",
        model: "VirtualsLLM"
    }
});
// Create an agent with the worker
const agent = new game_1.GameAgent("API_KEY", {
    name: "Echochambers Bot",
    goal: "monitor room metrics and engage in conversations",
    description: "A bot that can monitor room metrics, retrieve history, and send messages",
    workers: [
        echochambersPlugin.getWorker({
        // Define the functions that the worker can perform, by default it will use all functions defined in the plugin
        // functions: [
        //   echochambersPlugin.sendMessageFunction,
        //   echochambersPlugin.getRoomHistoryFunction,
        //   echochambersPlugin.getRoomMetricsFunction,
        //   echochambersPlugin.getAgentMetricsFunction,
        //   echochambersPlugin.getMetricsHistoryFunction,
        // ],
        // Define the environment variables that the worker can access
        // getEnvironment: async () => ({
        //   activeRoom: "general",
        //   messagesSent: 0,
        //   lastActivity: new Date().toISOString(),
        //   metrics: {
        //     totalMessagesSent: 0,
        //     activeConversations: 0,
        //     responseRate: 0,
        //     averageResponseTime: 0
        //   }
        // }),
        }),
    ],
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    // Set up logging
    agent.setLogger((agent, message) => {
        const timestamp = new Date().toISOString();
        console.log(`\n-----[${timestamp}][${agent.name}]-----`);
        console.log(`Goal: ${agent.goal}`);
        console.log(`Message: ${message}\n`);
    });
    // Initialize the agent
    yield agent.init();
    // Run the agent continuously
    while (true) {
        yield agent.step({
            verbose: true,
        });
        // Optional: Add a delay between steps
        yield new Promise(resolve => setTimeout(resolve, 60000)); // 1 minute delay
    }
}))();
