"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const _1 = __importDefault(require("."));
const rss3Plugin = new _1.default({
    credentials: {
        apiKey: (_a = process.env.RSS3_API_KEY) !== null && _a !== void 0 ? _a : "", // RSS3 API Key is currently optional
    },
});
const agent = new game_1.GameAgent((_b = process.env.GAME_API_KEY) !== null && _b !== void 0 ? _b : "", {
    name: "RSS3 Worker",
    goal: "Retrieve account activities via the RSS3 Network.",
    description: `You are an AI agent with the ability to access real-time activities via the RSS3 Network. You take in a blockchain wallet address (beginning with 0x) or an ENS domain (ending with .eth) and retrieve the activities associated with the account.
  `,
    workers: [
        rss3Plugin.getWorker({
            functions: [
                rss3Plugin.getActivitiesFunction,
            ],
        }),
    ],
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    agent.setLogger((agent, message) => {
        console.log(`-----[${agent.name}]-----`);
        console.log(message);
        console.log("\n");
    });
    yield agent.init();
    while (true) {
        yield agent.step({
            verbose: true,
        });
    }
}))();
