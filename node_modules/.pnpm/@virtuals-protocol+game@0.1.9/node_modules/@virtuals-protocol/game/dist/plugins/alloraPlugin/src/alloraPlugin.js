"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_BASE_API_URL = exports.DEFAULT_API_KEY = void 0;
const allora_sdk_1 = require("@alloralabs/allora-sdk");
const game_1 = require("@virtuals-protocol/game");
exports.DEFAULT_API_KEY = "UP-17f415babba7482cb4b446a1";
exports.DEFAULT_BASE_API_URL = "https://api.allora.network/v2";
class AlloraPlugin {
    constructor(options) {
        var _a, _b, _c;
        this.id = options.id || "allora_worker";
        this.name = options.name || "Allora Worker";
        this.description =
            options.description ||
                "Worker that interacts with the Allora Network for retrieving price inferences and inferences from the active topics on the network.";
        this.alloraApiClient = new allora_sdk_1.AlloraAPIClient({
            chainSlug: (_a = options.apiClientConfig.chainSlug) !== null && _a !== void 0 ? _a : allora_sdk_1.ChainSlug.TESTNET,
            apiKey: (_b = options.apiClientConfig.apiKey) !== null && _b !== void 0 ? _b : exports.DEFAULT_API_KEY,
            baseAPIUrl: (_c = options.apiClientConfig.baseApiUrl) !== null && _c !== void 0 ? _c : exports.DEFAULT_BASE_API_URL,
        });
    }
    getWorker(data) {
        return new game_1.GameWorker({
            id: this.id,
            name: this.name,
            description: this.description,
            functions: (data === null || data === void 0 ? void 0 : data.functions) || [
                this.getAllTopics,
                this.getInferenceByTopicId,
                this.getPriceInference,
            ],
            getEnvironment: data === null || data === void 0 ? void 0 : data.getEnvironment,
        });
    }
    get getAllTopics() {
        return new game_1.GameFunction({
            name: "get_all_topics",
            description: "Get all the topics available on Allora Network.",
            args: [],
            hint: "This function will return all the topics available on Allora Network.",
            executable: (_, logger) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const topics = yield this.alloraApiClient.getAllTopics();
                    const successMessage = `Successfully retrieved all topics from Allora Network. The topics available on Allora Network are:\n ${JSON.stringify(topics, null, 2)}`;
                    logger(successMessage);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, successMessage);
                }
                catch (e) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `An error occurred while fetching Allora Network topics: ${e.message || "Unknown error"}`);
                }
            }),
        });
    }
    get getInferenceByTopicId() {
        return new game_1.GameFunction({
            name: "get_inference_by_topic_id",
            description: "Fetches an inference from Allora Network given a topic id.",
            args: [
                {
                    name: "topicId",
                    description: "The topic_id corresponds to the unique id of one of the active topics on Allora Network",
                    type: "number",
                },
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                if (!args.topicId) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Topic id is required");
                }
                try {
                    const inferenceRes = yield this.alloraApiClient.getInferenceByTopicID(Number(args.topicId));
                    const inferenceValue = inferenceRes.inference_data.network_inference_normalized;
                    const message = `Successfully retrieved inference for topic with id ${args.topicId}. The inference is: ${inferenceValue}`;
                    logger(message);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, message);
                }
                catch (e) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `An error occurred while fetching inference from Allora Network: ${e.message || "Unknown error"}`);
                }
            }),
        });
    }
    get getPriceInference() {
        return new game_1.GameFunction({
            name: "get_price_inference",
            description: "Fetches from Allora Network the future price inference for a given crypto asset and timeframe.",
            args: [
                { name: "asset", description: "The crypto asset symbol to get the price inference for. Example: BTC, ETH, SOL, SHIB, etc." },
                {
                    name: "timeframe",
                    description: "The timeframe to get the price inference for. Example: 5m, 8h etc.",
                },
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                try {
                    const asset = (_a = args.asset) === null || _a === void 0 ? void 0 : _a.toUpperCase();
                    const timeframe = (_b = args.timeframe) === null || _b === void 0 ? void 0 : _b.toLowerCase();
                    if (!asset) {
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Asset is required");
                    }
                    const supportedTokens = Object.values(allora_sdk_1.PriceInferenceToken);
                    if (!supportedTokens.includes(asset)) {
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Asset ${args.asset} is not supported. Supported assets are: ${supportedTokens.join(", ")}`);
                    }
                    if (!timeframe) {
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Timeframe is required");
                    }
                    const supportedTimeframes = Object.values(allora_sdk_1.PriceInferenceTimeframe);
                    if (!supportedTimeframes.includes(args.timeframe)) {
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Timeframe ${args.timeframe} is not supported. Supported timeframes are: ${supportedTimeframes.join(", ")}`);
                    }
                    logger(`Fetching price inference for ${asset} on Allora Network for ${timeframe} timeframe`);
                    const inference = yield this.alloraApiClient.getPriceInference(asset, timeframe);
                    const message = `The price inference for ${asset} in ${timeframe} is: ${inference.inference_data.network_inference_normalized}`;
                    logger(message);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, message);
                }
                catch (e) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `An error occurred while fetching ${args.asset} ${args.timeframe} price inference from Allora Network: ${e.message || "Unknown error"}`);
                }
            }),
        });
    }
}
exports.default = AlloraPlugin;
