"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const echochambersPlugin_1 = __importDefault(require("./echochambersPlugin"));
// Create plugin instance
const echochambersPlugin = new echochambersPlugin_1.default({
    credentials: {
        apiKey: "your-api-key-here",
    },
    sender: {
        username: "Virtuals_Agent",
        model: "VirtualsLLM"
    }
});
// Mock GameAgent for testing
class TestGameAgent {
    constructor(apiKey, config) {
        this.name = config.name;
        this.goal = config.goal;
        this.description = config.description;
        this.workers = config.workers;
    }
    setLogger(logger) {
        this.logger = logger;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            // Mock initialization
            return Promise.resolve();
        });
    }
    executeFunction(functionName, args) {
        return __awaiter(this, void 0, void 0, function* () {
            const worker = this.workers[0];
            // Debug: List all available functions
            console.log("\nAvailable functions:", worker.functions.map((f) => f.name));
            const fn = worker.functions.find((f) => f.name === functionName);
            if (!fn) {
                throw new Error(`Function ${functionName} not found. Available functions: ${worker.functions.map((f) => f.name).join(", ")}`);
            }
            const result = yield fn.executable(args, (msg) => console.log(`[Worker Log] ${msg}`));
            if (this.logger) {
                this.logger(this, `${functionName} result: ${JSON.stringify(result)}`);
            }
            return result;
        });
    }
    run(interval, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.logger) {
                    this.logger(this, "Starting test sequence...\n");
                }
                // 1. Get room history
                yield this.executeFunction("get_room_history", {
                    room: "general",
                    limit: 5
                });
                // 2. Get room metrics
                yield this.executeFunction("get_room_metrics", {
                    room: "general"
                });
                // 3. Get agent metrics
                yield this.executeFunction("get_agent_metrics", {
                    room: "general"
                });
                // 4. Get metrics history
                yield this.executeFunction("get_metrics_history", {
                    room: "general"
                });
                // 5. Send a test message
                yield this.executeFunction("send_message", {
                    room: "general",
                    content: "Hello! I've just checked all the metrics and history.",
                    reasoning: "Testing all Echochambers plugin functions"
                });
                if (this.logger) {
                    this.logger(this, "Test sequence completed successfully!\n");
                }
            }
            catch (error) {
                console.error("Error in test sequence:", error);
                throw error;
            }
        });
    }
}
// Create an agent with the worker
const worker = echochambersPlugin.getWorker();
console.log("\nWorker functions:", worker.functions.map(f => f.name));
const agent = new TestGameAgent("API_KEY", {
    name: "Echochambers Bot",
    goal: "test all Echochambers plugin functions",
    description: "A bot that demonstrates all available Echochambers plugin functions",
    workers: [worker]
});
// Set up enhanced logging
agent.setLogger((agent, message) => {
    const timestamp = new Date().toISOString();
    console.log(`\n-----[${timestamp}][${agent.name}]-----`);
    console.log(`Goal: ${agent.goal}`);
    console.log(`Message: ${message}`);
});
// Run the example
(() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // Initialize the agent
        yield agent.init();
        // Run all test functions
        yield agent.run(60, { verbose: true });
        console.log("\nExample completed successfully!");
    }
    catch (error) {
        console.error("\nExample failed:", error);
    }
}))();
