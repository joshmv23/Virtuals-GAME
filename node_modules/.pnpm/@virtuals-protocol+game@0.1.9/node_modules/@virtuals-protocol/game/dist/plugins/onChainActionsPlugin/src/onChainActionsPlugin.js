"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOnChainActionsWorker = getOnChainActionsWorker;
const game_1 = require("@virtuals-protocol/game");
const core_1 = require("@goat-sdk/core");
const zod_to_json_schema_1 = require("zod-to-json-schema");
function getOnChainActionsWorker(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const tools = yield (0, core_1.getTools)({
            wallet: params.wallet,
            plugins: params.plugins,
        });
        const workerFunctions = tools.map((tool) => {
            // biome-ignore lint/suspicious/noExplicitAny: Fix types later
            const schema = (0, zod_to_json_schema_1.zodToJsonSchema)(tool.parameters, {
                target: "jsonSchema7",
            });
            const properties = Object.keys(schema.properties);
            const args = properties.map((property) => {
                var _a;
                return ({
                    name: property,
                    description: (_a = schema.properties[property].description) !== null && _a !== void 0 ? _a : "",
                });
            });
            return new game_1.GameFunction({
                name: tool.name,
                description: tool.description,
                args: args,
                executable: (args) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const result = yield tool.execute(args);
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, JSON.stringify(result));
                    }
                    catch (e) {
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, `Failed to execute tool: ${e}`);
                    }
                }),
            });
        });
        return new game_1.GameWorker({
            id: "onchain_actions_worker",
            name: "Onchain Actions Worker",
            description: "Worker that executes onchain actions such as swaps, transfers, etc.",
            functions: [...workerFunctions],
        });
    });
}
