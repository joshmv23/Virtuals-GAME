"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const game_twitter_plugin_1 = __importStar(require("@virtuals-protocol/game-twitter-plugin"));
const gameTwitterClient = new game_twitter_plugin_1.GameTwitterClient({
    accessToken: "xxxxxxxxxx",
});
const nativeTwitterClient = new game_twitter_plugin_1.TwitterClient({
    apiKey: "xxxxxxx",
    apiSecretKey: "xxxxxxx",
    accessToken: "xxxxxxx",
    accessTokenSecret: "xxxxxxxxx",
});
// Create a worker with the functions
const twitterPlugin = new game_twitter_plugin_1.default({
    id: "twitter_worker",
    name: "Twitter Worker",
    description: "A worker that will execute tasks within the Twitter Social Platforms. It is capable of posting, reply, quote and like tweets.",
    // twitterClient: nativeTwitterClient,
    twitterClient: gameTwitterClient, // Use this if you want to use the game client
});
// Create an agent with the worker
const agent = new game_1.GameAgent("<GAME_API_KEY>", {
    name: "Twitter Bot",
    goal: "increase engagement and grow follower count",
    description: "A bot that can post tweets, reply to tweets, and like tweets",
    workers: [
        twitterPlugin.getWorker({
        // Define the functions that the worker can perform, by default it will use the all functions defined in the plugin
        // functions: [
        //   twitterPlugin.searchTweetsFunction,
        //   twitterPlugin.replyTweetFunction,
        //   twitterPlugin.postTweetFunction,
        // ],
        // Define the environment variables that the worker can access, by default it will use the metrics defined in the plugin
        // getEnvironment: async () => ({
        //   ...(await twitterPlugin.getMetrics()),
        //   username: "virtualsprotocol",
        //   token_price: "$100.00",
        // }),
        }),
    ],
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    agent.setLogger((agent, message) => {
        console.log(`-----[${agent.name}]-----`);
        console.log(message);
        console.log("\n");
    });
    yield agent.init();
    while (true) {
        yield agent.step({
            verbose: true,
        });
    }
}))();
