"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const agent = new game_1.GameAgent("apt-b648dc3ee5346e958d978b6be37b3d2a", {
    name: "Twitter Bot",
    goal: "increase engagement and grow follower count",
    description: "A bot that can post tweets, reply to tweets, and like tweets",
    workers: [
        new game_1.GameWorker({
            id: "apt-1",
            name: "Post Tweet",
            description: "Post a tweet to the account",
            functions: [
                new game_1.GameFunction({
                    name: "Post Tweet",
                    description: "Post a tweet to the account",
                    args: [],
                    executable: (args, logger) => __awaiter(void 0, void 0, void 0, function* () {
                        logger("Posting tweet...");
                        return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, "Tweet posted successfully");
                    }),
                }),
            ],
        }),
    ],
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    agent.setLogger((agent, message) => {
        console.log(`-----[${agent.name}]-----`);
        console.log(message);
        console.log("\n");
    });
    yield agent.init();
    yield agent.step({
        verbose: true,
    });
}))();
