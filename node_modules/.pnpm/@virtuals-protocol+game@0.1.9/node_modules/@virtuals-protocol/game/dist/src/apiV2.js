"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class GameClientV2 {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.baseUrl = "http://localhost:3001/v2";
        this.client = axios_1.default.create({
            baseURL: this.baseUrl,
            headers: {
                "Content-Type": "application/json",
                "x-api-key": this.apiKey,
            },
        });
    }
    createMap(workers) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Creating map with workers");
            let result;
            try {
                result = yield this.client.post("/maps", {
                    data: {
                        locations: workers.map((worker) => ({
                            id: worker.id,
                            name: worker.name,
                            description: worker.description,
                        })),
                    },
                });
            }
            catch (error) {
                console.error("Error creating map", error);
                throw error;
            }
            console.log("Map created", result.data);
            return result.data.data;
        });
    }
    createAgent(name, goal, description) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("Creating agent");
            const result = yield this.client.post("/agents", {
                data: {
                    name,
                    goal,
                    description,
                },
            });
            console.log("agent created", result.data);
            return result.data.data;
        });
    }
    getAction(agentId, mapId, worker, gameActionResult, environment, agentState) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                location: worker.id,
                map_id: mapId,
                environment: environment,
                functions: worker.functions.map((fn) => fn.toJSON()),
                agent_state: agentState,
                version: "v2",
            };
            if (gameActionResult) {
                payload.current_action = gameActionResult;
            }
            const result = yield this.client.post(`/agents/${agentId}/actions`, {
                data: payload,
            });
            return result.data.data;
        });
    }
    setTask(agentId, task) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.client.post(`/agents/${agentId}/tasks`, {
                data: { task },
            });
            return result.data.data.submission_id;
        });
    }
    getTaskAction(agentId, submissionId, worker, gameActionResult, environment) {
        return __awaiter(this, void 0, void 0, function* () {
            const payload = {
                environment: environment,
                functions: worker.functions.map((fn) => fn.toJSON()),
            };
            if (gameActionResult) {
                payload.action_result = gameActionResult;
            }
            const result = yield this.client.post(`/agents/${agentId}/tasks/${submissionId}/next`, {
                data: payload,
            });
            return result.data.data;
        });
    }
}
exports.default = GameClientV2;
