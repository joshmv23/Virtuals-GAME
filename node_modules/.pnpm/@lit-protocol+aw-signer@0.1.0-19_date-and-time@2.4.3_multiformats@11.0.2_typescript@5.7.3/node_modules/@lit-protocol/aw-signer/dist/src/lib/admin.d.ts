import { AUTH_METHOD_SCOPE_VALUES } from '@lit-protocol/constants';
import { ethers } from 'ethers';
import { AdminConfig, AgentConfig, LitNetwork, PkpInfo, ToolInfoWithDelegateePolicy } from './types';
/**
 * The `Admin` class is responsible for the ownership of the PKP (Programmable Key Pair),
 * the registration and management of tools, policies, and delegatees.
 */
export declare class Admin {
    private static readonly DEFAULT_STORAGE_PATH;
    private static readonly ADMIN_STORAGE_KEY;
    private readonly storage;
    private readonly litNodeClient;
    private readonly litContracts;
    private readonly toolRegistryContract;
    private readonly adminWallet;
    readonly litNetwork: LitNetwork;
    /**
     * Private constructor for the Admin class.
     * @param litNetwork - The Lit network to use.
     * @param litNodeClient - An instance of `LitNodeClientNodeJs`.
     * @param litContracts - An instance of `LitContracts`.
     * @param toolRegistryContract - An instance of the tool policy registry contract.
     * @param adminWallet - The wallet used for Admin operations.
     * @param pkpInfo - Information about the PKP (Programmable Key Pair).
     */
    private constructor();
    private static loadAdminsFromStorage;
    private static saveAdminsToStorage;
    private static loadPkpsFromStorage;
    private static savePkpsToStorage;
    private static removePkpFromStorage;
    private static mintPkp;
    /**
     * Creates an instance of the `Admin` class.
     * Initializes the Lit node client, contracts, and PKP.
     *
     * @param adminConfig - Configuration for the Admin role.
     * @param agentConfig - Configuration for the agent, including the Lit network and debug mode.
     * @returns A promise that resolves to an instance of the `Admin` class.
     * @throws {AwSignerError} If the Lit network is not provided or the private key is missing.
     */
    static create(adminConfig: AdminConfig, { litNetwork, debug }?: AgentConfig): Promise<Admin>;
    /**
     * Retrieves all PKPs stored in the Admin's (local) storage.
     * @returns An array of PKP metadata.
     */
    getPkps(): Promise<PkpInfo[]>;
    /**
     * Retrieves a PKP by its token ID.
     * @param tokenId - The token ID of the PKP.
     * @returns A promise that resolves to the PKP metadata.
     * @throws If the PKP is not found in storage.
     */
    getPkpByTokenId(tokenId: string): Promise<PkpInfo>;
    /**
     * Mints a new PKP and saves the metadata to the Admin's (local) storage.
     * @returns A promise that resolves to the minted PKP metadata.
     * @throws If the PKP minting fails.
     */
    mintPkp(): Promise<PkpInfo>;
    /**
     * Transfers ownership of the PKP to a new owner.
     * @param newOwner - The address of the new owner.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the Admin instance is not properly initialized.
     */
    transferPkpOwnership(pkpTokenId: string, newOwner: string): Promise<ethers.ContractReceipt>;
    /**
     * Allows a tool to be used with the PKP.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param signingScopes - The signing scopes for the tool (default is `SignAnything`).
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the Admin instance is not properly initialized.
     */
    registerTool(pkpTokenId: string, ipfsCid: string, options?: {
        signingScopes?: AUTH_METHOD_SCOPE_VALUES[];
        enableTools?: boolean;
    }): Promise<{
        litContractsTxReceipt: ethers.ContractReceipt;
        toolRegistryContractTxReceipt: any;
    }>;
    /**
     * Removes a tool from the list of a PKP's permitted tools.
     * @param ipfsCid - The IPFS CID of the tool.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the Admin instance is not properly initialized.
     */
    removeTool(pkpTokenId: string, ipfsCid: string): Promise<{
        revokePermittedActionTxReceipt: ethers.ContractReceipt;
        removeToolsTxReceipt: any;
    }>;
    /**
     * Enables a tool for a given PKP.
     * @param pkpTokenId - The token ID of the PKP.
     * @param toolIpfsCid - The IPFS CID of the tool to be enabled.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    enableTool(pkpTokenId: string, toolIpfsCid: string): Promise<any>;
    /**
     * Disables a tool for a given PKP.
     * @param pkpTokenId - The token ID of the PKP.
     * @param toolIpfsCid - The IPFS CID of the tool to be disabled.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    disableTool(pkpTokenId: string, toolIpfsCid: string): Promise<any>;
    /**
     * Checks if a tool is registered for a given PKP.
     * @param pkpTokenId - The token ID of the PKP.
     * @param toolIpfsCid - The IPFS CID of the tool to be checked.
     * @returns A promise that resolves to an object containing:
     * - isRegistered: boolean indicating if the tool is registered
     * - isEnabled: boolean indicating if the tool is enabled
     * @throws If the tool policy registry contract is not initialized.
     */
    isToolRegistered(pkpTokenId: string, toolIpfsCid: string): Promise<{
        isRegistered: any;
        isEnabled: any;
    }>;
    /**
     * Get a registered tool by its IPFS CID for a given PKP.
     * @param pkpTokenId - The token ID of the PKP.
     * @param toolIpfsCid - The IPFS CID of the tool to be retrieved.
     * @returns A promise that resolves to the tool information.
     * @throws If the tool policy registry contract is not initialized.
     */
    getRegisteredTool(pkpTokenId: string, toolIpfsCid: string): Promise<any>;
    /**
     * Get all registered tools and categorize them based on whether they have policies
     * @returns Object containing
     * - toolsWithPolicies: Object mapping tool IPFS CIDs to their metadata and delegatee policies
     * - toolsWithoutPolicies: Object mapping tool IPFS CIDs to their metadata without policies
     * - toolsUnknownWithPolicies: Object mapping unknown tool IPFS CIDs to their delegatee policies
     * - toolsUnknownWithoutPolicies: Array of tool CIDs without policies that aren't in the registry
     */
    getRegisteredToolsAndDelegateesForPkp(pkpTokenId: string): Promise<import("./types").RegisteredToolsResult>;
    /**
     * Retrieves all delegatees for the PKP.
     * @returns An array of delegatee addresses.
     * @throws If the tool policy registry contract is not initialized.
     */
    getDelegatees(pkpTokenId: string): Promise<string[]>;
    /**
     * Checks if an address is a delegatee for the PKP.
     * @param delegatee - The address to check.
     * @returns A promise that resolves to a boolean indicating whether the address is a delegatee.
     * @throws If the tool policy registry contract is not initialized.
     */
    isDelegatee(pkpTokenId: string, delegatee: string): Promise<any>;
    /**
     * Adds a delegatee for the PKP.
     * @param delegatee - The address to add as a delegatee.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    addDelegatee(pkpTokenId: string, delegatee: string): Promise<any>;
    /**
     * Removes a delegatee for the PKP.
     * @param pkpTokenId - The PKP token ID.
     * @param delegatee - The address of the delegatee to remove.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    removeDelegatee(pkpTokenId: string, delegatee: string): Promise<any>;
    /**
     * Checks if a tool is permitted for a specific delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param toolIpfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to an object containing isPermitted and isEnabled.
     * @throws If the tool policy registry contract is not initialized.
     */
    isToolPermittedForDelegatee(pkpTokenId: string, toolIpfsCid: string, delegatee: string): Promise<{
        isPermitted: any;
        isEnabled: any;
    }>;
    /**
     * Gets all tools that are permitted for a specific delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to an array of ToolInfoWithDelegateePolicy objects permitted for the delegatee.
     * @throws If the tool policy registry contract is not initialized.
     */
    getPermittedToolsForDelegatee(pkpTokenId: string, delegatee: string): Promise<ToolInfoWithDelegateePolicy[]>;
    /**
     * Permits a tool for a specific delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param toolIpfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    permitToolForDelegatee(pkpTokenId: string, toolIpfsCid: string, delegatee: string): Promise<any>;
    /**
     * Unpermits a tool for a specific delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param toolIpfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    unpermitToolForDelegatee(pkpTokenId: string, toolIpfsCid: string, delegatee: string): Promise<any>;
    /**
     * Retrieves the policy for a specific tool and delegatee.
     * @param pkpTokenId - The token ID of the PKP.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns An object containing the policy IPFS CID and enabled status for the tool.
     * @throws If the tool policy registry contract is not initialized.
     */
    getToolPolicyForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string): Promise<{
        policyIpfsCid: string;
        enabled: boolean;
    }>;
    /**
     * Sets or updates a policy for a specific tool and delegatee.
     * @param pkpTokenId - The token ID of the PKP.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @param policyIpfsCid - The IPFS CID of the policy to be set.
     * @param enablePolicies - Whether to enable the policy after setting it.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    setToolPolicyForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string, policyIpfsCid: string, enablePolicies: boolean): Promise<any>;
    /**
     * Removes a policy for a specific tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    removeToolPolicyForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string): Promise<any>;
    /**
     * Enables a policy for a specific tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    enableToolPolicyForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string): Promise<any>;
    /**
     * Disables a policy for a specific tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    disableToolPolicyForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string): Promise<any>;
    /**
     * Retrieves a specific policy parameter for a tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @param parameterName - The name of the policy parameter.
     * @returns A promise that resolves to the policy parameter value.
     * @throws If the tool policy registry contract is not initialized.
     */
    getToolPolicyParameterForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string, parameterName: string): Promise<{
        name: string;
        value: string;
    }[]>;
    /**
     * Retrieves multiple policy parameters for a tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @param parameterNames - An array of policy parameter names.
     * @returns A promise that resolves to an array of tuples containing policy parameter names and values.
     * @throws If the tool policy registry contract is not initialized.
     */
    getToolPolicyParametersForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string, parameterNames: string[]): Promise<{
        name: string;
        value: string;
    }[]>;
    /**
     * Retrieves all policy parameters for a tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @returns A promise that resolves to an array of all policy parameter names and values.
     * @throws If the tool policy registry contract is not initialized.
     */
    getAllToolPolicyParametersForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string): Promise<any>;
    /**
     * Sets multiple policy parameters for a tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @param parameterNames - An array of policy parameter names.
     * @param parameterValues - An array of policy parameter values.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    setToolPolicyParametersForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string, parameterNames: string[], parameterValues: any[]): Promise<any>;
    /**
     * Removes multiple policy parameters for a tool and delegatee.
     * @param pkpTokenId - The PKP token ID.
     * @param ipfsCid - The IPFS CID of the tool.
     * @param delegatee - The address of the delegatee.
     * @param parameterNames - An array of policy parameter names to remove.
     * @returns A promise that resolves to the transaction receipt.
     * @throws If the tool policy registry contract is not initialized.
     */
    removeToolPolicyParametersForDelegatee(pkpTokenId: string, ipfsCid: string, delegatee: string, parameterNames: string[]): Promise<any>;
    /**
     * Disconnects the Lit node client.
     */
    disconnect(): void;
}
//# sourceMappingURL=admin.d.ts.map