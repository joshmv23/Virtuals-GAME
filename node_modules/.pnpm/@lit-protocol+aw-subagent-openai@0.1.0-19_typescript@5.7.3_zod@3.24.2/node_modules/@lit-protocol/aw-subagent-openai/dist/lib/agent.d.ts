import type { IntentMatcher, IntentMatcherResponse } from '@lit-protocol/aw-signer';
import type { AwTool } from '@lit-protocol/aw-tool';
/**
 * A class that implements the `IntentMatcher` interface to match intents using OpenAI's API.
 * This class is responsible for analyzing an intent, matching it to a registered tool,
 * and parsing the required parameters for the matched tool.
 */
export declare class OpenAiIntentMatcher implements IntentMatcher {
    /** The name of the intent matcher. */
    static readonly name = "OpenAI Intent Matcher";
    /** The required credential names for this intent matcher. */
    static readonly requiredCredentialNames: readonly ["openAiApiKey"];
    /** The OpenAI client instance. */
    private openai;
    /** The model to be used for intent analysis. */
    private model;
    /**
     * Constructs an instance of the `OpenAiIntentMatcher`.
     *
     * @param {string} apiKey - The API key for the OpenAI client.
     * @param {string} [model='gpt-4o-mini'] - The model to be used for intent analysis. Defaults to 'gpt-4o-mini'.
     */
    constructor(apiKey: string, model?: string);
    /**
     * Analyzes the provided intent and matches it to a registered tool.
     * If a tool is matched, it also parses the required parameters from the intent.
     *
     * @param {string} intent - The intent to be analyzed.
     * @param {AwTool<any, any>[]} registeredTools - An array of registered tools to match against the intent.
     * @returns {Promise<IntentMatcherResponse<any>>} - A promise that resolves to an object containing the analysis, matched tool, and parameters.
     * @throws {Error} - Throws an error if the OpenAI client is not initialized.
     */
    analyzeIntentAndMatchTool(intent: string, registeredTools: AwTool<any, any>[]): Promise<IntentMatcherResponse<any>>;
}
//# sourceMappingURL=agent.d.ts.map