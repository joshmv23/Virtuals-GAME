"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Enso = void 0;
const zod_1 = require("zod");
const aw_tool_1 = require("@lit-protocol/aw-tool");
const policy_1 = require("./policy");
const ipfs_1 = require("./ipfs");
/**
 * Zod schema for validating `EnsoLitActionParameters`.
 */
const EnsoLitActionSchema = zod_1.z.object({
    pkpEthAddress: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, 'Must be a valid Ethereum address (0x followed by 40 hexadecimal characters)'),
    tokenIn: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, 'Must be a valid Ethereum contract address (0x followed by 40 hexadecimal characters)'),
    tokenOut: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, 'Must be a valid Ethereum contract address (0x followed by 40 hexadecimal characters)'),
    amountIn: zod_1.z
        .string()
        .regex(/^\d*\.?\d+$/, 'Must be a valid decimal number as a string (e.g. "1.5" or "100")'),
    chainId: zod_1.z
        .string()
        .regex(/^\d+$/, 'Must be a valid chain ID number as a string'),
    rpcUrl: zod_1.z
        .string()
        .url()
        .startsWith('https://', 'Must be a valid HTTPS URL for the blockchain RPC endpoint'),
});
/**
 * Descriptions of each parameter for the Enso Lit Action.
 * These descriptions are designed to be consumed by LLMs (Language Learning Models) to understand the required parameters.
 */
const EnsoLitActionParameterDescriptions = {
    pkpEthAddress: 'The Ethereum address of the PKP that will be used to perform the action.',
    tokenIn: 'The Ethereum contract address of the ERC20 token you want to route away from. Must be a valid Ethereum address starting with 0x.',
    tokenOut: 'The Ethereum contract address of the ERC20 token you want to route to. Must be a valid Ethereum address starting with 0x.',
    amountIn: 'The amount of tokens to send, specified as a string. This should be a decimal number (e.g. "1.5" or "100"). The amount will be automatically adjusted based on the token\'s decimals.',
    chainId: 'The ID of the blockchain network to send the tokens on (e.g. 1 for Ethereum mainnet, 84532 for Base Sepolia).',
    rpcUrl: 'The RPC URL of the blockchain network to connect to (e.g. "https://base-sepolia-rpc.publicnode.com").',
};
/**
 * Validates the parameters for the Enso Lit Action.
 * @param params - The parameters to validate.
 * @returns {true | Array<{ param: string; error: string }>} - Returns `true` if valid, otherwise an array of errors.
 */
const validateEnsoParameters = (params) => {
    const result = EnsoLitActionSchema.safeParse(params);
    if (result.success) {
        return true;
    }
    // Map validation errors to a more user-friendly format
    return result.error.issues.map((issue) => ({
        param: issue.path[0],
        error: issue.message,
    }));
};
/**
 * Creates a network-specific Enso tool.
 * @param network - The supported Lit network (e.g., `datil-dev`, `datil-test`, `datil`).
 * @param config - The network configuration.
 * @returns A configured `AwTool` instance for the Enso Lit Action.
 */
const createNetworkTool = (network, config) => ({
    name: 'Enso',
    description: `Enso Tool`,
    ipfsCid: ipfs_1.IPFS_CIDS[network].tool,
    defaultPolicyIpfsCid: ipfs_1.IPFS_CIDS[network].defaultPolicy,
    parameters: {
        type: {},
        schema: EnsoLitActionSchema,
        descriptions: EnsoLitActionParameterDescriptions,
        validate: validateEnsoParameters,
    },
    policy: policy_1.EnsoPolicy,
});
/**
 * Exports network-specific Enso tools.
 * Each tool is configured for a specific Lit network (e.g., `datil-dev`, `datil-test`, `datil`).
 */
exports.Enso = Object.entries(aw_tool_1.NETWORK_CONFIGS).reduce((acc, [network, config]) => ({
    ...acc,
    [network]: createNetworkTool(network, config),
}), {});
