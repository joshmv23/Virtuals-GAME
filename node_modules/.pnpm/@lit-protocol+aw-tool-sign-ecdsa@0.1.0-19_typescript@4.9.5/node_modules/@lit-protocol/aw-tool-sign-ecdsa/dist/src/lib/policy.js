"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignEcdsaPolicy = void 0;
const zod_1 = require("zod");
const ethers_1 = require("ethers");
/**
 * Schema for validating a SignEcdsa policy.
 * Ensures the policy has the correct structure and valid values.
 */
const policySchema = zod_1.z.object({
    /** The type of policy, must be `SignEcdsa`. */
    type: zod_1.z.literal('SignEcdsa'),
    /** The version of the policy. */
    version: zod_1.z.string(),
    /** An array of allowed message prefixes. */
    allowedPrefixes: zod_1.z.array(zod_1.z.string()),
});
/**
 * Encodes a SignEcdsa policy into a format suitable for on-chain storage.
 * @param policy - The SignEcdsa policy to encode.
 * @returns The encoded policy as a hex string.
 * @throws If the policy does not conform to the schema.
 */
function encodePolicy(policy) {
    // Validate the policy against the schema
    policySchema.parse(policy);
    // Encode the policy using ABI encoding
    return ethers_1.ethers.utils.defaultAbiCoder.encode(['tuple(string[] allowedPrefixes)'], [
        {
            allowedPrefixes: policy.allowedPrefixes,
        },
    ]);
}
/**
 * Decodes a SignEcdsa policy from its on-chain encoded format.
 * @param encodedPolicy - The encoded policy as a hex string.
 * @returns The decoded SignEcdsa policy.
 * @throws If the encoded policy is invalid or does not conform to the schema.
 */
function decodePolicy(encodedPolicy) {
    // Decode the policy using ABI decoding
    const decoded = ethers_1.ethers.utils.defaultAbiCoder.decode(['tuple(string[] allowedPrefixes)'], encodedPolicy)[0];
    // Construct the policy object
    const policy = {
        type: 'SignEcdsa',
        version: '1.0.0',
        allowedPrefixes: decoded.allowedPrefixes,
    };
    // Validate the decoded policy against the schema
    return policySchema.parse(policy);
}
/**
 * Utility object for working with SignEcdsa policies.
 * Includes the schema, encoding, and decoding functions.
 */
exports.SignEcdsaPolicy = {
    /** The type of the policy. */
    type: {},
    /** The version of the policy. */
    version: '1.0.0',
    /** The schema for validating SignEcdsa policies. */
    schema: policySchema,
    /** Encodes a SignEcdsa policy into a format suitable for on-chain storage. */
    encode: encodePolicy,
    /** Decodes a SignEcdsa policy from its on-chain encoded format. */
    decode: decodePolicy,
};
