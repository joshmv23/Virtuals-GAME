"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniswapSwapPolicy = void 0;
const aw_tool_1 = require("@lit-protocol/aw-tool");
const zod_1 = require("zod");
const ethers_1 = require("ethers");
/**
 * Zod schema for validating a UniswapSwap policy.
 * @type {z.ZodObject}
 */
const policySchema = zod_1.z.object({
    type: zod_1.z.literal('UniswapSwap'), // Policy type must be 'UniswapSwap'
    version: zod_1.z.string(), // Version of the policy
    maxAmount: zod_1.z.string().refine((val) => {
        try {
            const bn = ethers_1.ethers.BigNumber.from(val);
            return !bn.isNegative(); // Ensure the amount is non-negative
        }
        catch {
            return false; // Invalid format
        }
    }, { message: 'Invalid amount format. Must be a non-negative integer.' }),
    allowedTokens: zod_1.z.array(aw_tool_1.BaseEthereumAddressSchema), // Array of allowed token addresses
});
/**
 * Encodes a UniswapSwap policy into a packed ABI-encoded string.
 * @param {UniswapSwapPolicyType} policy - The policy to encode.
 * @returns {string} ABI-encoded string representing the policy.
 * @throws {z.ZodError} If the policy does not match the schema.
 */
function encodePolicy(policy) {
    // Validate the policy against the schema
    policySchema.parse(policy);
    // Encode the policy using ABI encoding
    return ethers_1.ethers.utils.defaultAbiCoder.encode(['tuple(uint256 maxAmount, address[] allowedTokens)'], [
        {
            maxAmount: policy.maxAmount,
            allowedTokens: policy.allowedTokens,
        },
    ]);
}
/**
 * Decodes an ABI-encoded string into a UniswapSwap policy.
 * @param {string} encodedPolicy - The ABI-encoded policy string.
 * @returns {UniswapSwapPolicyType} The decoded policy object.
 * @throws {z.ZodError} If the decoded policy does not match the schema.
 */
function decodePolicy(encodedPolicy) {
    // Decode the ABI-encoded string
    const decoded = ethers_1.ethers.utils.defaultAbiCoder.decode(['tuple(uint256 maxAmount, address[] allowedTokens)'], encodedPolicy)[0];
    // Construct the policy object
    const policy = {
        type: 'UniswapSwap',
        version: '1.0.0',
        maxAmount: decoded.maxAmount.toString(),
        allowedTokens: decoded.allowedTokens,
    };
    // Validate the decoded policy against the schema
    return policySchema.parse(policy);
}
/**
 * Utility object for working with UniswapSwap policies.
 * @type {object}
 * @property {UniswapSwapPolicyType} type - Type placeholder for the policy.
 * @property {string} version - Version of the policy schema.
 * @property {z.ZodObject} schema - Zod schema for validating policies.
 * @property {function} encode - Function to encode a policy into an ABI-encoded string.
 * @property {function} decode - Function to decode an ABI-encoded string into a policy.
 */
exports.UniswapSwapPolicy = {
    type: {}, // Placeholder for the policy type
    version: '1.0.0', // Version of the policy schema
    schema: policySchema, // Zod schema for validation
    encode: encodePolicy, // Function to encode a policy
    decode: decodePolicy, // Function to decode a policy
};
