import { z } from 'zod';
/**
 * Zod schema for validating a UniswapSwap policy.
 * @type {z.ZodObject}
 */
declare const policySchema: z.ZodObject<{
    type: z.ZodLiteral<"UniswapSwap">;
    version: z.ZodString;
    maxAmount: z.ZodEffects<z.ZodString, string, string>;
    allowedTokens: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    version: string;
    type: "UniswapSwap";
    maxAmount: string;
    allowedTokens: string[];
}, {
    version: string;
    type: "UniswapSwap";
    maxAmount: string;
    allowedTokens: string[];
}>;
/**
 * Encodes a UniswapSwap policy into a packed ABI-encoded string.
 * @param {UniswapSwapPolicyType} policy - The policy to encode.
 * @returns {string} ABI-encoded string representing the policy.
 * @throws {z.ZodError} If the policy does not match the schema.
 */
declare function encodePolicy(policy: UniswapSwapPolicyType): string;
/**
 * Decodes an ABI-encoded string into a UniswapSwap policy.
 * @param {string} encodedPolicy - The ABI-encoded policy string.
 * @returns {UniswapSwapPolicyType} The decoded policy object.
 * @throws {z.ZodError} If the decoded policy does not match the schema.
 */
declare function decodePolicy(encodedPolicy: string): UniswapSwapPolicyType;
/**
 * Type representing a UniswapSwap policy.
 * @typedef {z.infer<typeof policySchema>} UniswapSwapPolicyType
 */
export type UniswapSwapPolicyType = z.infer<typeof policySchema>;
/**
 * Utility object for working with UniswapSwap policies.
 * @type {object}
 * @property {UniswapSwapPolicyType} type - Type placeholder for the policy.
 * @property {string} version - Version of the policy schema.
 * @property {z.ZodObject} schema - Zod schema for validating policies.
 * @property {function} encode - Function to encode a policy into an ABI-encoded string.
 * @property {function} decode - Function to decode an ABI-encoded string into a policy.
 */
export declare const UniswapSwapPolicy: {
    type: UniswapSwapPolicyType;
    version: string;
    schema: z.ZodObject<{
        type: z.ZodLiteral<"UniswapSwap">;
        version: z.ZodString;
        maxAmount: z.ZodEffects<z.ZodString, string, string>;
        allowedTokens: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        version: string;
        type: "UniswapSwap";
        maxAmount: string;
        allowedTokens: string[];
    }, {
        version: string;
        type: "UniswapSwap";
        maxAmount: string;
        allowedTokens: string[];
    }>;
    encode: typeof encodePolicy;
    decode: typeof decodePolicy;
};
export {};
//# sourceMappingURL=policy.d.ts.map