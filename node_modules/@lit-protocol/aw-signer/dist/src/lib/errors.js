"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwSignerError = exports.AwSignerErrorType = void 0;
/**
 * Enum representing the types of errors that can occur in the AwSigner module.
 * Each error type corresponds to a specific failure scenario.
 */
var AwSignerErrorType;
(function (AwSignerErrorType) {
    /** Indicates that the Lit network was not provided for the Admin role. */
    AwSignerErrorType["ADMIN_MISSING_LIT_NETWORK"] = "ADMIN_MISSING_LIT_NETWORK";
    /** Indicates that the private key was not provided for the Admin role. */
    AwSignerErrorType["ADMIN_MISSING_PRIVATE_KEY"] = "ADMIN_MISSING_PRIVATE_KEY";
    /** Indicates that the PKP was not found in storage. */
    AwSignerErrorType["ADMIN_PKP_NOT_FOUND"] = "ADMIN_PKP_NOT_FOUND";
    /** Indicates that the PKP transfer failed. */
    AwSignerErrorType["ADMIN_PKP_TRANSFER_FAILED"] = "ADMIN_PKP_TRANSFER_FAILED";
    /** Indicates that the Lit network was not provided for the Delegatee role. */
    AwSignerErrorType["DELEGATEE_MISSING_LIT_NETWORK"] = "DELEGATEE_MISSING_LIT_NETWORK";
    /** Indicates that the private key was not provided for the Delegatee role. */
    AwSignerErrorType["DELEGATEE_MISSING_PRIVATE_KEY"] = "DELEGATEE_MISSING_PRIVATE_KEY";
    AwSignerErrorType["DELEGATEE_MISSING_CREDENTIALS"] = "DELEGATEE_MISSING_CREDENTIALS";
    /** Indicates that multisig functionality for the Admin role is not implemented. */
    AwSignerErrorType["ADMIN_MULTISIG_NOT_IMPLEMENTED"] = "ADMIN_MULTISIG_NOT_IMPLEMENTED";
    /** Indicates insufficient balance for minting a PKP (Programmable Key Pair). */
    AwSignerErrorType["INSUFFICIENT_BALANCE_PKP_MINT"] = "INSUFFICIENT_BALANCE_PKP_MINT";
    /** Indicates insufficient balance for minting a capacity credit. */
    AwSignerErrorType["INSUFFICIENT_BALANCE_CAPACITY_CREDIT_MINT"] = "INSUFFICIENT_BALANCE_CAPACITY_CREDIT_MINT";
    /** Indicates a failure to retrieve an item from storage. */
    AwSignerErrorType["STORAGE_FAILED_TO_GET_ITEM"] = "STORAGE_FAILED_TO_GET_ITEM";
    /** Indicates that the Admin role was not found. */
    AwSignerErrorType["ADMIN_NOT_FOUND"] = "ADMIN_NOT_FOUND";
    /** Indicates that the Admin address does not match the expected address. */
    AwSignerErrorType["ADMIN_ADDRESS_MISMATCH"] = "ADMIN_ADDRESS_MISMATCH";
    /** Indicates that the wrapped key minting failed. */
    AwSignerErrorType["ADMIN_WRAPPED_KEY_MINT_FAILED"] = "ADMIN_WRAPPED_KEY_MINT_FAILED";
    /** Indicates that the wrapped key was not found. */
    AwSignerErrorType["ADMIN_WRAPPED_KEY_NOT_FOUND"] = "ADMIN_WRAPPED_KEY_NOT_FOUND";
})(AwSignerErrorType || (exports.AwSignerErrorType = AwSignerErrorType = {}));
/**
 * Custom error class for the AwSigner module.
 * Extends the built-in `Error` class to include additional metadata such as error type and serialized details.
 */
class AwSignerError extends Error {
    type;
    details;
    /**
     * A serialized string representation of the error details.
     * This is useful for logging and debugging.
     */
    serializedDetails;
    /**
     * Creates an instance of `AwSignerError`.
     *
     * @param type - The type of the error, as defined in `AwSignerErrorType`.
     * @param message - A human-readable error message.
     * @param details - Optional additional details about the error, such as nested errors or custom properties.
     */
    constructor(type, message, details) {
        super(message);
        this.type = type;
        this.details = details;
        this.name = 'AwSignerError';
        // Serialize the details for better error logging
        this.serializedDetails = details
            ? JSON.stringify(details, (key, value) => {
                if (value instanceof Error) {
                    // Handle nested errors
                    return {
                        name: value.name,
                        message: value.message,
                        stack: value.stack,
                        ...(value instanceof AwSignerError
                            ? {
                                type: value.type,
                                details: value.serializedDetails
                                    ? JSON.parse(value.serializedDetails)
                                    : undefined,
                            }
                            : {}),
                    };
                }
                return value;
            }, 2)
            : '';
    }
    /**
     * Converts the error to a JSON-compatible object.
     * This is useful for serialization and logging.
     *
     * @returns An object containing the error's name, type, message, details, and stack trace.
     */
    toJSON() {
        return {
            name: this.name,
            type: this.type,
            message: this.message,
            details: this.serializedDetails
                ? JSON.parse(this.serializedDetails)
                : undefined,
            stack: this.stack,
        };
    }
}
exports.AwSignerError = AwSignerError;
