import { ExecuteJsResponse, JsonExecutionSdkParams } from '@lit-protocol/types';
import type { LitNetwork, AgentConfig, CredentialStore, CredentialsFor, DelegatedPkpInfo, IntentMatcher, IntentMatcherResponse } from './types';
/**
 * The `Delegatee` class is responsible for executing tools on behalf of the PKP Admin.
 * They are limited to the tools and policies that the PKP Admin has permitted. The class
 * manages the delegatee's authentication and wallet, retrieves permitted tools and their
 * policies, executes tools within permitted boundaries, manages tool-specific credentials,
 * and handles capacity credits for execution. It provides secure access to authorized tools
 * while enforcing policy constraints set by the PKP Admin.
 */
export declare class Delegatee implements CredentialStore {
    private static readonly DEFAULT_STORAGE_PATH;
    private static readonly DELEGATEE_STORAGE_KEY;
    private readonly storage;
    private readonly litNodeClient;
    private readonly litContracts;
    private readonly toolRegistryContract;
    private readonly delegateeWallet;
    readonly litNetwork: LitNetwork;
    /**
     * Private constructor for the Delegatee class.
     * @param litNetwork - The Lit network to use.
     * @param storage - An instance of `LocalStorage` for storing delegatee information.
     * @param litNodeClient - An instance of `LitNodeClientNodeJs`.
     * @param litContracts - An instance of `LitContracts`.
     * @param toolRegistryContract - An instance of the tool policy registry contract.
     * @param delegateeWallet - The wallet used for Delegatee operations.
     */
    private constructor();
    private static loadDelegateesFromStorage;
    private static saveDelegateesToStorage;
    /**
     * Retrieves or mints a capacity credit for the Delegatee.
     * If a capacity credit is already stored and not expired, it is loaded; otherwise, a new capacity credit is minted.
     *
     * @param litContracts - An instance of `LitContracts`.
     * @param storage - An instance of `LocalStorage` for storing capacity credit information.
     * @param delegateeAddress - The address of the delegatee.
     * @returns A promise that resolves to the capacity credit information or `null` if not required.
     */
    private static getCapacityCredit;
    /**
     * Creates an instance of the `Delegatee` class.
     * Initializes the Lit node client, contracts, and capacity credit.
     *
     * @param delegateePrivateKey - Optional. The private key for the Delegatee role.
     * @param agentConfig - Configuration for the agent, including the Lit network and debug mode.
     * @returns A promise that resolves to an instance of the `Delegatee` class.
     * @throws {AwSignerError} If the Lit network is not provided or the private key is missing.
     */
    static create(delegateePrivateKey?: string, { litNetwork, debug }?: AgentConfig): Promise<Delegatee>;
    /**
     * Retrieves all delegated PKPs (Programmable Key Pairs) for the Delegatee.
     * @returns A promise that resolves to an array of `DelegatedPkpInfo` objects.
     * @throws If the tool policy registry contract, delegatee wallet, or Lit contracts are not initialized.
     */
    getDelegatedPkps(): Promise<DelegatedPkpInfo[]>;
    /**
     * Get all registered tools and categorize them based on whether they have policies
     * @returns Object containing:
     * - toolsWithPolicies: Object mapping tool IPFS CIDs to their metadata and delegatee policies
     * - toolsWithoutPolicies: Array of tools that don't have policies
     * - toolsUnknownWithPolicies: Object mapping unknown tool IPFS CIDs to their delegatee policies
     * - toolsUnknownWithoutPolicies: Array of tool CIDs without policies that aren't in the registry
     */
    getPermittedToolsForPkp(pkpTokenId: string): Promise<import("@lit-protocol/aw-contracts-sdk").PermittedToolsResult>;
    /**
     * Retrieves the policy for a specific tool.
     * @param pkpTokenId - The token ID of the PKP.
     * @param ipfsCid - The IPFS CID of the tool.
     * @returns An object containing the policy and version for the tool.
     * @throws If the tool policy registry contract is not initialized.
     */
    getToolPolicy(pkpTokenId: string, ipfsCid: string): Promise<any>;
    /**
     * Matches a user's intent to an appropriate permitted tool.
     * @param pkpTokenId - The token ID of the PKP.
     * @param intent - The user's intent string.
     * @param intentMatcher - The intent matcher implementation to use.
     * @returns A promise that resolves to the matched tool and any extracted parameters.
     * @throws If no matching tool is found or if the tool is not permitted.
     */
    getToolViaIntent(pkpTokenId: string, intent: string, intentMatcher: IntentMatcher): Promise<IntentMatcherResponse<any>>;
    /**
     * Executes a tool with the provided parameters.
     * @param params - The parameters for tool execution, excluding session signatures.
     * @returns A promise that resolves to the tool execution response.
     * @throws If the execution fails or if the delegatee is not properly initialized.
     */
    executeTool(params: Omit<JsonExecutionSdkParams, 'sessionSigs'>): Promise<ExecuteJsResponse>;
    /**
     * Retrieves stored credentials required by a tool.
     * @param requiredCredentialNames - Names of the required credentials.
     * @returns Object containing found credentials and list of any missing credentials.
     */
    getCredentials<T>(requiredCredentialNames: readonly string[]): Promise<{
        foundCredentials: Partial<CredentialsFor<T>>;
        missingCredentials: string[];
    }>;
    /**
     * Stores credentials for future tool executions.
     * @param credentials - Object containing credential key-value pairs to store.
     * @throws If any credential value is not a string.
     */
    setCredentials<T>(credentials: Partial<CredentialsFor<T>>): Promise<void>;
    /**
     * Disconnects the Lit node client.
     */
    disconnect(): void;
}
//# sourceMappingURL=delegatee.d.ts.map