"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchGeneratePrivateKeys = batchGeneratePrivateKeys;
const utils_1 = require("./utils");
const lit_actions_client_1 = require("../lit-actions-client");
const utils_2 = require("../lit-actions-client/utils");
const service_client_1 = require("../service-client");
/**
 *  TODO: Document batch behaviour
 * @param { BatchGeneratePrivateKeysParams } params Parameters to use for generating keys and optionally signing messages
 *
 * @returns { Promise<BatchGeneratePrivateKeysResult> } - The generated keys and, optionally, signed messages
 */
async function batchGeneratePrivateKeys(params) {
    const { pkpSessionSigs, litNodeClient } = params;
    const sessionSig = (0, utils_1.getFirstSessionSig)(pkpSessionSigs);
    const pkpAddress = (0, utils_1.getPkpAddressFromSessionSig)(sessionSig);
    const allowPkpAddressToDecrypt = (0, utils_1.getPkpAccessControlCondition)(pkpAddress);
    const { litActionCode, litActionIpfsCid } = (0, utils_2.getLitActionCodeOrCidCommon)('batchGenerateEncryptedKeys');
    const actionResults = await (0, lit_actions_client_1.batchGenerateKeysWithLitAction)({
        ...params,
        litActionIpfsCid: litActionCode ? undefined : litActionIpfsCid,
        litActionCode: litActionCode ? litActionCode : undefined,
        accessControlConditions: [allowPkpAddressToDecrypt],
        pkpSessionSigs,
    });
    const keyParamsBatch = actionResults.map((keyData) => {
        const { generateEncryptedPrivateKey, network } = keyData;
        return {
            ...generateEncryptedPrivateKey,
            keyType: (0, utils_1.getKeyTypeFromNetwork)(network),
        };
    });
    const { ids } = await (0, service_client_1.storePrivateKeyBatch)({
        sessionSig,
        storedKeyMetadataBatch: keyParamsBatch,
        litNetwork: litNodeClient.config.litNetwork,
    });
    const results = actionResults.map((actionResult, ndx) => {
        const { generateEncryptedPrivateKey: { memo, publicKey }, } = actionResult;
        const id = ids[ndx]; // Result of writes is in same order as provided
        const signature = actionResult.signMessage?.signature;
        return {
            ...(signature ? { signMessage: { signature } } : {}),
            generateEncryptedPrivateKey: {
                memo: memo,
                id,
                generatedPublicKey: publicKey,
                pkpAddress,
            },
        };
    });
    return { pkpAddress, results };
}
//# sourceMappingURL=batch-generate-private-keys.js.map