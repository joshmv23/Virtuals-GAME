import { AccsDefaultParams, AuthSig, SessionSigsMap } from '@lit-protocol/types';
import { KeyType, Network } from '../types';
export declare function getKeyTypeFromNetwork(network: Network): KeyType;
/**
 *
 * Extracts the first SessionSig from the SessionSigsMap since we only pass a single SessionSig to the AWS endpoint
 *
 * @param pkpSessionSigs - The PKP sessionSigs (map) used to associate the PKP with the generated private key
 *
 * @returns { AuthSig } - The first SessionSig from the map
 */
export declare function getFirstSessionSig(pkpSessionSigs: SessionSigsMap): AuthSig;
/**
 *
 * Extracts the wallet address from an individual SessionSig
 *
 * @param pkpSessionSig - The first PKP sessionSig from the function getFirstSessionSig
 *
 * @returns { string } - The wallet address that signed the capabilites AuthSig (BLS)
 */
export declare function getPkpAddressFromSessionSig(pkpSessionSig: AuthSig): string;
/**
 *
 * Creates the access control condition used to gate the access for Wrapped Key decryption
 *
 * @param { string } pkpAddress - The wallet address of the PKP which can decrypt the encrypted Wrapped Key
 *
 * @returns { AccsDefaultParams } - The access control condition that only allows the PKP address to decrypt
 */
export declare function getPkpAccessControlCondition(pkpAddress: string): AccsDefaultParams;
