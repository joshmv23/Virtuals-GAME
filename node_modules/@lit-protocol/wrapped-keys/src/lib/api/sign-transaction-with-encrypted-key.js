"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signTransactionWithEncryptedKey = signTransactionWithEncryptedKey;
const utils_1 = require("./utils");
const lit_actions_client_1 = require("../lit-actions-client");
const utils_2 = require("../lit-actions-client/utils");
const service_client_1 = require("../service-client");
/**
 * Signs a transaction inside the Lit Action using the previously persisted wrapped key associated with the current LIT PK.
 * This method fetches the encrypted key from the wrapped keys service, then executes a Lit Action that decrypts the key inside the LIT action and uses
 * the decrypted key to sign the provided transaction
 * use `versionedTransaction: true` to sign a versioned transaction and `false` for a legacy one
 * Optionally, if you pass `broadcast: true`, the LIT action will also submit the signed transaction to the associated RPC endpoint on your behalf
 *
 * @param { SignTransactionWithEncryptedKeyParams } params Parameters required to sign the requested transaction
 *
 * @returns { string } The signed transaction OR its transaction hash if you set `broadcast: true` and the LIT action supports this functionality.
 */
async function signTransactionWithEncryptedKey(params) {
    const { litNodeClient, network, pkpSessionSigs, id } = params;
    const sessionSig = (0, utils_1.getFirstSessionSig)(pkpSessionSigs);
    const pkpAddress = (0, utils_1.getPkpAddressFromSessionSig)(sessionSig);
    const storedKeyMetadata = await (0, service_client_1.fetchPrivateKey)({
        pkpAddress,
        id,
        sessionSig,
        litNetwork: litNodeClient.config.litNetwork,
    });
    const allowPkpAddressToDecrypt = (0, utils_1.getPkpAccessControlCondition)(storedKeyMetadata.pkpAddress);
    const { litActionCode, litActionIpfsCid } = (0, utils_2.getLitActionCodeOrCid)(network, 'signTransaction');
    return (0, lit_actions_client_1.signTransactionWithLitAction)({
        ...params,
        litActionIpfsCid: litActionCode ? undefined : litActionIpfsCid,
        litActionCode: litActionCode ? litActionCode : undefined,
        storedKeyMetadata,
        accessControlConditions: [allowPkpAddressToDecrypt],
    });
}
//# sourceMappingURL=sign-transaction-with-encrypted-key.js.map