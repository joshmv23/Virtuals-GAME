"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importPrivateKey = importPrivateKey;
const encryption_1 = require("@lit-protocol/encryption");
const utils_1 = require("./utils");
const constants_1 = require("../constants");
const service_client_1 = require("../service-client");
/**
 * Import a provided private key into the wrapped keys service backend.
 * First, the key is pre-pended with `LIT_PREFIX` for security reasons, then the salted key is encrypted and stored in the backend service.
 * The key will be associated with the PKP address embedded in the `pkpSessionSigs` you provide. One and only one wrapped key can be associated with a given LIT PKP.
 *
 * @param { ImportPrivateKeyParams } params The parameters required to import the private key into the wrapped keys backend service
 *
 * @returns { Promise<ImportPrivateKeyResult> } - The LIT PKP Address associated with the Wrapped Key
 */
async function importPrivateKey(params) {
    const { pkpSessionSigs, privateKey, publicKey, keyType, litNodeClient, memo, } = params;
    const firstSessionSig = (0, utils_1.getFirstSessionSig)(pkpSessionSigs);
    const pkpAddress = (0, utils_1.getPkpAddressFromSessionSig)(firstSessionSig);
    const allowPkpAddressToDecrypt = (0, utils_1.getPkpAccessControlCondition)(pkpAddress);
    const saltedPrivateKey = constants_1.LIT_PREFIX + privateKey;
    const { ciphertext, dataToEncryptHash } = await (0, encryption_1.encryptString)({
        accessControlConditions: [allowPkpAddressToDecrypt],
        dataToEncrypt: saltedPrivateKey,
    }, litNodeClient);
    const { id } = await (0, service_client_1.storePrivateKey)({
        sessionSig: firstSessionSig,
        litNetwork: litNodeClient.config.litNetwork,
        storedKeyMetadata: {
            ciphertext,
            publicKey,
            keyType,
            dataToEncryptHash,
            memo,
        },
    });
    return { pkpAddress, id };
}
//# sourceMappingURL=import-private-key.js.map