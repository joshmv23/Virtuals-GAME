"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.listEncryptedKeyMetadata = listEncryptedKeyMetadata;
const utils_1 = require("./utils");
const service_client_1 = require("../service-client");
/** Get list of metadata for previously encrypted and persisted private keys
 * Note that this method does include the `ciphertext` or `dataToEncryptHash` values necessary to decrypt the keys.
 * To get those values, call `getEncryptedKey()` with the `id` for the appropriate key returned by this method.
 *
 * @param { ListEncryptedKeyMetadataParams } params Parameters required to fetch the encrypted private key metadata
 * @returns { Promise<StoredKeyMetadata> } The encrypted private key and its associated metadata
 */
async function listEncryptedKeyMetadata(params) {
    const { pkpSessionSigs, litNodeClient } = params;
    const sessionSig = (0, utils_1.getFirstSessionSig)(pkpSessionSigs);
    const pkpAddress = (0, utils_1.getPkpAddressFromSessionSig)(sessionSig);
    return (0, service_client_1.listPrivateKeyMetadata)({
        pkpAddress,
        sessionSig,
        litNetwork: litNodeClient.config.litNetwork,
    });
}
//# sourceMappingURL=list-encrypted-key-metadata.js.map