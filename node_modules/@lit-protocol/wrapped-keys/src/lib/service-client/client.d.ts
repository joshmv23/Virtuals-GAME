import { FetchKeyParams, ListKeysParams, StoreKeyBatchParams, StoreKeyParams } from './types';
import { StoredKeyData, StoredKeyMetadata, StoreEncryptedKeyBatchResult, StoreEncryptedKeyResult } from '../types';
/** Fetches previously stored private key metadata from the wrapped keys service.
 * Note that this list will not include `cipherText` or `dataToEncryptHash` necessary to decrypt the keys.
 * Use `fetchPrivateKey()` to get those values.
 *
 * @param { FetchKeyParams } params Parameters required to fetch the private key metadata
 * @returns { Promise<StoredKeyMetadata[]> } The private key metadata object
 */
export declare function listPrivateKeyMetadata(params: ListKeysParams): Promise<StoredKeyMetadata[]>;
/** Fetches complete previously stored private key data from the wrapped keys service.
 * Includes the `ciphertext` and `dataToEncryptHash` necessarily to decrypt the key.
 *
 * @param { FetchKeyParams } params Parameters required to fetch the private key data
 * @returns { Promise<StoredKeyData> } The private key metadata object
 */
export declare function fetchPrivateKey(params: FetchKeyParams): Promise<StoredKeyData>;
/** Stores private key metadata into the wrapped keys service backend
 *
 * @param { StoreKeyParams } params Parameters required to store the private key metadata
 * @returns { Promise<StoreEncryptedKeyResult> } `true` on successful write to the service. Otherwise, this method throws an error.
 */
export declare function storePrivateKey(params: StoreKeyParams): Promise<StoreEncryptedKeyResult>;
/** Stores a batch of up to 25 private key metadata into the wrapped keys service backend
 *
 * @param { StoreKeyParams } params Parameters required to store the private key metadata
 * @returns { Promise<StoreEncryptedKeyResult> } `true` on successful write to the service. Otherwise, this method throws an error.
 */
export declare function storePrivateKeyBatch(params: StoreKeyBatchParams): Promise<StoreEncryptedKeyBatchResult>;
