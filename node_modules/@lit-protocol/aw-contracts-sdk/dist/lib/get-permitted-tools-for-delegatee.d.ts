import { ethers } from 'ethers';
import { AwTool } from '@lit-protocol/aw-tool';
type ToolMetadata = AwTool & {
    network: string;
    toolEnabled?: boolean;
};
type PermittedToolWithPolicy = ToolMetadata & {
    delegatee: string;
    policyIpfsCid: string;
    policyEnabled: boolean;
};
type PermittedToolWithoutPolicy = ToolMetadata & {
    delegatee: string;
};
type UnknownPermittedToolWithPolicy = {
    toolIpfsCid: string;
    toolEnabled: boolean;
    delegatee: string;
    policyIpfsCid: string;
    policyEnabled: boolean;
};
type UnknownPermittedToolWithoutPolicy = {
    toolIpfsCid: string;
    toolEnabled: boolean;
    delegatee: string;
};
type PermittedToolsResult = {
    toolsWithPolicies: {
        [ipfsCid: string]: PermittedToolWithPolicy;
    };
    toolsWithoutPolicies: {
        [ipfsCid: string]: PermittedToolWithoutPolicy;
    };
    toolsUnknownWithPolicies: {
        [ipfsCid: string]: UnknownPermittedToolWithPolicy;
    };
    toolsUnknownWithoutPolicies: UnknownPermittedToolWithoutPolicy[];
};
/**
 * Get all tools that are permitted for a specific delegatee
 * @returns Object containing:
 * - toolsWithPolicies: Object mapping tool IPFS CIDs to tools that have policies and match the current network
 * - toolsWithoutPolicies: Object mapping tool IPFS CIDs to tools that don't have policies and match the current network
 * - toolsUnknownWithPolicies: Object mapping tool IPFS CIDs to tools with policies that aren't in the registry
 * - toolsUnknownWithoutPolicies: Array of tools without policies that aren't in the registry
 */
export declare const getPermittedToolsForDelegatee: (toolPolicyRegistryContract: ethers.Contract, pkpTokenId: string, delegatee: string) => Promise<PermittedToolsResult>;
export type { PermittedToolsResult, PermittedToolWithPolicy, PermittedToolWithoutPolicy, };
//# sourceMappingURL=get-permitted-tools-for-delegatee.d.ts.map