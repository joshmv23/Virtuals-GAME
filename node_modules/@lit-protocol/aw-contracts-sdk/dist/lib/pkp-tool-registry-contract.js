"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPkpToolRegistryContract = exports.DEFAULT_REGISTRY_CONFIG = void 0;
const constants_1 = require("@lit-protocol/constants");
const ethers_1 = require("ethers");
const human_readable_abi_1 = require("./human-readable-abi");
exports.DEFAULT_REGISTRY_CONFIG = {
    'datil-dev': {
        rpcUrl: constants_1.LIT_RPC.CHRONICLE_YELLOWSTONE,
        contractAddress: '0x2707eabb60D262024F8738455811a338B0ECd3EC',
    },
    'datil-test': {
        rpcUrl: constants_1.LIT_RPC.CHRONICLE_YELLOWSTONE,
        contractAddress: '0x525bF2bEb622D7C05E979a8b3fFcDBBEF944450E',
    },
    datil: {
        rpcUrl: constants_1.LIT_RPC.CHRONICLE_YELLOWSTONE,
        contractAddress: '0xBDEd44A02b64416C831A0D82a630488A854ab4b1',
    },
};
/**
 * Creates a new instance of the PKP Tool Registry contract.
 * @param config - The configuration for the Tool Policy Registry contract, includes the RPC URL and contract address.
 * @param signer - An optional ethers.Signer instance for write operations.
 * @returns A new instance of the PKP Tool Registry contract.
 */
const getPkpToolRegistryContract = ({ rpcUrl, contractAddress }, signer) => {
    const contract = new ethers_1.ethers.Contract(contractAddress, human_readable_abi_1.PKP_TOOL_REGISTRY_ABI, new ethers_1.ethers.providers.JsonRpcProvider(rpcUrl));
    // Connect the signer to allow write operations
    return signer ? contract.connect(signer) : contract;
};
exports.getPkpToolRegistryContract = getPkpToolRegistryContract;
