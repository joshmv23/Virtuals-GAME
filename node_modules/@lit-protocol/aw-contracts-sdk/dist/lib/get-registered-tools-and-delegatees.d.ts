import { type LitContracts } from '@lit-protocol/contracts-sdk';
import { ethers } from 'ethers';
import type { RegisteredToolsResult } from './types';
/**
 * Get all registered tools and categorize them based on whether they have policies
 * @returns Object containing:
 * - toolsWithPolicies: Object mapping tool IPFS CIDs to their metadata and delegatee policies
 * - toolsWithoutPolicies: Object mapping tool IPFS CIDs to their metadata without policies
 * - toolsUnknownWithPolicies: Object mapping unknown tool IPFS CIDs to their delegatee policies
 * - toolsUnknownWithoutPolicies: Array of tool CIDs without policies that aren't in the registry
 */
export declare const getRegisteredToolsAndDelegatees: (toolPolicyRegistryContract: ethers.Contract, litContracts: LitContracts, pkpTokenId: string) => Promise<RegisteredToolsResult>;
//# sourceMappingURL=get-registered-tools-and-delegatees.d.ts.map