"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aw_tool_1 = require("@lit-protocol/aw-tool");
const utils_1 = require("./utils");
(async () => {
    try {
        console.log(`Using Lit Network: ${LIT_NETWORK}`);
        console.log(`Using PKP Tool Registry Address: ${PKP_TOOL_REGISTRY_ADDRESS}`);
        console.log(`Using Pubkey Router Address: ${aw_tool_1.NETWORK_CONFIG[LIT_NETWORK]
            .pubkeyRouterAddress}`);
        const delegateeAddress = ethers.utils.getAddress(LitAuth.authSigAddress);
        const toolIpfsCid = LitAuth.actionIpfsIds[0];
        const pkpToolRegistryContract = await (0, aw_tool_1.getPkpToolRegistryContract)(PKP_TOOL_REGISTRY_ADDRESS);
        const pkp = await (0, aw_tool_1.getPkpInfo)(params.pkpEthAddress);
        const toolPolicy = await (0, aw_tool_1.fetchToolPolicyFromRegistry)(pkpToolRegistryContract, pkp.tokenId, delegateeAddress, toolIpfsCid);
        if (toolPolicy.enabled &&
            toolPolicy.policyIpfsCid !== undefined &&
            toolPolicy.policyIpfsCid !== '0x' &&
            toolPolicy.policyIpfsCid !== '') {
            console.log(`Executing policy ${toolPolicy.policyIpfsCid}`);
            await Lit.Actions.call({
                ipfsId: toolPolicy.policyIpfsCid,
                params: {
                    parentToolIpfsCid: toolIpfsCid,
                    pkpToolRegistryContractAddress: PKP_TOOL_REGISTRY_ADDRESS,
                    pkpTokenId: pkp.tokenId,
                    delegateeAddress,
                    toolParameters: params,
                },
            });
        }
        else {
            console.log(`No policy found for tool ${toolIpfsCid} on PKP ${pkp.tokenId} for delegatee ${delegateeAddress}`);
        }
        const solanaKeyPair = await (0, utils_1.createSolanaKeypair)(pkp.tokenId);
        const signature = await (0, utils_1.signMessage)(params.message, solanaKeyPair);
        console.log(signature);
        Lit.Actions.setResponse({
            response: JSON.stringify({
                response: 'Success!',
                status: 'success',
            }),
        });
    }
    catch (err) {
        console.error('Error:', err);
        Lit.Actions.setResponse({
            response: JSON.stringify({
                status: 'error',
                error: err.message || String(err),
            }),
        });
    }
})();
