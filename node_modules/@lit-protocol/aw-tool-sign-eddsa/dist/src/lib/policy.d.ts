import { z } from 'zod';
/**
 * Schema for validating a SignEddsa policy.
 * Ensures the policy has the correct structure and valid values.
 */
declare const policySchema: z.ZodObject<{
    /** The type of policy, must be `SignEddsa`. */
    type: z.ZodLiteral<"SignEddsa">;
    /** The version of the policy. */
    version: z.ZodString;
    /** Array of allowed message prefixes. */
    allowedPrefixes: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    version: string;
    type: "SignEddsa";
    allowedPrefixes: string[];
}, {
    version: string;
    type: "SignEddsa";
    allowedPrefixes: string[];
}>;
/**
 * Encodes a SignEddsa policy into a format suitable for on-chain storage.
 * @param policy - The SignEddsa policy to encode.
 * @returns The encoded policy as a hex string.
 * @throws If the policy does not conform to the schema.
 */
declare function encodePolicy(policy: SignEddsaPolicyType): string;
/**
 * Decodes a SignEddsa policy from its on-chain encoded format.
 * @param encodedPolicy - The encoded policy as a hex string.
 * @returns The decoded SignEddsa policy.
 * @throws If the encoded policy is invalid or does not conform to the schema.
 */
declare function decodePolicy(encodedPolicy: string): SignEddsaPolicyType;
/**
 * Represents the type of a SignEddsa policy, inferred from the schema.
 */
export type SignEddsaPolicyType = z.infer<typeof policySchema>;
/**
 * Utility object for working with SignEddsa policies.
 * Includes the schema, encoding, and decoding functions.
 */
export declare const SignEddsaPolicy: {
    /** The type of the policy. */
    type: SignEddsaPolicyType;
    /** The version of the policy. */
    version: string;
    /** The schema for validating SignEddsa policies. */
    schema: z.ZodObject<{
        /** The type of policy, must be `SignEddsa`. */
        type: z.ZodLiteral<"SignEddsa">;
        /** The version of the policy. */
        version: z.ZodString;
        /** Array of allowed message prefixes. */
        allowedPrefixes: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        version: string;
        type: "SignEddsa";
        allowedPrefixes: string[];
    }, {
        version: string;
        type: "SignEddsa";
        allowedPrefixes: string[];
    }>;
    /** Encodes a SignEddsa policy into a format suitable for on-chain storage. */
    encode: typeof encodePolicy;
    /** Decodes a SignEddsa policy from its on-chain encoded format. */
    decode: typeof decodePolicy;
};
export {};
//# sourceMappingURL=policy.d.ts.map