"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignEddsa = void 0;
const zod_1 = require("zod");
const aw_tool_1 = require("@lit-protocol/aw-tool");
const policy_1 = require("./policy");
const ipfs_1 = require("./ipfs");
/**
 * Zod schema for validating `SignEddsaLitActionParameters`.
 */
const SignEddsaLitActionSchema = zod_1.z.object({
    pkpEthAddress: zod_1.z
        .string()
        .regex(/^0x[a-fA-F0-9]{40}$/, 'Must be a valid Ethereum address (0x followed by 40 hexadecimal characters)'),
    message: zod_1.z.string(),
    ciphertext: zod_1.z.string(),
    dataToEncryptHash: zod_1.z.string(),
});
/**
 * Descriptions of each parameter for the SignEddsa Lit Action.
 * These descriptions are designed to be consumed by LLMs (Language Learning Models) to understand the required parameters.
 */
const SignEddsaLitActionParameterDescriptions = {
    pkpEthAddress: 'The Ethereum address of the PKP that will be used to perform the action.',
    message: 'The message you want to sign.',
    ciphertext: 'The encrypted key data.',
    dataToEncryptHash: 'The hash of the data that was encrypted.',
};
/**
 * Validates the parameters for the SignEddsa Lit Action.
 * @param params - The parameters to validate.
 * @returns `true` if the parameters are valid, or an array of errors if invalid.
 */
const validateSignEddsaParameters = (params) => {
    const result = SignEddsaLitActionSchema.safeParse(params);
    if (result.success) {
        return true;
    }
    // Map validation errors to a more user-friendly format
    return result.error.issues.map((issue) => ({
        param: issue.path[0],
        error: issue.message,
    }));
};
/**
 * Creates a network-specific SignEddsa tool.
 * @param network - The supported Lit network (e.g., `datil-dev`, `datil-test`, `datil`).
 * @param config - The network configuration.
 * @returns A configured `AwTool` instance for the SignEddsa Lit Action.
 */
const createNetworkTool = (network, config) => ({
    name: 'SignEddsa',
    description: `SignEddsa Tool`,
    ipfsCid: ipfs_1.IPFS_CIDS[network].tool,
    defaultPolicyIpfsCid: ipfs_1.IPFS_CIDS[network].defaultPolicy,
    chain: 'solana',
    parameters: {
        type: {},
        schema: SignEddsaLitActionSchema,
        descriptions: SignEddsaLitActionParameterDescriptions,
        validate: validateSignEddsaParameters,
    },
    policy: policy_1.SignEddsaPolicy,
});
/**
 * Exports network-specific SignEddsa tools.
 * Each tool is configured for a specific Lit network (e.g., `datil-dev`, `datil-test`, `datil`).
 */
exports.SignEddsa = Object.entries(aw_tool_1.NETWORK_CONFIGS).reduce((acc, [network, config]) => ({
    ...acc,
    [network]: createNetworkTool(network, config),
}), {});
