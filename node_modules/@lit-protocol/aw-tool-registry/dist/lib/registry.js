"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerTool = registerTool;
exports.getToolByName = getToolByName;
exports.getToolByIpfsCid = getToolByIpfsCid;
exports.listToolsByNetwork = listToolsByNetwork;
exports.listAllTools = listAllTools;
const aw_tool_erc20_transfer_1 = require("@lit-protocol/aw-tool-erc20-transfer");
const aw_tool_uniswap_swap_1 = require("@lit-protocol/aw-tool-uniswap-swap");
const aw_tool_sign_ecdsa_1 = require("@lit-protocol/aw-tool-sign-ecdsa");
const aw_tool_enso_1 = require("@lit-protocol/aw-tool-enso");
/**
 * A registry for storing and managing tools.
 * The registry maps tool names to their network-specific implementations.
 */
const toolRegistry = new Map();
/**
 * Registers a tool in the Tool Registry.
 * @param name - The name of the tool.
 * @param tool - The network-specific implementation of the tool.
 */
function registerTool(name, tool) {
    toolRegistry.set(name, tool);
}
/**
 * Retrieves a tool from the Tool Registry by its name and network.
 * @param name - The name of the tool.
 * @param network - The Lit network for which the tool is registered.
 * @returns The tool if found, or `null` if the tool is not registered for the specified network.
 */
function getToolByName(name, network) {
    const tool = toolRegistry.get(name);
    if (!tool)
        return null;
    return tool[network];
}
/**
 * Finds a tool by its IPFS CID (Content Identifier).
 * @param ipfsCid - The IPFS CID of the tool.
 * @returns An object containing the tool and its network if found, or `null` if the tool is not found.
 */
function getToolByIpfsCid(ipfsCid) {
    for (const [, networkTools] of toolRegistry.entries()) {
        for (const [network, tool] of Object.entries(networkTools)) {
            if (tool.ipfsCid === ipfsCid) {
                return {
                    tool: tool,
                    network: network,
                };
            }
        }
    }
    return null;
}
/**
 * Lists all registered tools for a specific network.
 * @param network - The Lit network for which to list the tools.
 * @returns An array of tools registered for the specified network.
 */
function listToolsByNetwork(network) {
    return Array.from(toolRegistry.values()).map((networkTools) => networkTools[network]);
}
/**
 * Lists all registered tools for all networks.
 * @returns An array of objects containing the tool and its network.
 */
function listAllTools() {
    const tools = [];
    for (const networkTools of toolRegistry.values()) {
        for (const [network, tool] of Object.entries(networkTools)) {
            tools.push({
                tool: tool,
                network: network,
            });
        }
    }
    return tools;
}
// Register the ERC20Transfer tool
registerTool('ERC20Transfer', aw_tool_erc20_transfer_1.ERC20Transfer);
registerTool('UniswapSwap', aw_tool_uniswap_swap_1.UniswapSwap);
registerTool('SignEcdsa', aw_tool_sign_ecdsa_1.SignEcdsa);
registerTool('Enso', aw_tool_enso_1.Enso);
