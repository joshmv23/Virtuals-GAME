import type { AwTool } from '@lit-protocol/aw-tool';
/**
 * Represents the Lit network environment.
 * Can be one of the predefined Lit network types: `datil-dev`, `datil-test`, or `datil`.
 */
export type LitNetwork = 'datil-dev' | 'datil-test' | 'datil';
/**
 * Represents a tool that is specific to a Lit network.
 * @template T - The type of the tool, which must extend `AwTool`.
 */
export type NetworkSpecificTool<T extends AwTool<any, any>> = Record<LitNetwork, T>;
/**
 * Represents a collection of tools, categorized by whether they have policies.
 */
export type PermittedTools = {
    /** Tools that have associated policies. */
    toolsWithPolicies: AwTool<any, any>[];
    /** Tools that do not have associated policies. */
    toolsWithoutPolicies: AwTool<any, any>[];
};
/**
 * Registers a tool in the Tool Registry.
 * @param name - The name of the tool.
 * @param tool - The network-specific implementation of the tool.
 */
export declare function registerTool<T extends AwTool<any, any>>(name: string, tool: NetworkSpecificTool<T>): void;
/**
 * Retrieves a tool from the Tool Registry by its name and network.
 * @param name - The name of the tool.
 * @param network - The Lit network for which the tool is registered.
 * @returns The tool if found, or `null` if the tool is not registered for the specified network.
 */
export declare function getToolByName<T extends AwTool<any, any>>(name: string, network: LitNetwork): T | null;
/**
 * Finds a tool by its IPFS CID (Content Identifier).
 * @param ipfsCid - The IPFS CID of the tool.
 * @returns An object containing the tool and its network if found, or `null` if the tool is not found.
 */
export declare function getToolByIpfsCid<T extends AwTool<any, any>>(ipfsCid: string): {
    tool: T;
    network: LitNetwork;
} | null;
/**
 * Lists all registered tools for a specific network.
 * @param network - The Lit network for which to list the tools.
 * @returns An array of tools registered for the specified network.
 */
export declare function listToolsByNetwork<T extends AwTool<any, any>>(network: LitNetwork): Array<T>;
/**
 * Lists all registered tools for all networks.
 * @returns An array of objects containing the tool and its network.
 */
export declare function listAllTools<T extends AwTool<any, any>>(): Array<{
    tool: T;
    network: LitNetwork;
}>;
//# sourceMappingURL=registry.d.ts.map