"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwError = exports.AwErrorType = void 0;
/**
 * Represents the types of errors that can occur in the AW tool.
 * @enum {AwErrorType}
 * @description This enum is currently empty and can be extended with specific error types as needed.
 */
var AwErrorType;
(function (AwErrorType) {
})(AwErrorType || (exports.AwErrorType = AwErrorType = {}));
/**
 * A custom error class for AW tools.
 * @class AwError
 * @extends Error
 * @description This class extends the native `Error` class and adds support for error types, detailed error information, and serialization.
 */
class AwError extends Error {
    type;
    details;
    /**
     * A serialized version of the error details for better logging.
     * @type {string}
     */
    serializedDetails;
    /**
     * Creates a new AwError instance.
     * @param {AwErrorType} type - The type of the error.
     * @param {string} message - The error message.
     * @param {Record<string, ErrorDetails | unknown>} [details] - Additional details about the error.
     */
    constructor(type, message, details) {
        super(message);
        this.type = type;
        this.details = details;
        this.name = 'AwError';
        // Store a serialized version of details for better error logging
        this.serializedDetails = details
            ? JSON.stringify(details, (key, value) => {
                if (value instanceof Error) {
                    // Handle nested errors
                    return {
                        name: value.name,
                        message: value.message,
                        stack: value.stack,
                        ...(value instanceof AwError
                            ? {
                                type: value.type,
                                details: value.serializedDetails
                                    ? JSON.parse(value.serializedDetails)
                                    : undefined,
                            }
                            : {}),
                    };
                }
                return value;
            }, 2)
            : '';
    }
    /**
     * Converts the error to a JSON-serializable object.
     * @returns {Object} - A JSON-serializable representation of the error.
     */
    toJSON() {
        return {
            name: this.name,
            type: this.type,
            message: this.message,
            details: this.serializedDetails
                ? JSON.parse(this.serializedDetails)
                : undefined,
            stack: this.stack,
        };
    }
}
exports.AwError = AwError;
