"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnsoPolicy = void 0;
const zod_1 = require("zod");
const ethers_1 = require("ethers");
const aw_tool_1 = require("@lit-protocol/aw-tool");
/**
 * Schema for validating a Enso policy.
 * Ensures the policy has the correct structure and valid values.
 */
const policySchema = zod_1.z.object({
    /** The type of policy, must be `Enso`. */
    type: zod_1.z.literal('Enso'),
    /** The version of the policy. */
    version: zod_1.z.string(),
    allowedTokens: zod_1.z.array(aw_tool_1.BaseEthereumAddressSchema),
});
/**
 * Encodes a Enso policy into a format suitable for on-chain storage.
 * @param policy - The Enso policy to encode.
 * @returns The encoded policy as a hex string.
 * @throws If the policy does not conform to the schema.
 */
function encodePolicy(policy) {
    // Validate the policy against the schema
    policySchema.parse(policy);
    return ethers_1.ethers.utils.defaultAbiCoder.encode(['tuple(address[] allowedTokens)'], [{ allowedTokens: policy.allowedTokens }]);
}
/**
 * Decodes a Enso policy from its on-chain encoded format.
 * @param encodedPolicy - The encoded policy as a hex string.
 * @returns The decoded Enso policy.
 * @throws If the encoded policy is invalid or does not conform to the schema.
 */
function decodePolicy(encodedPolicy) {
    const decoded = ethers_1.ethers.utils.defaultAbiCoder.decode(['tuple(address[] allowedTokens)'], encodedPolicy)[0];
    const policy = {
        type: 'Enso',
        version: '1.0.0',
        allowedTokens: decoded.allowedTokens,
    };
    return policySchema.parse(policy);
}
/**
 * Utility object for working with Enso policies.
 * Includes the schema, encoding, and decoding functions.
 */
exports.EnsoPolicy = {
    /** The type of the policy. */
    type: {},
    /** The version of the policy. */
    version: '1.0.0',
    /** The schema for validating Enso policies. */
    schema: policySchema,
    /** Encodes a Enso policy into a format suitable for on-chain storage. */
    encode: encodePolicy,
    /** Decodes a Enso policy from its on-chain encoded format. */
    decode: decodePolicy,
};
