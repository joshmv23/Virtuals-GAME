import { z } from 'zod';
/**
 * Schema for validating a JupiterSwap policy.
 * Ensures the policy has the correct structure and valid values.
 */
declare const policySchema: z.ZodObject<{
    /** The type of policy, must be `JupiterSwap`. */
    type: z.ZodLiteral<"JupiterSwap">;
    /** The version of the policy. */
    version: z.ZodString;
    /** The maximum amount of token that can be sent. */
    maxAmount: z.ZodEffects<z.ZodString, string, string>;
    /** The swap can only be performed between these tokens. */
    allowedTokens: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">;
}, "strip", z.ZodTypeAny, {
    version: string;
    type: "JupiterSwap";
    maxAmount: string;
    allowedTokens: string[];
}, {
    version: string;
    type: "JupiterSwap";
    maxAmount: string;
    allowedTokens: string[];
}>;
/**
 * Encodes a JupiterSwap policy into a format suitable for on-chain storage.
 * @param policy - The JupiterSwap policy to encode.
 * @returns The encoded policy as a hex string.
 * @throws If the policy does not conform to the schema.
 */
declare function encodePolicy(policy: JupiterSwapPolicyType): string;
/**
 * Decodes a JupiterSwap policy from its on-chain encoded format.
 * @param encodedPolicy - The encoded policy as a hex string.
 * @returns The decoded JupiterSwap policy.
 * @throws If the encoded policy is invalid or does not conform to the schema.
 */
declare function decodePolicy(encodedPolicy: string): JupiterSwapPolicyType;
/**
 * Represents the type of a JupiterSwap policy, inferred from the schema.
 */
export type JupiterSwapPolicyType = z.infer<typeof policySchema>;
/**
 * Utility object for working with JupiterSwap policies.
 * Includes the schema, encoding, and decoding functions.
 */
export declare const JupiterSwapPolicy: {
    /** The type of the policy. */
    type: JupiterSwapPolicyType;
    /** The version of the policy. */
    version: string;
    /** The schema for validating JupiterSwap policies. */
    schema: z.ZodObject<{
        /** The type of policy, must be `JupiterSwap`. */
        type: z.ZodLiteral<"JupiterSwap">;
        /** The version of the policy. */
        version: z.ZodString;
        /** The maximum amount of token that can be sent. */
        maxAmount: z.ZodEffects<z.ZodString, string, string>;
        /** The swap can only be performed between these tokens. */
        allowedTokens: z.ZodArray<z.ZodEffects<z.ZodString, string, string>, "many">;
    }, "strip", z.ZodTypeAny, {
        version: string;
        type: "JupiterSwap";
        maxAmount: string;
        allowedTokens: string[];
    }, {
        version: string;
        type: "JupiterSwap";
        maxAmount: string;
        allowedTokens: string[];
    }>;
    /** Encodes a JupiterSwap policy into a format suitable for on-chain storage. */
    encode: typeof encodePolicy;
    /** Decodes a JupiterSwap policy from its on-chain encoded format. */
    decode: typeof decodePolicy;
};
export {};
//# sourceMappingURL=policy.d.ts.map