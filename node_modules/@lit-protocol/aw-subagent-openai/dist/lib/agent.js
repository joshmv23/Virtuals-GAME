"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAiIntentMatcher = void 0;
// Import the OpenAI class from the 'openai' package.
const openai_1 = require("openai");
// Import helper functions for matching tools and parsing parameters based on intent.
const get_tool_for_intent_1 = require("./get-tool-for-intent");
const parse_tool_parameters_1 = require("./parse-tool-parameters");
/**
 * A class that implements the `IntentMatcher` interface to match intents using OpenAI's API.
 * This class is responsible for analyzing an intent, matching it to a registered tool,
 * and parsing the required parameters for the matched tool.
 */
class OpenAiIntentMatcher {
    /** The name of the intent matcher. */
    static name = 'OpenAI Intent Matcher';
    /** The required credential names for this intent matcher. */
    static requiredCredentialNames = ['openAiApiKey'];
    /** The OpenAI client instance. */
    openai;
    /** The model to be used for intent analysis. */
    model;
    /**
     * Constructs an instance of the `OpenAiIntentMatcher`.
     *
     * @param {string} apiKey - The API key for the OpenAI client.
     * @param {string} [model='gpt-4o-mini'] - The model to be used for intent analysis. Defaults to 'gpt-4o-mini'.
     */
    constructor(apiKey, model = 'gpt-4o-mini') {
        this.openai = new openai_1.OpenAI({ apiKey: apiKey });
        this.model = model;
    }
    /**
     * Analyzes the provided intent and matches it to a registered tool.
     * If a tool is matched, it also parses the required parameters from the intent.
     *
     * @param {string} intent - The intent to be analyzed.
     * @param {AwTool<any, any>[]} registeredTools - An array of registered tools to match against the intent.
     * @returns {Promise<IntentMatcherResponse<any>>} - A promise that resolves to an object containing the analysis, matched tool, and parameters.
     * @throws {Error} - Throws an error if the OpenAI client is not initialized.
     */
    async analyzeIntentAndMatchTool(intent, registeredTools) {
        if (!this.openai) {
            throw new Error('OpenAI client not initialized. Please set credentials first.');
        }
        // Match the intent to a tool using the OpenAI client and model.
        const { analysis, matchedTool } = await (0, get_tool_for_intent_1.getToolForIntent)(this.openai, this.model, intent, registeredTools);
        // If a tool is matched, parse the parameters from the intent.
        const params = matchedTool
            ? await (0, parse_tool_parameters_1.parseToolParametersFromIntent)(this.openai, this.model, intent, matchedTool)
            : { foundParams: {}, missingParams: [] }; // If no tool is matched, return empty parameters.
        // Return the analysis, matched tool, and parameters.
        return { analysis, matchedTool, params };
    }
}
exports.OpenAiIntentMatcher = OpenAiIntentMatcher;
