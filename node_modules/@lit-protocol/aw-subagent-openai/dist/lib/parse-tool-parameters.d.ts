import { OpenAI } from 'openai';
import type { AwTool } from '@lit-protocol/aw-tool';
/**
 * Parses and validates parameters from a user's intent for a given tool.
 * This function uses OpenAI's API to extract parameter values and ensures they conform to the tool's validation rules.
 *
 * @template TParams - A generic type representing the tool's parameter structure.
 * @template TPolicy - A generic type representing the tool's policy structure.
 * @param openai - An instance of the OpenAI client.
 * @param openAiModel - The name of the OpenAI model to use for parsing.
 * @param intent - The user's intent as a string.
 * @param tool - The tool for which parameters are being parsed.
 * @returns A Promise that resolves to an object containing:
 *   - foundParams: A partial object of the parsed parameters.
 *   - missingParams: An array of parameter names that could not be parsed.
 *   - validationErrors: An array of validation errors for invalid parameters.
 */
export declare function parseToolParametersFromIntent<TParams extends Record<string, any>, TPolicy extends {
    type: string;
}>(openai: OpenAI, openAiModel: string, intent: string, tool: AwTool<TParams, TPolicy>): Promise<{
    foundParams: Partial<TParams>;
    missingParams: Array<keyof TParams>;
    validationErrors: Array<{
        param: string;
        error: string;
    }>;
}>;
//# sourceMappingURL=parse-tool-parameters.d.ts.map