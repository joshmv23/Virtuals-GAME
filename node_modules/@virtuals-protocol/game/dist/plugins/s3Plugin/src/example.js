"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const s3Plugin_1 = __importDefault(require("./s3Plugin"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
// Validate environment variables
const { S3_ACCESS_KEY_ID, S3_SECRET_ACCESS_KEY, S3_REGION, S3_BUCKET, S3_UPLOAD_PATH, S3_ENDPOINT, S3_SSL_ENABLED, S3_FORCE_PATH_STYLE, GAME_API_KEY, } = process.env;
if (!S3_ACCESS_KEY_ID ||
    !S3_SECRET_ACCESS_KEY ||
    !S3_REGION ||
    !S3_BUCKET ||
    !GAME_API_KEY) {
    throw new Error("Missing required environment variables. Please check your .env file.");
}
// Create a worker with the functions
const s3Plugin = new s3Plugin_1.default({
    credentials: {
        accessKeyId: S3_ACCESS_KEY_ID,
        secretAccessKey: S3_SECRET_ACCESS_KEY,
    },
    region: S3_REGION !== null && S3_REGION !== void 0 ? S3_REGION : "us-east-1",
    bucket: S3_BUCKET,
    endpoint: S3_ENDPOINT !== null && S3_ENDPOINT !== void 0 ? S3_ENDPOINT : "",
    sslEnabled: S3_SSL_ENABLED === "true",
    forcePathStyle: S3_FORCE_PATH_STYLE === "true",
});
// Create an agent with the worker
const agent = new game_1.GameAgent(GAME_API_KEY, {
    name: "S3 Bot",
    goal: "upload and download files to S3",
    description: "A bot that can upload and download files to S3",
    workers: [
        s3Plugin.getWorker({
            // Define the functions that the worker can perform, (defaults to all functions defined in the plugin)
            functions: [s3Plugin.uploadFileFunction, s3Plugin.downloadFileFunction],
            // Define the environment variables that the worker can access
            getEnvironment: () => __awaiter(void 0, void 0, void 0, function* () {
                return ({
                    accessKeyId: S3_ACCESS_KEY_ID,
                    secretAccessKey: S3_SECRET_ACCESS_KEY,
                    region: S3_REGION,
                    bucket: S3_BUCKET,
                    uploadPath: S3_UPLOAD_PATH,
                    endpoint: S3_ENDPOINT,
                    sslEnabled: S3_SSL_ENABLED,
                    forcePathStyle: S3_FORCE_PATH_STYLE,
                });
            }),
        }),
    ],
});
(() => __awaiter(void 0, void 0, void 0, function* () {
    agent.setLogger((agent, message) => {
        console.log(`-----[${agent.name}]-----`);
        console.log(message);
        console.log("\n");
    });
    yield agent.init();
    const agentS3Worker = agent.getWorkerById(agent.workers[0].id);
    // Explicitly define the tasks: uploading a file with default values, uploading a file with a key and a signed URL, and downloading a file
    const task1 = "Upload a file to the S3 bucket at the path `./package.json`";
    const task2 = "Upload a file to the S3 bucket at the path `./README.md` with key `hello/world` and use a signed URL with a TTL of 900 seconds";
    const task3 = "Download a file from the S3 bucket at key `hello/world` to the a file at `./test.txt`";
    // Run the tasks
    yield agentS3Worker.runTask(task1, {
        verbose: true,
    });
    yield agentS3Worker.runTask(task2, {
        verbose: true,
    });
    yield agentS3Worker.runTask(task3, {
        verbose: true,
    });
}))();
