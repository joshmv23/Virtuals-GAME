"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
// import TwitterEvalEnginePlugin from "@virtuals-protocol/game-evalengine-twitter-plugin";
const index_1 = __importDefault(require("./index"));
const evalEngine_1 = require("./evalEngine");
const { X_API_KEY, X_API_KEY_SECRET, X_ACCESS_TOKEN, X_ACCESS_TOKEN_SECRET, VIRTUALS_API_KEY, PRIVATE_KEY, } = process.env;
// Validate required environment variables
if (!X_API_KEY ||
    !X_API_KEY_SECRET ||
    !X_ACCESS_TOKEN ||
    !X_ACCESS_TOKEN_SECRET ||
    !VIRTUALS_API_KEY) {
    throw new Error("Missing required environment variables. Please check your .env file.");
}
(() => __awaiter(void 0, void 0, void 0, function* () {
    // Uncomment and validate PRIVATE_KEY if initEvalClient is needed
    if (!PRIVATE_KEY) {
        throw new Error("Missing PRIVATE_KEY environment variable");
    }
    const evalClient = yield (0, evalEngine_1.initEvalClient)(PRIVATE_KEY);
    // Create a worker with the functions
    const twitterPlugin = new index_1.default({
        credentials: {
            apiKey: X_API_KEY,
            apiSecretKey: X_API_KEY_SECRET,
            accessToken: X_ACCESS_TOKEN,
            accessTokenSecret: X_ACCESS_TOKEN_SECRET,
        },
        thresholdScore: 50,
        evalClient,
    });
    // Create an agent with the worker
    const agent = new game_1.GameAgent(VIRTUALS_API_KEY, {
        name: "Twitter Reply Bot",
        goal: "increase engagement and grow follower count, and always reply to tweets",
        description: "A bot that can post tweets, reply to tweets, and like tweets",
        workers: [
            twitterPlugin.getWorker({
                // Define the functions that the worker can perform, by default it will use the all functions defined in the plugin
                functions: [
                    twitterPlugin.searchTweetsFunction,
                    twitterPlugin.replyTweetFunction,
                    // twitterPlugin.postTweetFunction,
                ],
                // Define the environment variables that the worker can access, by default it will use the metrics defined in the plugin
                // getEnvironment: async () => ({
                //   ...(await twitterPlugin.getMetrics()),
                //   username: "virtualsprotocol",
                //   token_price: "$100.00",
                // }),
            }),
        ],
    });
    agent.setLogger((agent, message) => {
        console.log(`-----[${agent.name}]-----`);
        console.log(message);
        console.log("\n");
    });
    yield agent.init();
    while (true) {
        yield agent.step({
            verbose: true,
        });
        yield setInterval(() => { }, 10000);
    }
}))();
