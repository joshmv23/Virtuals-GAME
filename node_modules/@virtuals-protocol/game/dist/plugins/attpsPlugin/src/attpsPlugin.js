"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const game_1 = require("@virtuals-protocol/game");
const ai_agent_sdk_js_1 = require("ai-agent-sdk-js");
function fetchPriceData(sourceAgentId, feedId) {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield fetch(`https://ai-agent-test.apro.com/api/ai-agent/price-detail?sourceAgentId=${sourceAgentId}&feedId=${feedId}`);
        const { result, code, message } = yield response.json();
        if (code !== 0) {
            throw new Error(message);
        }
        return result;
    });
}
function cleanNumber(numStr) {
    return parseFloat(numStr).toString();
}
function parseArray(array) {
    if (!array) {
        return [];
    }
    if (Array.isArray(array)) {
        return array;
    }
    return JSON.parse(array.replace(/'/g, '"').trim());
}
class AttpsPlugin {
    constructor(options) {
        this.id = options.id || "attps_worker";
        this.name = options.name || "ATTPs Worker";
        this.description =
            options.description ||
                "A worker that will execute tasks within the ATTPs Platforms. It is capable of creating agents, verifying data, and more.";
        this.agentSDK = new ai_agent_sdk_js_1.AgentSDK({
            rpcUrl: options.credentials.rpcUrl,
            privateKey: options.credentials.privateKey,
            proxyAddress: options.credentials.proxyAddress,
            converterAddress: options.credentials.converterAddress,
            autoHashData: options.credentials.autoHashData,
        });
    }
    getWorker(data) {
        return new game_1.GameWorker({
            id: this.id,
            name: this.name,
            description: this.description,
            functions: (data === null || data === void 0 ? void 0 : data.functions) || [
                this.createAndRegisterAgentFunction,
                this.verifyDataFunction,
                this.attpsPriceQueryFunction,
            ],
            getEnvironment: data === null || data === void 0 ? void 0 : data.getEnvironment,
        });
    }
    get createAndRegisterAgentFunction() {
        return new game_1.GameFunction({
            name: "create_and_register_agent",
            description: "Create and register an agent in the ATTPs Platform.",
            args: [
                {
                    name: "signers",
                    type: "string[]",
                    description: "The signers of the agent.",
                },
                {
                    name: "threshold",
                    type: "number",
                    description: "The threshold of the agent.",
                },
                {
                    name: "converterAddress",
                    type: "string",
                    description: "The converter address of the agent.",
                },
                {
                    name: "agentHeaderSourceAgentId",
                    type: "string",
                    optional: true,
                    description: "The source agent id of the agent header.",
                },
                {
                    name: "agentHeaderMessageId",
                    type: "string",
                    optional: true,
                    description: "The message id of the agent header.",
                },
                {
                    name: "agentHeaderSourceAgentName",
                    type: "string",
                    description: "The source agent name of the agent header.",
                },
                {
                    name: "agentHeaderTargetAgentId",
                    type: "string",
                    description: "The target agent id of the agent header.",
                },
                {
                    name: "agentHeaderMessageType",
                    type: "number",
                    description: "The message type of the agent header.",
                },
                {
                    name: "agentHeaderPriority",
                    type: "number",
                    description: "The priority of the agent header.",
                },
                {
                    name: "agentHeaderTtl",
                    type: "number",
                    description: "The ttl of the agent header.",
                }
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                logger("Creating and registering agent with args: \n" + JSON.stringify(args));
                const agentHeader = {
                    sourceAgentId: args.agentHeaderSourceAgentId,
                    messageId: args.agentHeaderMessageId,
                    sourceAgentName: args.agentHeaderSourceAgentName,
                    targetAgentId: args.agentHeaderTargetAgentId,
                    messageType: Number(args.agentHeaderMessageType),
                    priority: Number(args.agentHeaderPriority),
                    ttl: Number(args.agentHeaderTtl),
                };
                const agentSettings = {
                    signers: parseArray(args.signers),
                    threshold: Number(args.threshold),
                    converterAddress: args.converterAddress,
                    agentHeader,
                };
                try {
                    logger("Creating and registering agent with settings: " + JSON.stringify(agentSettings));
                    const tx = yield this.agentSDK.createAndRegisterAgent({ agentSettings: agentSettings });
                    logger("Created and registered agent with tx hash: " + tx.hash);
                    const receipt = yield tx.wait();
                    const agentAddress = (0, ai_agent_sdk_js_1.parseNewAgentAddress)(receipt);
                    logger("Created and registered agent with address: " + agentAddress);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, "Created and registered agent with address: " + agentAddress);
                }
                catch (e) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Failed to create and register agent: " + e.message);
                }
            })
        });
    }
    get verifyDataFunction() {
        return new game_1.GameFunction({
            name: "verify_data",
            description: "Verify data in the ATTPs Platform.",
            args: [
                {
                    name: "agent",
                    type: "string",
                    description: "The agent address.",
                },
                {
                    name: "configDigest",
                    type: "string",
                    description: "The config digest.",
                },
                {
                    name: "data",
                    type: "string",
                    description: "The data to verify.",
                },
                {
                    name: "dataHash",
                    type: "string",
                    description: "The hash of the data.",
                },
                {
                    name: "signatures",
                    type: "{ r: string, s: string, v: number }[]",
                    description: "The signatures of the data.",
                },
                {
                    name: "metadataContentType",
                    type: "string",
                    description: "The content type of the metadata.",
                },
                {
                    name: "metadataEncoding",
                    type: "string",
                    description: "The encoding of the metadata.",
                },
                {
                    name: "metadataCompression",
                    type: "string",
                    description: "The compression of the metadata.",
                },
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                logger("Verifying data with args: \n" + JSON.stringify(args));
                const payload = {
                    data: args.data,
                    dataHash: args.dataHash,
                    signatures: parseArray(args.signatures),
                    metadata: {
                        contentType: args.metadataContentType,
                        encoding: args.metadataEncoding,
                        compression: args.metadataCompression,
                    }
                };
                const params = {
                    agent: args.agent,
                    digest: args.configDigest,
                    payload: payload,
                };
                try {
                    logger("Verifying data with payload: " + JSON.stringify(params));
                    const tx = yield this.agentSDK.verify(params);
                    logger("Verified data with tx hash: " + tx.hash);
                    yield tx.wait();
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, "Verified data with tx hash: " + tx.hash);
                }
                catch (e) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Failed to verify data: " + e.message);
                }
            })
        });
    }
    get attpsPriceQueryFunction() {
        return new game_1.GameFunction({
            name: "price_query",
            description: "Query the price of a service in the ATTPs Platform.",
            args: [
                {
                    name: "sourceAgentId",
                    type: "string",
                    description: "The source agent id.",
                },
                {
                    name: "feedId",
                    type: "string",
                    description: "The feed id.",
                },
            ],
            executable: (args, logger) => __awaiter(this, void 0, void 0, function* () {
                if (!args.sourceAgentId || !args.feedId) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Source agent id and feed id are required");
                }
                try {
                    const priceData = yield fetchPriceData(args.sourceAgentId, args.feedId);
                    logger(`Price data: ${JSON.stringify(priceData)}`);
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Done, `Fetched price data: \nAsk price: ${cleanNumber(priceData.askPrice)}\nBid price: ${cleanNumber(priceData.bidPrice)}\nMid price: ${cleanNumber(priceData.midPrice)}\nTimestamp: ${priceData.validTimeStamp}`);
                }
                catch (e) {
                    return new game_1.ExecutableGameFunctionResponse(game_1.ExecutableGameFunctionStatus.Failed, "Failed to fetch price data, error: " + e.message);
                }
            })
        });
    }
}
exports.default = AttpsPlugin;
