// src/index.ts
import axios from "axios";
var DEFAULT_BASE_URL = "https://api.enso.finance/api/v1";
var EnsoClient = class {
  constructor({
    baseURL = DEFAULT_BASE_URL,
    apiKey
  }) {
    this.client = axios.create({
      baseURL,
      headers: {
        Authorization: `Bearer ${apiKey}`
      }
    });
  }
  async request(config) {
    try {
      const response = await this.client.request(config);
      return response.data;
    } catch (error) {
      throw new Error(`API Request failed: ${error.message}`);
    }
  }
  // Method to get approval data to spend a token
  async getApprovalData(params) {
    const url = "/wallet/approve";
    if (!params.routingStrategy) {
      params.routingStrategy = "router";
    }
    return this.request({
      url,
      method: "GET",
      params
    });
  }
  // Method to get execution data for best route from a token to another
  async getRouterData(params) {
    const url = "/shortcuts/route";
    if (!params.routingStrategy) {
      params.routingStrategy = "router";
    }
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to quote swap from a token to another even if the user doesn't have the token or approve
  async getQuoteData(params) {
    const url = "/shortcuts/quote";
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to get wallet balances per chain
  async getBalances(params) {
    const url = "/wallet/balances";
    if (typeof params.useEoa === "undefined") {
      params.useEoa = true;
    }
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to get token data by address
  async getTokenData(params) {
    const url = `/tokens`;
    params.page = 1;
    return this.request({
      method: "GET",
      url,
      params
    });
  }
  // Method to get token price data
  async getPriceData(params) {
    const url = `/prices/${params.chainId}/${params.address}`;
    return this.request({
      method: "GET",
      url
    });
  }
  // Method to get protocol data
  async getProtocolData(params) {
    const url = `/protocols`;
    return this.request({
      method: "GET",
      url,
      params
    });
  }
};
export {
  EnsoClient
};
//# sourceMappingURL=index.js.map